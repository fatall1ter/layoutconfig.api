// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package infra

import (
	json "encoding/json"
	domain "git.countmax.ru/countmax/layoutconfig.api/domain"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonE2ef0e1DecodeGitCountmaxRuCountmaxLayoutconfigApiInfra(in *jlexer.Lexer, out *UpdChainStore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "store_id":
			out.StoreID = string(in.String())
		case "layout_id":
			out.LayoutID = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "crm_key":
			out.CRMKey = string(in.String())
		case "brands":
			out.Brands = string(in.String())
		case "location_id":
			out.LocationID = string(in.String())
		case "area":
			out.Area = float64(in.Float64())
		case "currency":
			out.Currency = string(in.String())
		case "options":
			out.Options = string(in.String())
		case "notes":
			out.Notes = string(in.String())
		case "valid_from":
			if in.IsNull() {
				in.Skip()
				out.ValidFrom = nil
			} else {
				if out.ValidFrom == nil {
					out.ValidFrom = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ValidFrom).UnmarshalJSON(data))
				}
			}
		case "no_history":
			out.NoHistory = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE2ef0e1EncodeGitCountmaxRuCountmaxLayoutconfigApiInfra(out *jwriter.Writer, in UpdChainStore) {
	out.RawByte('{')
	first := true
	_ = first
	if in.StoreID != "" {
		const prefix string = ",\"store_id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.StoreID))
	}
	if in.LayoutID != "" {
		const prefix string = ",\"layout_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LayoutID))
	}
	if in.Title != "" {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	if in.CRMKey != "" {
		const prefix string = ",\"crm_key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CRMKey))
	}
	if in.Brands != "" {
		const prefix string = ",\"brands\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Brands))
	}
	if in.LocationID != "" {
		const prefix string = ",\"location_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LocationID))
	}
	if in.Area != 0 {
		const prefix string = ",\"area\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Area))
	}
	if in.Currency != "" {
		const prefix string = ",\"currency\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Currency))
	}
	if in.Options != "" {
		const prefix string = ",\"options\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Options))
	}
	if in.Notes != "" {
		const prefix string = ",\"notes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Notes))
	}
	if in.ValidFrom != nil {
		const prefix string = ",\"valid_from\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.ValidFrom).MarshalJSON())
	}
	{
		const prefix string = ",\"no_history\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.NoHistory))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdChainStore) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE2ef0e1EncodeGitCountmaxRuCountmaxLayoutconfigApiInfra(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdChainStore) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE2ef0e1EncodeGitCountmaxRuCountmaxLayoutconfigApiInfra(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdChainStore) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE2ef0e1DecodeGitCountmaxRuCountmaxLayoutconfigApiInfra(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdChainStore) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE2ef0e1DecodeGitCountmaxRuCountmaxLayoutconfigApiInfra(l, v)
}
func easyjsonE2ef0e1DecodeGitCountmaxRuCountmaxLayoutconfigApiInfra1(in *jlexer.Lexer, out *NewChainStore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "layout_id":
			out.LayoutID = string(in.String())
		case "kind":
			out.Kind = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "crm_key":
			out.CRMKey = string(in.String())
		case "brands":
			out.Brands = string(in.String())
		case "location_id":
			out.LocationID = string(in.String())
		case "area":
			out.Area = float64(in.Float64())
		case "currency":
			out.Currency = string(in.String())
		case "options":
			out.Options = string(in.String())
		case "notes":
			out.Notes = string(in.String())
		case "valid_from":
			if in.IsNull() {
				in.Skip()
				out.ValidFrom = nil
			} else {
				if out.ValidFrom == nil {
					out.ValidFrom = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ValidFrom).UnmarshalJSON(data))
				}
			}
		case "valid_to":
			if in.IsNull() {
				in.Skip()
				out.ValidTo = nil
			} else {
				if out.ValidTo == nil {
					out.ValidTo = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ValidTo).UnmarshalJSON(data))
				}
			}
		case "creator":
			out.Creator = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE2ef0e1EncodeGitCountmaxRuCountmaxLayoutconfigApiInfra1(out *jwriter.Writer, in NewChainStore) {
	out.RawByte('{')
	first := true
	_ = first
	if in.LayoutID != "" {
		const prefix string = ",\"layout_id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.LayoutID))
	}
	if in.Kind != "" {
		const prefix string = ",\"kind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Kind))
	}
	if in.Title != "" {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	if in.CRMKey != "" {
		const prefix string = ",\"crm_key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CRMKey))
	}
	if in.Brands != "" {
		const prefix string = ",\"brands\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Brands))
	}
	if in.LocationID != "" {
		const prefix string = ",\"location_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LocationID))
	}
	if in.Area != 0 {
		const prefix string = ",\"area\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Area))
	}
	if in.Currency != "" {
		const prefix string = ",\"currency\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Currency))
	}
	if in.Options != "" {
		const prefix string = ",\"options\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Options))
	}
	if in.Notes != "" {
		const prefix string = ",\"notes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Notes))
	}
	if in.ValidFrom != nil {
		const prefix string = ",\"valid_from\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.ValidFrom).MarshalJSON())
	}
	if in.ValidTo != nil {
		const prefix string = ",\"valid_to\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.ValidTo).MarshalJSON())
	}
	if in.Creator != "" {
		const prefix string = ",\"creator\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Creator))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NewChainStore) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE2ef0e1EncodeGitCountmaxRuCountmaxLayoutconfigApiInfra1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NewChainStore) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE2ef0e1EncodeGitCountmaxRuCountmaxLayoutconfigApiInfra1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NewChainStore) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE2ef0e1DecodeGitCountmaxRuCountmaxLayoutconfigApiInfra1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NewChainStore) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE2ef0e1DecodeGitCountmaxRuCountmaxLayoutconfigApiInfra1(l, v)
}
func easyjsonE2ef0e1DecodeGitCountmaxRuCountmaxLayoutconfigApiInfra2(in *jlexer.Lexer, out *ChainStoresResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make(domain.ChainStores, 0, 0)
					} else {
						out.Data = domain.ChainStores{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v1 domain.ChainStore
					(v1).UnmarshalEasyJSON(in)
					out.Data = append(out.Data, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "result_set":
			easyjsonE2ef0e1DecodeGitCountmaxRuCountmaxLayoutconfigApiInfra3(in, &out.ResultSet)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE2ef0e1EncodeGitCountmaxRuCountmaxLayoutconfigApiInfra2(out *jwriter.Writer, in ChainStoresResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Data {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"result_set\":"
		out.RawString(prefix)
		easyjsonE2ef0e1EncodeGitCountmaxRuCountmaxLayoutconfigApiInfra3(out, in.ResultSet)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChainStoresResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE2ef0e1EncodeGitCountmaxRuCountmaxLayoutconfigApiInfra2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChainStoresResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE2ef0e1EncodeGitCountmaxRuCountmaxLayoutconfigApiInfra2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChainStoresResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE2ef0e1DecodeGitCountmaxRuCountmaxLayoutconfigApiInfra2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChainStoresResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE2ef0e1DecodeGitCountmaxRuCountmaxLayoutconfigApiInfra2(l, v)
}
func easyjsonE2ef0e1DecodeGitCountmaxRuCountmaxLayoutconfigApiInfra3(in *jlexer.Lexer, out *ResultSet) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "count":
			out.Count = int64(in.Int64())
		case "offset":
			out.Offset = int64(in.Int64())
		case "limit":
			out.Limit = int64(in.Int64())
		case "total":
			out.Total = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE2ef0e1EncodeGitCountmaxRuCountmaxLayoutconfigApiInfra3(out *jwriter.Writer, in ResultSet) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Count))
	}
	{
		const prefix string = ",\"offset\":"
		out.RawString(prefix)
		out.Int64(int64(in.Offset))
	}
	{
		const prefix string = ",\"limit\":"
		out.RawString(prefix)
		out.Int64(int64(in.Limit))
	}
	{
		const prefix string = ",\"total\":"
		out.RawString(prefix)
		out.Int64(int64(in.Total))
	}
	out.RawByte('}')
}

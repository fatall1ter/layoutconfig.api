// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package infra

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson75c74234DecodeGitCountmaxRuCountmaxLayoutconfigApiInfra(in *jlexer.Lexer, out *RequestEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			out.Key = string(in.String())
		case "kind":
			out.Kind = string(in.String())
		case "severity":
			out.Severity = string(in.String())
		case "layout_id":
			out.LayoutID = string(in.String())
		case "store_id":
			out.StoreID = string(in.String())
		case "from":
			if in.IsNull() {
				in.Skip()
				out.From = nil
			} else {
				if out.From == nil {
					out.From = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.From).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson75c74234EncodeGitCountmaxRuCountmaxLayoutconfigApiInfra(out *jwriter.Writer, in RequestEvent) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Key != "" {
		const prefix string = ",\"key\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Key))
	}
	if in.Kind != "" {
		const prefix string = ",\"kind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Kind))
	}
	if in.Severity != "" {
		const prefix string = ",\"severity\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Severity))
	}
	if in.LayoutID != "" {
		const prefix string = ",\"layout_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LayoutID))
	}
	if in.StoreID != "" {
		const prefix string = ",\"store_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.StoreID))
	}
	if in.From != nil {
		const prefix string = ",\"from\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.From).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RequestEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson75c74234EncodeGitCountmaxRuCountmaxLayoutconfigApiInfra(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RequestEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson75c74234EncodeGitCountmaxRuCountmaxLayoutconfigApiInfra(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RequestEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson75c74234DecodeGitCountmaxRuCountmaxLayoutconfigApiInfra(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RequestEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson75c74234DecodeGitCountmaxRuCountmaxLayoutconfigApiInfra(l, v)
}

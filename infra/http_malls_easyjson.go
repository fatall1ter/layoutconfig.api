// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package infra

import (
	json "encoding/json"
	domain "git.countmax.ru/countmax/layoutconfig.api/domain"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson95aed14cDecodeGitCountmaxRuCountmaxLayoutconfigApiInfra(in *jlexer.Lexer, out *MallsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make(domain.Malls, 0, 0)
					} else {
						out.Data = domain.Malls{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v1 domain.Mall
					(v1).UnmarshalEasyJSON(in)
					out.Data = append(out.Data, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "result_set":
			easyjson95aed14cDecodeGitCountmaxRuCountmaxLayoutconfigApiInfra1(in, &out.ResultSet)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson95aed14cEncodeGitCountmaxRuCountmaxLayoutconfigApiInfra(out *jwriter.Writer, in MallsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Data {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"result_set\":"
		out.RawString(prefix)
		easyjson95aed14cEncodeGitCountmaxRuCountmaxLayoutconfigApiInfra1(out, in.ResultSet)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MallsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson95aed14cEncodeGitCountmaxRuCountmaxLayoutconfigApiInfra(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MallsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson95aed14cEncodeGitCountmaxRuCountmaxLayoutconfigApiInfra(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MallsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson95aed14cDecodeGitCountmaxRuCountmaxLayoutconfigApiInfra(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MallsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson95aed14cDecodeGitCountmaxRuCountmaxLayoutconfigApiInfra(l, v)
}
func easyjson95aed14cDecodeGitCountmaxRuCountmaxLayoutconfigApiInfra1(in *jlexer.Lexer, out *ResultSet) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "count":
			out.Count = int64(in.Int64())
		case "offset":
			out.Offset = int64(in.Int64())
		case "limit":
			out.Limit = int64(in.Int64())
		case "total":
			out.Total = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson95aed14cEncodeGitCountmaxRuCountmaxLayoutconfigApiInfra1(out *jwriter.Writer, in ResultSet) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Count))
	}
	{
		const prefix string = ",\"offset\":"
		out.RawString(prefix)
		out.Int64(int64(in.Offset))
	}
	{
		const prefix string = ",\"limit\":"
		out.RawString(prefix)
		out.Int64(int64(in.Limit))
	}
	{
		const prefix string = ",\"total\":"
		out.RawString(prefix)
		out.Int64(int64(in.Total))
	}
	out.RawByte('}')
}

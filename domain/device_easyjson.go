// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package domain

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson3073ac56DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain(in *jlexer.Lexer, out *Tracks) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Tracks, 0, 0)
			} else {
				*out = Tracks{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 Track
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3073ac56EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain(out *jwriter.Writer, in Tracks) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v Tracks) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3073ac56EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Tracks) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3073ac56EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Tracks) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3073ac56DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Tracks) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3073ac56DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain(l, v)
}
func easyjson3073ac56DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain1(in *jlexer.Lexer, out *Track) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "layout_id":
			out.LayoutID = string(in.String())
		case "store_id":
			out.StoreID = string(in.String())
		case "device_id":
			out.DeviceID = string(in.String())
		case "customer_id":
			out.CustomerID = string(in.String())
		case "track_time":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.TrackTime).UnmarshalJSON(data))
			}
		case "x":
			out.XPos = float64(in.Float64())
		case "y":
			out.YPos = float64(in.Float64())
		case "h":
			out.Height = float64(in.Float64())
		case "creator":
			out.Creator = string(in.String())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "comment":
			out.Comment = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3073ac56EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain1(out *jwriter.Writer, in Track) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"layout_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.LayoutID))
	}
	{
		const prefix string = ",\"store_id\":"
		out.RawString(prefix)
		out.String(string(in.StoreID))
	}
	{
		const prefix string = ",\"device_id\":"
		out.RawString(prefix)
		out.String(string(in.DeviceID))
	}
	{
		const prefix string = ",\"customer_id\":"
		out.RawString(prefix)
		out.String(string(in.CustomerID))
	}
	{
		const prefix string = ",\"track_time\":"
		out.RawString(prefix)
		out.Raw((in.TrackTime).MarshalJSON())
	}
	{
		const prefix string = ",\"x\":"
		out.RawString(prefix)
		out.Float64(float64(in.XPos))
	}
	{
		const prefix string = ",\"y\":"
		out.RawString(prefix)
		out.Float64(float64(in.YPos))
	}
	{
		const prefix string = ",\"h\":"
		out.RawString(prefix)
		out.Float64(float64(in.Height))
	}
	{
		const prefix string = ",\"creator\":"
		out.RawString(prefix)
		out.String(string(in.Creator))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"comment\":"
		out.RawString(prefix)
		out.String(string(in.Comment))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Track) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3073ac56EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Track) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3073ac56EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Track) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3073ac56DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Track) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3073ac56DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain1(l, v)
}
func easyjson3073ac56DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain2(in *jlexer.Lexer, out *DevSensor) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "kind":
			out.Kind = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3073ac56EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain2(out *jwriter.Writer, in DevSensor) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"kind\":"
		out.RawString(prefix)
		out.String(string(in.Kind))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DevSensor) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3073ac56EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DevSensor) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3073ac56EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DevSensor) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3073ac56DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DevSensor) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3073ac56DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain2(l, v)
}
func easyjson3073ac56DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain3(in *jlexer.Lexer, out *DevConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "sn":
			out.SN = string(in.String())
		case "sensors":
			if in.IsNull() {
				in.Skip()
				out.Sensors = nil
			} else {
				in.Delim('[')
				if out.Sensors == nil {
					if !in.IsDelim(']') {
						out.Sensors = make(DevSensors, 0, 2)
					} else {
						out.Sensors = DevSensors{}
					}
				} else {
					out.Sensors = (out.Sensors)[:0]
				}
				for !in.IsDelim(']') {
					var v4 DevSensor
					(v4).UnmarshalEasyJSON(in)
					out.Sensors = append(out.Sensors, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3073ac56EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain3(out *jwriter.Writer, in DevConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"sn\":"
		out.RawString(prefix[1:])
		out.String(string(in.SN))
	}
	{
		const prefix string = ",\"sensors\":"
		out.RawString(prefix)
		if in.Sensors == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Sensors {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DevConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3073ac56EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DevConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3073ac56EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DevConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3073ac56DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DevConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3073ac56DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain3(l, v)
}

// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package domain

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonEa909af3DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain(in *jlexer.Lexer, out *PredictionsQueue) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(PredictionsQueue, 0, 1)
			} else {
				*out = PredictionsQueue{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 PredictionQueue
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEa909af3EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain(out *jwriter.Writer, in PredictionsQueue) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v PredictionsQueue) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEa909af3EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PredictionsQueue) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEa909af3EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PredictionsQueue) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEa909af3DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PredictionsQueue) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEa909af3DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain(l, v)
}
func easyjsonEa909af3DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain1(in *jlexer.Lexer, out *PredictionQueue) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "store_id":
			out.StoreID = string(in.String())
		case "points":
			(out.Points).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEa909af3EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain1(out *jwriter.Writer, in PredictionQueue) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"store_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.StoreID))
	}
	{
		const prefix string = ",\"points\":"
		out.RawString(prefix)
		(in.Points).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PredictionQueue) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEa909af3EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PredictionQueue) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEa909af3EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PredictionQueue) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEa909af3DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PredictionQueue) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEa909af3DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain1(l, v)
}
func easyjsonEa909af3DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain2(in *jlexer.Lexer, out *PredictionDataPoints) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(PredictionDataPoints, 0, 0)
			} else {
				*out = PredictionDataPoints{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v4 PredictionDataPoint
			(v4).UnmarshalEasyJSON(in)
			*out = append(*out, v4)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEa909af3EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain2(out *jwriter.Writer, in PredictionDataPoints) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v5, v6 := range in {
			if v5 > 0 {
				out.RawByte(',')
			}
			(v6).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v PredictionDataPoints) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEa909af3EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PredictionDataPoints) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEa909af3EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PredictionDataPoints) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEa909af3DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PredictionDataPoints) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEa909af3DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain2(l, v)
}
func easyjsonEa909af3DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain3(in *jlexer.Lexer, out *PredictionDataPoint) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "time":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Time).UnmarshalJSON(data))
			}
		case "cash_income_flow":
			out.CashIncomeFlow = float64(in.Float64())
		case "cash_income_sum":
			out.CashIncomeSum = float64(in.Float64())
		case "total_customer_count":
			out.TotalCustomerCount = float64(in.Float64())
		case "queue_length":
			(out.QueueLength).UnmarshalEasyJSON(in)
		case "recommended_checkouts_number":
			out.RecommendedCheckoutsNumber = int(in.Int())
		case "prediction_queue_length":
			out.PredictionQueueLength = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEa909af3EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain3(out *jwriter.Writer, in PredictionDataPoint) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		const prefix string = ",\"time\":"
		first = false
		out.RawString(prefix[1:])
		out.Raw((in.Time).MarshalJSON())
	}
	{
		const prefix string = ",\"cash_income_flow\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.CashIncomeFlow))
	}
	{
		const prefix string = ",\"cash_income_sum\":"
		out.RawString(prefix)
		out.Float64(float64(in.CashIncomeSum))
	}
	{
		const prefix string = ",\"total_customer_count\":"
		out.RawString(prefix)
		out.Float64(float64(in.TotalCustomerCount))
	}
	{
		const prefix string = ",\"queue_length\":"
		out.RawString(prefix)
		(in.QueueLength).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"recommended_checkouts_number\":"
		out.RawString(prefix)
		out.Int(int(in.RecommendedCheckoutsNumber))
	}
	{
		const prefix string = ",\"prediction_queue_length\":"
		out.RawString(prefix)
		out.Float64(float64(in.PredictionQueueLength))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PredictionDataPoint) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEa909af3EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PredictionDataPoint) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEa909af3EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PredictionDataPoint) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEa909af3DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PredictionDataPoint) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEa909af3DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain3(l, v)
}
func easyjsonEa909af3DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain4(in *jlexer.Lexer, out *ListQueueLength) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(ListQueueLength, 0, 8)
			} else {
				*out = ListQueueLength{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v7 float64
			v7 = float64(in.Float64())
			*out = append(*out, v7)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEa909af3EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain4(out *jwriter.Writer, in ListQueueLength) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v8, v9 := range in {
			if v8 > 0 {
				out.RawByte(',')
			}
			out.Float64(float64(v9))
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v ListQueueLength) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEa909af3EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ListQueueLength) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEa909af3EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ListQueueLength) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEa909af3DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ListQueueLength) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEa909af3DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain4(l, v)
}

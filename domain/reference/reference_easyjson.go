// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package reference

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonCdc0a05dDecodeGitCountmaxRuCountmaxLayoutconfigApiDomainReference(in *jlexer.Lexer, out *RefPrices) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(RefPrices, 0, 1)
			} else {
				*out = RefPrices{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 RefPrice
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCdc0a05dEncodeGitCountmaxRuCountmaxLayoutconfigApiDomainReference(out *jwriter.Writer, in RefPrices) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v RefPrices) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCdc0a05dEncodeGitCountmaxRuCountmaxLayoutconfigApiDomainReference(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RefPrices) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCdc0a05dEncodeGitCountmaxRuCountmaxLayoutconfigApiDomainReference(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RefPrices) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCdc0a05dDecodeGitCountmaxRuCountmaxLayoutconfigApiDomainReference(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RefPrices) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCdc0a05dDecodeGitCountmaxRuCountmaxLayoutconfigApiDomainReference(l, v)
}
func easyjsonCdc0a05dDecodeGitCountmaxRuCountmaxLayoutconfigApiDomainReference1(in *jlexer.Lexer, out *RefPrice) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "kind":
			out.Kind = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCdc0a05dEncodeGitCountmaxRuCountmaxLayoutconfigApiDomainReference1(out *jwriter.Writer, in RefPrice) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.Title != "" {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	if in.Kind != "" {
		const prefix string = ",\"kind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Kind))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RefPrice) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCdc0a05dEncodeGitCountmaxRuCountmaxLayoutconfigApiDomainReference1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RefPrice) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCdc0a05dEncodeGitCountmaxRuCountmaxLayoutconfigApiDomainReference1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RefPrice) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCdc0a05dDecodeGitCountmaxRuCountmaxLayoutconfigApiDomainReference1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RefPrice) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCdc0a05dDecodeGitCountmaxRuCountmaxLayoutconfigApiDomainReference1(l, v)
}
func easyjsonCdc0a05dDecodeGitCountmaxRuCountmaxLayoutconfigApiDomainReference2(in *jlexer.Lexer, out *RefKindZones) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(RefKindZones, 0, 1)
			} else {
				*out = RefKindZones{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v4 RefKindZone
			(v4).UnmarshalEasyJSON(in)
			*out = append(*out, v4)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCdc0a05dEncodeGitCountmaxRuCountmaxLayoutconfigApiDomainReference2(out *jwriter.Writer, in RefKindZones) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v5, v6 := range in {
			if v5 > 0 {
				out.RawByte(',')
			}
			(v6).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v RefKindZones) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCdc0a05dEncodeGitCountmaxRuCountmaxLayoutconfigApiDomainReference2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RefKindZones) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCdc0a05dEncodeGitCountmaxRuCountmaxLayoutconfigApiDomainReference2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RefKindZones) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCdc0a05dDecodeGitCountmaxRuCountmaxLayoutconfigApiDomainReference2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RefKindZones) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCdc0a05dDecodeGitCountmaxRuCountmaxLayoutconfigApiDomainReference2(l, v)
}
func easyjsonCdc0a05dDecodeGitCountmaxRuCountmaxLayoutconfigApiDomainReference3(in *jlexer.Lexer, out *RefKindZone) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "kind":
			out.Kind = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCdc0a05dEncodeGitCountmaxRuCountmaxLayoutconfigApiDomainReference3(out *jwriter.Writer, in RefKindZone) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.Title != "" {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	if in.Kind != "" {
		const prefix string = ",\"kind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Kind))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RefKindZone) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCdc0a05dEncodeGitCountmaxRuCountmaxLayoutconfigApiDomainReference3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RefKindZone) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCdc0a05dEncodeGitCountmaxRuCountmaxLayoutconfigApiDomainReference3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RefKindZone) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCdc0a05dDecodeGitCountmaxRuCountmaxLayoutconfigApiDomainReference3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RefKindZone) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCdc0a05dDecodeGitCountmaxRuCountmaxLayoutconfigApiDomainReference3(l, v)
}
func easyjsonCdc0a05dDecodeGitCountmaxRuCountmaxLayoutconfigApiDomainReference4(in *jlexer.Lexer, out *RefKindEnters) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(RefKindEnters, 0, 1)
			} else {
				*out = RefKindEnters{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v7 RefKindEnter
			(v7).UnmarshalEasyJSON(in)
			*out = append(*out, v7)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCdc0a05dEncodeGitCountmaxRuCountmaxLayoutconfigApiDomainReference4(out *jwriter.Writer, in RefKindEnters) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v8, v9 := range in {
			if v8 > 0 {
				out.RawByte(',')
			}
			(v9).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v RefKindEnters) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCdc0a05dEncodeGitCountmaxRuCountmaxLayoutconfigApiDomainReference4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RefKindEnters) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCdc0a05dEncodeGitCountmaxRuCountmaxLayoutconfigApiDomainReference4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RefKindEnters) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCdc0a05dDecodeGitCountmaxRuCountmaxLayoutconfigApiDomainReference4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RefKindEnters) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCdc0a05dDecodeGitCountmaxRuCountmaxLayoutconfigApiDomainReference4(l, v)
}
func easyjsonCdc0a05dDecodeGitCountmaxRuCountmaxLayoutconfigApiDomainReference5(in *jlexer.Lexer, out *RefKindEnter) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "kind":
			out.Kind = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCdc0a05dEncodeGitCountmaxRuCountmaxLayoutconfigApiDomainReference5(out *jwriter.Writer, in RefKindEnter) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.Title != "" {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	if in.Kind != "" {
		const prefix string = ",\"kind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Kind))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RefKindEnter) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCdc0a05dEncodeGitCountmaxRuCountmaxLayoutconfigApiDomainReference5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RefKindEnter) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCdc0a05dEncodeGitCountmaxRuCountmaxLayoutconfigApiDomainReference5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RefKindEnter) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCdc0a05dDecodeGitCountmaxRuCountmaxLayoutconfigApiDomainReference5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RefKindEnter) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCdc0a05dDecodeGitCountmaxRuCountmaxLayoutconfigApiDomainReference5(l, v)
}
func easyjsonCdc0a05dDecodeGitCountmaxRuCountmaxLayoutconfigApiDomainReference6(in *jlexer.Lexer, out *RefCategory) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "kind":
			out.Kind = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCdc0a05dEncodeGitCountmaxRuCountmaxLayoutconfigApiDomainReference6(out *jwriter.Writer, in RefCategory) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.Title != "" {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	if in.Kind != "" {
		const prefix string = ",\"kind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Kind))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RefCategory) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCdc0a05dEncodeGitCountmaxRuCountmaxLayoutconfigApiDomainReference6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RefCategory) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCdc0a05dEncodeGitCountmaxRuCountmaxLayoutconfigApiDomainReference6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RefCategory) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCdc0a05dDecodeGitCountmaxRuCountmaxLayoutconfigApiDomainReference6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RefCategory) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCdc0a05dDecodeGitCountmaxRuCountmaxLayoutconfigApiDomainReference6(l, v)
}
func easyjsonCdc0a05dDecodeGitCountmaxRuCountmaxLayoutconfigApiDomainReference7(in *jlexer.Lexer, out *RefCategories) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(RefCategories, 0, 1)
			} else {
				*out = RefCategories{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v10 RefCategory
			(v10).UnmarshalEasyJSON(in)
			*out = append(*out, v10)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCdc0a05dEncodeGitCountmaxRuCountmaxLayoutconfigApiDomainReference7(out *jwriter.Writer, in RefCategories) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v11, v12 := range in {
			if v11 > 0 {
				out.RawByte(',')
			}
			(v12).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v RefCategories) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCdc0a05dEncodeGitCountmaxRuCountmaxLayoutconfigApiDomainReference7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RefCategories) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCdc0a05dEncodeGitCountmaxRuCountmaxLayoutconfigApiDomainReference7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RefCategories) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCdc0a05dDecodeGitCountmaxRuCountmaxLayoutconfigApiDomainReference7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RefCategories) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCdc0a05dDecodeGitCountmaxRuCountmaxLayoutconfigApiDomainReference7(l, v)
}
func easyjsonCdc0a05dDecodeGitCountmaxRuCountmaxLayoutconfigApiDomainReference8(in *jlexer.Lexer, out *Ref) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "kind":
			out.Kind = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCdc0a05dEncodeGitCountmaxRuCountmaxLayoutconfigApiDomainReference8(out *jwriter.Writer, in Ref) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.Title != "" {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	if in.Kind != "" {
		const prefix string = ",\"kind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Kind))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Ref) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCdc0a05dEncodeGitCountmaxRuCountmaxLayoutconfigApiDomainReference8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Ref) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCdc0a05dEncodeGitCountmaxRuCountmaxLayoutconfigApiDomainReference8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Ref) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCdc0a05dDecodeGitCountmaxRuCountmaxLayoutconfigApiDomainReference8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Ref) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCdc0a05dDecodeGitCountmaxRuCountmaxLayoutconfigApiDomainReference8(l, v)
}

// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package domain

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonA29f5636DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain(in *jlexer.Lexer, out *Renters) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Renters, 0, 0)
			} else {
				*out = Renters{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 Renter
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA29f5636EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain(out *jwriter.Writer, in Renters) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v Renters) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA29f5636EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Renters) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA29f5636EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Renters) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA29f5636DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Renters) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA29f5636DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain(l, v)
}
func easyjsonA29f5636DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain1(in *jlexer.Lexer, out *Renter) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "renter_id":
			out.RenterID = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "layout_id":
			out.LayoutID = string(in.String())
		case "category_id":
			out.CategoryID = string(in.String())
		case "price_segment_id":
			out.PriceSegmentID = string(in.String())
		case "time_open":
			if in.IsNull() {
				in.Skip()
				out.TimeOpen = nil
			} else {
				if out.TimeOpen == nil {
					out.TimeOpen = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.TimeOpen).UnmarshalJSON(data))
				}
			}
		case "time_close":
			if in.IsNull() {
				in.Skip()
				out.TimeClose = nil
			} else {
				if out.TimeClose == nil {
					out.TimeClose = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.TimeClose).UnmarshalJSON(data))
				}
			}
		case "contract":
			out.Contract = string(in.String())
		case "options":
			out.Options = string(in.String())
		case "notes":
			out.Notes = string(in.String())
		case "valid_from":
			if in.IsNull() {
				in.Skip()
				out.ValidFrom = nil
			} else {
				if out.ValidFrom == nil {
					out.ValidFrom = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ValidFrom).UnmarshalJSON(data))
				}
			}
		case "valid_to":
			if in.IsNull() {
				in.Skip()
				out.ValidTo = nil
			} else {
				if out.ValidTo == nil {
					out.ValidTo = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ValidTo).UnmarshalJSON(data))
				}
			}
		case "is_active":
			out.IsActive = bool(in.Bool())
		case "creator":
			out.Creator = string(in.String())
		case "created_at":
			if in.IsNull() {
				in.Skip()
				out.CreatedAt = nil
			} else {
				if out.CreatedAt == nil {
					out.CreatedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CreatedAt).UnmarshalJSON(data))
				}
			}
		case "modifier":
			if in.IsNull() {
				in.Skip()
				out.Modifier = nil
			} else {
				if out.Modifier == nil {
					out.Modifier = new(string)
				}
				*out.Modifier = string(in.String())
			}
		case "modified_at":
			if in.IsNull() {
				in.Skip()
				out.ModifiedAt = nil
			} else {
				if out.ModifiedAt == nil {
					out.ModifiedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ModifiedAt).UnmarshalJSON(data))
				}
			}
		case "zones":
			if in.IsNull() {
				in.Skip()
				out.Zones = nil
			} else {
				in.Delim('[')
				if out.Zones == nil {
					if !in.IsDelim(']') {
						out.Zones = make(MallZones, 0, 0)
					} else {
						out.Zones = MallZones{}
					}
				} else {
					out.Zones = (out.Zones)[:0]
				}
				for !in.IsDelim(']') {
					var v4 MallZone
					(v4).UnmarshalEasyJSON(in)
					out.Zones = append(out.Zones, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA29f5636EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain1(out *jwriter.Writer, in Renter) {
	out.RawByte('{')
	first := true
	_ = first
	if in.RenterID != "" {
		const prefix string = ",\"renter_id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.RenterID))
	}
	if in.Title != "" {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	if in.LayoutID != "" {
		const prefix string = ",\"layout_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LayoutID))
	}
	if in.CategoryID != "" {
		const prefix string = ",\"category_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CategoryID))
	}
	if in.PriceSegmentID != "" {
		const prefix string = ",\"price_segment_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PriceSegmentID))
	}
	if in.TimeOpen != nil {
		const prefix string = ",\"time_open\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.TimeOpen).MarshalJSON())
	}
	if in.TimeClose != nil {
		const prefix string = ",\"time_close\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.TimeClose).MarshalJSON())
	}
	if in.Contract != "" {
		const prefix string = ",\"contract\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Contract))
	}
	if in.Options != "" {
		const prefix string = ",\"options\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Options))
	}
	if in.Notes != "" {
		const prefix string = ",\"notes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Notes))
	}
	if in.ValidFrom != nil {
		const prefix string = ",\"valid_from\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.ValidFrom).MarshalJSON())
	}
	if in.ValidTo != nil {
		const prefix string = ",\"valid_to\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.ValidTo).MarshalJSON())
	}
	{
		const prefix string = ",\"is_active\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsActive))
	}
	if in.Creator != "" {
		const prefix string = ",\"creator\":"
		out.RawString(prefix)
		out.String(string(in.Creator))
	}
	if in.CreatedAt != nil {
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((*in.CreatedAt).MarshalJSON())
	}
	if in.Modifier != nil {
		const prefix string = ",\"modifier\":"
		out.RawString(prefix)
		out.String(string(*in.Modifier))
	}
	if in.ModifiedAt != nil {
		const prefix string = ",\"modified_at\":"
		out.RawString(prefix)
		out.Raw((*in.ModifiedAt).MarshalJSON())
	}
	if len(in.Zones) != 0 {
		const prefix string = ",\"zones\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v5, v6 := range in.Zones {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Renter) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA29f5636EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Renter) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA29f5636EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Renter) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA29f5636DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Renter) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA29f5636DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain1(l, v)
}
func easyjsonA29f5636DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain2(in *jlexer.Lexer, out *MetaData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "options":
			out.Options = string(in.String())
		case "valid_from":
			if in.IsNull() {
				in.Skip()
				out.ValidFrom = nil
			} else {
				if out.ValidFrom == nil {
					out.ValidFrom = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ValidFrom).UnmarshalJSON(data))
				}
			}
		case "valid_to":
			if in.IsNull() {
				in.Skip()
				out.ValidTo = nil
			} else {
				if out.ValidTo == nil {
					out.ValidTo = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ValidTo).UnmarshalJSON(data))
				}
			}
		case "creator":
			out.Creator = string(in.String())
		case "created_at":
			if in.IsNull() {
				in.Skip()
				out.CreatedAt = nil
			} else {
				if out.CreatedAt == nil {
					out.CreatedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CreatedAt).UnmarshalJSON(data))
				}
			}
		case "modifier":
			if in.IsNull() {
				in.Skip()
				out.Modifier = nil
			} else {
				if out.Modifier == nil {
					out.Modifier = new(string)
				}
				*out.Modifier = string(in.String())
			}
		case "modified_at":
			if in.IsNull() {
				in.Skip()
				out.ModifiedAt = nil
			} else {
				if out.ModifiedAt == nil {
					out.ModifiedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ModifiedAt).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA29f5636EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain2(out *jwriter.Writer, in MetaData) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Options != "" {
		const prefix string = ",\"options\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Options))
	}
	if in.ValidFrom != nil {
		const prefix string = ",\"valid_from\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.ValidFrom).MarshalJSON())
	}
	if in.ValidTo != nil {
		const prefix string = ",\"valid_to\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.ValidTo).MarshalJSON())
	}
	if in.Creator != "" {
		const prefix string = ",\"creator\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Creator))
	}
	if in.CreatedAt != nil {
		const prefix string = ",\"created_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.CreatedAt).MarshalJSON())
	}
	if in.Modifier != nil {
		const prefix string = ",\"modifier\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Modifier))
	}
	if in.ModifiedAt != nil {
		const prefix string = ",\"modified_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.ModifiedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MetaData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA29f5636EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MetaData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA29f5636EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MetaData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA29f5636DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MetaData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA29f5636DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain2(l, v)
}
func easyjsonA29f5636DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain3(in *jlexer.Lexer, out *MallZone) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "zone_id":
			out.ZoneID = string(in.String())
		case "parent_id":
			if in.IsNull() {
				in.Skip()
				out.ParentID = nil
			} else {
				if out.ParentID == nil {
					out.ParentID = new(string)
				}
				*out.ParentID = string(in.String())
			}
		case "layout_id":
			out.LayoutID = string(in.String())
		case "kind":
			out.Kind = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "area":
			out.Area = float64(in.Float64())
		case "options":
			out.Options = string(in.String())
		case "notes":
			out.Notes = string(in.String())
		case "valid_from":
			if in.IsNull() {
				in.Skip()
				out.ValidFrom = nil
			} else {
				if out.ValidFrom == nil {
					out.ValidFrom = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ValidFrom).UnmarshalJSON(data))
				}
			}
		case "valid_to":
			if in.IsNull() {
				in.Skip()
				out.ValidTo = nil
			} else {
				if out.ValidTo == nil {
					out.ValidTo = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ValidTo).UnmarshalJSON(data))
				}
			}
		case "is_active":
			out.IsActive = bool(in.Bool())
		case "creator":
			out.Creator = string(in.String())
		case "created_at":
			if in.IsNull() {
				in.Skip()
				out.CreatedAt = nil
			} else {
				if out.CreatedAt == nil {
					out.CreatedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CreatedAt).UnmarshalJSON(data))
				}
			}
		case "modifier":
			if in.IsNull() {
				in.Skip()
				out.Modifier = nil
			} else {
				if out.Modifier == nil {
					out.Modifier = new(string)
				}
				*out.Modifier = string(in.String())
			}
		case "modified_at":
			if in.IsNull() {
				in.Skip()
				out.ModifiedAt = nil
			} else {
				if out.ModifiedAt == nil {
					out.ModifiedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ModifiedAt).UnmarshalJSON(data))
				}
			}
		case "entrances":
			(out.Entrances).UnmarshalEasyJSON(in)
		case "sensors":
			(out.Sensors).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA29f5636EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain3(out *jwriter.Writer, in MallZone) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ZoneID != "" {
		const prefix string = ",\"zone_id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ZoneID))
	}
	if in.ParentID != nil {
		const prefix string = ",\"parent_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ParentID))
	}
	if in.LayoutID != "" {
		const prefix string = ",\"layout_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LayoutID))
	}
	if in.Kind != "" {
		const prefix string = ",\"kind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Kind))
	}
	if in.Title != "" {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	if in.Area != 0 {
		const prefix string = ",\"area\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Area))
	}
	if in.Options != "" {
		const prefix string = ",\"options\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Options))
	}
	if in.Notes != "" {
		const prefix string = ",\"notes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Notes))
	}
	if in.ValidFrom != nil {
		const prefix string = ",\"valid_from\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.ValidFrom).MarshalJSON())
	}
	if in.ValidTo != nil {
		const prefix string = ",\"valid_to\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.ValidTo).MarshalJSON())
	}
	{
		const prefix string = ",\"is_active\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsActive))
	}
	if in.Creator != "" {
		const prefix string = ",\"creator\":"
		out.RawString(prefix)
		out.String(string(in.Creator))
	}
	if in.CreatedAt != nil {
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((*in.CreatedAt).MarshalJSON())
	}
	if in.Modifier != nil {
		const prefix string = ",\"modifier\":"
		out.RawString(prefix)
		out.String(string(*in.Modifier))
	}
	if in.ModifiedAt != nil {
		const prefix string = ",\"modified_at\":"
		out.RawString(prefix)
		out.Raw((*in.ModifiedAt).MarshalJSON())
	}
	if len(in.Entrances) != 0 {
		const prefix string = ",\"entrances\":"
		out.RawString(prefix)
		(in.Entrances).MarshalEasyJSON(out)
	}
	if len(in.Sensors) != 0 {
		const prefix string = ",\"sensors\":"
		out.RawString(prefix)
		(in.Sensors).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MallZone) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA29f5636EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MallZone) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA29f5636EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MallZone) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA29f5636DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MallZone) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA29f5636DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain3(l, v)
}
func easyjsonA29f5636DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain4(in *jlexer.Lexer, out *MallSensors) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(MallSensors, 0, 0)
			} else {
				*out = MallSensors{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v7 MallSensor
			(v7).UnmarshalEasyJSON(in)
			*out = append(*out, v7)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA29f5636EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain4(out *jwriter.Writer, in MallSensors) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v8, v9 := range in {
			if v8 > 0 {
				out.RawByte(',')
			}
			(v9).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v MallSensors) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA29f5636EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MallSensors) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA29f5636EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MallSensors) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA29f5636DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MallSensors) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA29f5636DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain4(l, v)
}
func easyjsonA29f5636DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain5(in *jlexer.Lexer, out *MallSensor) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "sensor_id":
			out.SensorID = string(in.String())
		case "device_id":
			out.DeviceID = string(in.String())
		case "layout_id":
			out.LayoutID = string(in.String())
		case "external_id":
			out.ExternalID = string(in.String())
		case "kind":
			out.Kind = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "options":
			out.Options = string(in.String())
		case "notes":
			out.Notes = string(in.String())
		case "valid_from":
			if in.IsNull() {
				in.Skip()
				out.ValidFrom = nil
			} else {
				if out.ValidFrom == nil {
					out.ValidFrom = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ValidFrom).UnmarshalJSON(data))
				}
			}
		case "valid_to":
			if in.IsNull() {
				in.Skip()
				out.ValidTo = nil
			} else {
				if out.ValidTo == nil {
					out.ValidTo = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ValidTo).UnmarshalJSON(data))
				}
			}
		case "is_active":
			out.IsActive = bool(in.Bool())
		case "creator":
			out.Creator = string(in.String())
		case "created_at":
			if in.IsNull() {
				in.Skip()
				out.CreatedAt = nil
			} else {
				if out.CreatedAt == nil {
					out.CreatedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CreatedAt).UnmarshalJSON(data))
				}
			}
		case "modifier":
			if in.IsNull() {
				in.Skip()
				out.Modifier = nil
			} else {
				if out.Modifier == nil {
					out.Modifier = new(string)
				}
				*out.Modifier = string(in.String())
			}
		case "modified_at":
			if in.IsNull() {
				in.Skip()
				out.ModifiedAt = nil
			} else {
				if out.ModifiedAt == nil {
					out.ModifiedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ModifiedAt).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA29f5636EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain5(out *jwriter.Writer, in MallSensor) {
	out.RawByte('{')
	first := true
	_ = first
	if in.SensorID != "" {
		const prefix string = ",\"sensor_id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.SensorID))
	}
	if in.DeviceID != "" {
		const prefix string = ",\"device_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DeviceID))
	}
	if in.LayoutID != "" {
		const prefix string = ",\"layout_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LayoutID))
	}
	if in.ExternalID != "" {
		const prefix string = ",\"external_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ExternalID))
	}
	if in.Kind != "" {
		const prefix string = ",\"kind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Kind))
	}
	if in.Title != "" {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	if in.Options != "" {
		const prefix string = ",\"options\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Options))
	}
	if in.Notes != "" {
		const prefix string = ",\"notes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Notes))
	}
	if in.ValidFrom != nil {
		const prefix string = ",\"valid_from\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.ValidFrom).MarshalJSON())
	}
	if in.ValidTo != nil {
		const prefix string = ",\"valid_to\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.ValidTo).MarshalJSON())
	}
	{
		const prefix string = ",\"is_active\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsActive))
	}
	if in.Creator != "" {
		const prefix string = ",\"creator\":"
		out.RawString(prefix)
		out.String(string(in.Creator))
	}
	if in.CreatedAt != nil {
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((*in.CreatedAt).MarshalJSON())
	}
	if in.Modifier != nil {
		const prefix string = ",\"modifier\":"
		out.RawString(prefix)
		out.String(string(*in.Modifier))
	}
	if in.ModifiedAt != nil {
		const prefix string = ",\"modified_at\":"
		out.RawString(prefix)
		out.Raw((*in.ModifiedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MallSensor) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA29f5636EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MallSensor) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA29f5636EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MallSensor) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA29f5636DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MallSensor) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA29f5636DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain5(l, v)
}
func easyjsonA29f5636DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain6(in *jlexer.Lexer, out *MallEntrance) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "entrance_id":
			out.EntranceID = string(in.String())
		case "layout_id":
			out.LayoutID = string(in.String())
		case "floor_id":
			out.FloorID = string(in.String())
		case "kind":
			out.Kind = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "options":
			out.Options = string(in.String())
		case "notes":
			out.Notes = string(in.String())
		case "valid_from":
			if in.IsNull() {
				in.Skip()
				out.ValidFrom = nil
			} else {
				if out.ValidFrom == nil {
					out.ValidFrom = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ValidFrom).UnmarshalJSON(data))
				}
			}
		case "valid_to":
			if in.IsNull() {
				in.Skip()
				out.ValidTo = nil
			} else {
				if out.ValidTo == nil {
					out.ValidTo = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ValidTo).UnmarshalJSON(data))
				}
			}
		case "is_active":
			out.IsActive = bool(in.Bool())
		case "creator":
			out.Creator = string(in.String())
		case "created_at":
			if in.IsNull() {
				in.Skip()
				out.CreatedAt = nil
			} else {
				if out.CreatedAt == nil {
					out.CreatedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CreatedAt).UnmarshalJSON(data))
				}
			}
		case "modifier":
			if in.IsNull() {
				in.Skip()
				out.Modifier = nil
			} else {
				if out.Modifier == nil {
					out.Modifier = new(string)
				}
				*out.Modifier = string(in.String())
			}
		case "modified_at":
			if in.IsNull() {
				in.Skip()
				out.ModifiedAt = nil
			} else {
				if out.ModifiedAt == nil {
					out.ModifiedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ModifiedAt).UnmarshalJSON(data))
				}
			}
		case "sensors":
			(out.Sensors).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA29f5636EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain6(out *jwriter.Writer, in MallEntrance) {
	out.RawByte('{')
	first := true
	_ = first
	if in.EntranceID != "" {
		const prefix string = ",\"entrance_id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.EntranceID))
	}
	if in.LayoutID != "" {
		const prefix string = ",\"layout_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LayoutID))
	}
	if in.FloorID != "" {
		const prefix string = ",\"floor_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FloorID))
	}
	if in.Kind != "" {
		const prefix string = ",\"kind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Kind))
	}
	if in.Title != "" {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	if in.Options != "" {
		const prefix string = ",\"options\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Options))
	}
	if in.Notes != "" {
		const prefix string = ",\"notes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Notes))
	}
	if in.ValidFrom != nil {
		const prefix string = ",\"valid_from\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.ValidFrom).MarshalJSON())
	}
	if in.ValidTo != nil {
		const prefix string = ",\"valid_to\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.ValidTo).MarshalJSON())
	}
	{
		const prefix string = ",\"is_active\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsActive))
	}
	if in.Creator != "" {
		const prefix string = ",\"creator\":"
		out.RawString(prefix)
		out.String(string(in.Creator))
	}
	if in.CreatedAt != nil {
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((*in.CreatedAt).MarshalJSON())
	}
	if in.Modifier != nil {
		const prefix string = ",\"modifier\":"
		out.RawString(prefix)
		out.String(string(*in.Modifier))
	}
	if in.ModifiedAt != nil {
		const prefix string = ",\"modified_at\":"
		out.RawString(prefix)
		out.Raw((*in.ModifiedAt).MarshalJSON())
	}
	if len(in.Sensors) != 0 {
		const prefix string = ",\"sensors\":"
		out.RawString(prefix)
		(in.Sensors).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MallEntrance) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA29f5636EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MallEntrance) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA29f5636EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MallEntrance) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA29f5636DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MallEntrance) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA29f5636DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain6(l, v)
}
func easyjsonA29f5636DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain7(in *jlexer.Lexer, out *MallDevices) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(MallDevices, 0, 0)
			} else {
				*out = MallDevices{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v10 MallDevice
			(v10).UnmarshalEasyJSON(in)
			*out = append(*out, v10)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA29f5636EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain7(out *jwriter.Writer, in MallDevices) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v11, v12 := range in {
			if v11 > 0 {
				out.RawByte(',')
			}
			(v12).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v MallDevices) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA29f5636EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MallDevices) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA29f5636EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MallDevices) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA29f5636DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MallDevices) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA29f5636DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain7(l, v)
}
func easyjsonA29f5636DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain8(in *jlexer.Lexer, out *MallDevice) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "device_id":
			out.DeviceID = string(in.String())
		case "layout_id":
			out.LayoutID = string(in.String())
		case "floor_id":
			out.FloorID = string(in.String())
		case "master_id":
			if in.IsNull() {
				in.Skip()
				out.MasterID = nil
			} else {
				if out.MasterID == nil {
					out.MasterID = new(string)
				}
				*out.MasterID = string(in.String())
			}
		case "kind":
			out.Kind = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "is_active":
			out.IsActive = bool(in.Bool())
		case "ip":
			out.IP = string(in.String())
		case "port":
			out.Port = string(in.String())
		case "sn":
			out.SN = string(in.String())
		case "mode":
			out.Mode = string(in.String())
		case "dcmode":
			out.DCMode = string(in.String())
		case "login":
			out.Login = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "options":
			out.Options = string(in.String())
		case "notes":
			out.Notes = string(in.String())
		case "valid_from":
			if in.IsNull() {
				in.Skip()
				out.ValidFrom = nil
			} else {
				if out.ValidFrom == nil {
					out.ValidFrom = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ValidFrom).UnmarshalJSON(data))
				}
			}
		case "valid_to":
			if in.IsNull() {
				in.Skip()
				out.ValidTo = nil
			} else {
				if out.ValidTo == nil {
					out.ValidTo = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ValidTo).UnmarshalJSON(data))
				}
			}
		case "creator":
			out.Creator = string(in.String())
		case "created_at":
			if in.IsNull() {
				in.Skip()
				out.CreatedAt = nil
			} else {
				if out.CreatedAt == nil {
					out.CreatedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CreatedAt).UnmarshalJSON(data))
				}
			}
		case "modifier":
			if in.IsNull() {
				in.Skip()
				out.Modifier = nil
			} else {
				if out.Modifier == nil {
					out.Modifier = new(string)
				}
				*out.Modifier = string(in.String())
			}
		case "modified_at":
			if in.IsNull() {
				in.Skip()
				out.ModifiedAt = nil
			} else {
				if out.ModifiedAt == nil {
					out.ModifiedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ModifiedAt).UnmarshalJSON(data))
				}
			}
		case "sensors":
			(out.Sensors).UnmarshalEasyJSON(in)
		case "delay":
			if in.IsNull() {
				in.Skip()
				out.Delay = nil
			} else {
				if out.Delay == nil {
					out.Delay = new(DelayPoint)
				}
				(*out.Delay).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA29f5636EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain8(out *jwriter.Writer, in MallDevice) {
	out.RawByte('{')
	first := true
	_ = first
	if in.DeviceID != "" {
		const prefix string = ",\"device_id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.DeviceID))
	}
	if in.LayoutID != "" {
		const prefix string = ",\"layout_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LayoutID))
	}
	if in.FloorID != "" {
		const prefix string = ",\"floor_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FloorID))
	}
	if in.MasterID != nil {
		const prefix string = ",\"master_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.MasterID))
	}
	if in.Kind != "" {
		const prefix string = ",\"kind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Kind))
	}
	if in.Title != "" {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"is_active\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsActive))
	}
	if in.IP != "" {
		const prefix string = ",\"ip\":"
		out.RawString(prefix)
		out.String(string(in.IP))
	}
	if in.Port != "" {
		const prefix string = ",\"port\":"
		out.RawString(prefix)
		out.String(string(in.Port))
	}
	if in.SN != "" {
		const prefix string = ",\"sn\":"
		out.RawString(prefix)
		out.String(string(in.SN))
	}
	if in.Mode != "" {
		const prefix string = ",\"mode\":"
		out.RawString(prefix)
		out.String(string(in.Mode))
	}
	if in.DCMode != "" {
		const prefix string = ",\"dcmode\":"
		out.RawString(prefix)
		out.String(string(in.DCMode))
	}
	if in.Login != "" {
		const prefix string = ",\"login\":"
		out.RawString(prefix)
		out.String(string(in.Login))
	}
	if in.Password != "" {
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	if in.Options != "" {
		const prefix string = ",\"options\":"
		out.RawString(prefix)
		out.String(string(in.Options))
	}
	if in.Notes != "" {
		const prefix string = ",\"notes\":"
		out.RawString(prefix)
		out.String(string(in.Notes))
	}
	if in.ValidFrom != nil {
		const prefix string = ",\"valid_from\":"
		out.RawString(prefix)
		out.Raw((*in.ValidFrom).MarshalJSON())
	}
	if in.ValidTo != nil {
		const prefix string = ",\"valid_to\":"
		out.RawString(prefix)
		out.Raw((*in.ValidTo).MarshalJSON())
	}
	if in.Creator != "" {
		const prefix string = ",\"creator\":"
		out.RawString(prefix)
		out.String(string(in.Creator))
	}
	if in.CreatedAt != nil {
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((*in.CreatedAt).MarshalJSON())
	}
	if in.Modifier != nil {
		const prefix string = ",\"modifier\":"
		out.RawString(prefix)
		out.String(string(*in.Modifier))
	}
	if in.ModifiedAt != nil {
		const prefix string = ",\"modified_at\":"
		out.RawString(prefix)
		out.Raw((*in.ModifiedAt).MarshalJSON())
	}
	if len(in.Sensors) != 0 {
		const prefix string = ",\"sensors\":"
		out.RawString(prefix)
		(in.Sensors).MarshalEasyJSON(out)
	}
	if in.Delay != nil {
		const prefix string = ",\"delay\":"
		out.RawString(prefix)
		(*in.Delay).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MallDevice) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA29f5636EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MallDevice) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA29f5636EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MallDevice) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA29f5636DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MallDevice) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA29f5636DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain8(l, v)
}
func easyjsonA29f5636DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain9(in *jlexer.Lexer, out *Mall) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "layout_id":
			out.LayoutID = string(in.String())
		case "kind":
			out.Kind = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "languages":
			out.Languages = string(in.String())
		case "crm_key":
			out.CRMKey = string(in.String())
		case "options":
			out.Options = string(in.String())
		case "notes":
			out.Notes = string(in.String())
		case "valid_from":
			if in.IsNull() {
				in.Skip()
				out.ValidFrom = nil
			} else {
				if out.ValidFrom == nil {
					out.ValidFrom = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ValidFrom).UnmarshalJSON(data))
				}
			}
		case "valid_to":
			if in.IsNull() {
				in.Skip()
				out.ValidTo = nil
			} else {
				if out.ValidTo == nil {
					out.ValidTo = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ValidTo).UnmarshalJSON(data))
				}
			}
		case "is_active":
			out.IsActive = bool(in.Bool())
		case "creator":
			out.Creator = string(in.String())
		case "created_at":
			if in.IsNull() {
				in.Skip()
				out.CreatedAt = nil
			} else {
				if out.CreatedAt == nil {
					out.CreatedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CreatedAt).UnmarshalJSON(data))
				}
			}
		case "modifier":
			if in.IsNull() {
				in.Skip()
				out.Modifier = nil
			} else {
				if out.Modifier == nil {
					out.Modifier = new(string)
				}
				*out.Modifier = string(in.String())
			}
		case "modified_at":
			if in.IsNull() {
				in.Skip()
				out.ModifiedAt = nil
			} else {
				if out.ModifiedAt == nil {
					out.ModifiedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ModifiedAt).UnmarshalJSON(data))
				}
			}
		case "read_only":
			out.ReadOnly = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA29f5636EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain9(out *jwriter.Writer, in Mall) {
	out.RawByte('{')
	first := true
	_ = first
	if in.LayoutID != "" {
		const prefix string = ",\"layout_id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.LayoutID))
	}
	if in.Kind != "" {
		const prefix string = ",\"kind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Kind))
	}
	if in.Title != "" {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	if in.Languages != "" {
		const prefix string = ",\"languages\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Languages))
	}
	if in.CRMKey != "" {
		const prefix string = ",\"crm_key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CRMKey))
	}
	if in.Options != "" {
		const prefix string = ",\"options\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Options))
	}
	if in.Notes != "" {
		const prefix string = ",\"notes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Notes))
	}
	if in.ValidFrom != nil {
		const prefix string = ",\"valid_from\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.ValidFrom).MarshalJSON())
	}
	if in.ValidTo != nil {
		const prefix string = ",\"valid_to\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.ValidTo).MarshalJSON())
	}
	{
		const prefix string = ",\"is_active\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsActive))
	}
	if in.Creator != "" {
		const prefix string = ",\"creator\":"
		out.RawString(prefix)
		out.String(string(in.Creator))
	}
	if in.CreatedAt != nil {
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((*in.CreatedAt).MarshalJSON())
	}
	if in.Modifier != nil {
		const prefix string = ",\"modifier\":"
		out.RawString(prefix)
		out.String(string(*in.Modifier))
	}
	if in.ModifiedAt != nil {
		const prefix string = ",\"modified_at\":"
		out.RawString(prefix)
		out.Raw((*in.ModifiedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"read_only\":"
		out.RawString(prefix)
		out.Bool(bool(in.ReadOnly))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Mall) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA29f5636EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Mall) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA29f5636EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Mall) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA29f5636DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Mall) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA29f5636DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain9(l, v)
}
func easyjsonA29f5636DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain10(in *jlexer.Lexer, out *BindingsEntranceZone) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(BindingsEntranceZone, 0, 0)
			} else {
				*out = BindingsEntranceZone{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v13 BindingEntranceZone
			(v13).UnmarshalEasyJSON(in)
			*out = append(*out, v13)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA29f5636EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain10(out *jwriter.Writer, in BindingsEntranceZone) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v14, v15 := range in {
			if v14 > 0 {
				out.RawByte(',')
			}
			(v15).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v BindingsEntranceZone) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA29f5636EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BindingsEntranceZone) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA29f5636EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BindingsEntranceZone) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA29f5636DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BindingsEntranceZone) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA29f5636DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain10(l, v)
}
func easyjsonA29f5636DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain11(in *jlexer.Lexer, out *BindingEntranceZone) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "entrance_id":
			out.EntranceID = string(in.String())
		case "entrance_name":
			out.EntranceName = string(in.String())
		case "zone_id":
			out.ZoneID = string(in.String())
		case "kind_zone":
			out.KindZone = string(in.String())
		case "direction":
			out.Direction = string(in.String())
		case "options":
			out.Options = string(in.String())
		case "valid_from":
			if in.IsNull() {
				in.Skip()
				out.ValidFrom = nil
			} else {
				if out.ValidFrom == nil {
					out.ValidFrom = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ValidFrom).UnmarshalJSON(data))
				}
			}
		case "valid_to":
			if in.IsNull() {
				in.Skip()
				out.ValidTo = nil
			} else {
				if out.ValidTo == nil {
					out.ValidTo = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ValidTo).UnmarshalJSON(data))
				}
			}
		case "creator":
			out.Creator = string(in.String())
		case "created_at":
			if in.IsNull() {
				in.Skip()
				out.CreatedAt = nil
			} else {
				if out.CreatedAt == nil {
					out.CreatedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CreatedAt).UnmarshalJSON(data))
				}
			}
		case "modifier":
			if in.IsNull() {
				in.Skip()
				out.Modifier = nil
			} else {
				if out.Modifier == nil {
					out.Modifier = new(string)
				}
				*out.Modifier = string(in.String())
			}
		case "modified_at":
			if in.IsNull() {
				in.Skip()
				out.ModifiedAt = nil
			} else {
				if out.ModifiedAt == nil {
					out.ModifiedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ModifiedAt).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA29f5636EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain11(out *jwriter.Writer, in BindingEntranceZone) {
	out.RawByte('{')
	first := true
	_ = first
	if in.EntranceID != "" {
		const prefix string = ",\"entrance_id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.EntranceID))
	}
	if in.EntranceName != "" {
		const prefix string = ",\"entrance_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.EntranceName))
	}
	if in.ZoneID != "" {
		const prefix string = ",\"zone_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ZoneID))
	}
	if in.KindZone != "" {
		const prefix string = ",\"kind_zone\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.KindZone))
	}
	if in.Direction != "" {
		const prefix string = ",\"direction\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Direction))
	}
	if in.Options != "" {
		const prefix string = ",\"options\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Options))
	}
	if in.ValidFrom != nil {
		const prefix string = ",\"valid_from\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.ValidFrom).MarshalJSON())
	}
	if in.ValidTo != nil {
		const prefix string = ",\"valid_to\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.ValidTo).MarshalJSON())
	}
	if in.Creator != "" {
		const prefix string = ",\"creator\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Creator))
	}
	if in.CreatedAt != nil {
		const prefix string = ",\"created_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.CreatedAt).MarshalJSON())
	}
	if in.Modifier != nil {
		const prefix string = ",\"modifier\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Modifier))
	}
	if in.ModifiedAt != nil {
		const prefix string = ",\"modified_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.ModifiedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BindingEntranceZone) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA29f5636EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BindingEntranceZone) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA29f5636EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BindingEntranceZone) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA29f5636DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BindingEntranceZone) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA29f5636DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain11(l, v)
}

// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package domain

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson7c2ce5f2DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain(in *jlexer.Lexer, out *ZonesDataQueue) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(ZonesDataQueue, 0, 1)
			} else {
				*out = ZonesDataQueue{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 ZoneDataQueue
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c2ce5f2EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain(out *jwriter.Writer, in ZonesDataQueue) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v ZonesDataQueue) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7c2ce5f2EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ZonesDataQueue) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7c2ce5f2EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ZonesDataQueue) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7c2ce5f2DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ZonesDataQueue) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7c2ce5f2DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain(l, v)
}
func easyjson7c2ce5f2DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain1(in *jlexer.Lexer, out *ZonesAttendance) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(ZonesAttendance, 0, 1)
			} else {
				*out = ZonesAttendance{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v4 ZoneAttendance
			(v4).UnmarshalEasyJSON(in)
			*out = append(*out, v4)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c2ce5f2EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain1(out *jwriter.Writer, in ZonesAttendance) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v5, v6 := range in {
			if v5 > 0 {
				out.RawByte(',')
			}
			(v6).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v ZonesAttendance) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7c2ce5f2EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ZonesAttendance) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7c2ce5f2EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ZonesAttendance) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7c2ce5f2DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ZonesAttendance) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7c2ce5f2DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain1(l, v)
}
func easyjson7c2ce5f2DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain2(in *jlexer.Lexer, out *ZoneDataQueue) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "zone_id":
			out.ZoneID = string(in.String())
		case "points":
			(out.Points).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c2ce5f2EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain2(out *jwriter.Writer, in ZoneDataQueue) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"zone_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ZoneID))
	}
	{
		const prefix string = ",\"points\":"
		out.RawString(prefix)
		(in.Points).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ZoneDataQueue) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7c2ce5f2EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ZoneDataQueue) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7c2ce5f2EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ZoneDataQueue) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7c2ce5f2DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ZoneDataQueue) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7c2ce5f2DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain2(l, v)
}
func easyjson7c2ce5f2DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain3(in *jlexer.Lexer, out *ZoneAttendance) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "zone_id":
			out.ZoneID = string(in.String())
		case "points":
			(out.Points).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c2ce5f2EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain3(out *jwriter.Writer, in ZoneAttendance) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"zone_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ZoneID))
	}
	{
		const prefix string = ",\"points\":"
		out.RawString(prefix)
		(in.Points).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ZoneAttendance) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7c2ce5f2EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ZoneAttendance) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7c2ce5f2EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ZoneAttendance) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7c2ce5f2DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ZoneAttendance) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7c2ce5f2DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain3(l, v)
}
func easyjson7c2ce5f2DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain4(in *jlexer.Lexer, out *StoresDataQueue) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(StoresDataQueue, 0, 1)
			} else {
				*out = StoresDataQueue{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v7 StoreDataQueue
			(v7).UnmarshalEasyJSON(in)
			*out = append(*out, v7)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c2ce5f2EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain4(out *jwriter.Writer, in StoresDataQueue) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v8, v9 := range in {
			if v8 > 0 {
				out.RawByte(',')
			}
			(v9).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v StoresDataQueue) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7c2ce5f2EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StoresDataQueue) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7c2ce5f2EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StoresDataQueue) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7c2ce5f2DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StoresDataQueue) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7c2ce5f2DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain4(l, v)
}
func easyjson7c2ce5f2DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain5(in *jlexer.Lexer, out *StoresAttendance) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(StoresAttendance, 0, 1)
			} else {
				*out = StoresAttendance{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v10 StoreAttendance
			(v10).UnmarshalEasyJSON(in)
			*out = append(*out, v10)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c2ce5f2EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain5(out *jwriter.Writer, in StoresAttendance) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v11, v12 := range in {
			if v11 > 0 {
				out.RawByte(',')
			}
			(v12).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v StoresAttendance) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7c2ce5f2EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StoresAttendance) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7c2ce5f2EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StoresAttendance) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7c2ce5f2DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StoresAttendance) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7c2ce5f2DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain5(l, v)
}
func easyjson7c2ce5f2DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain6(in *jlexer.Lexer, out *StoreDataQueue) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "store_id":
			out.StoreID = string(in.String())
		case "points":
			(out.Points).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c2ce5f2EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain6(out *jwriter.Writer, in StoreDataQueue) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"store_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.StoreID))
	}
	{
		const prefix string = ",\"points\":"
		out.RawString(prefix)
		(in.Points).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StoreDataQueue) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7c2ce5f2EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StoreDataQueue) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7c2ce5f2EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StoreDataQueue) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7c2ce5f2DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StoreDataQueue) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7c2ce5f2DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain6(l, v)
}
func easyjson7c2ce5f2DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain7(in *jlexer.Lexer, out *StoreAttendance) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "store_id":
			out.StoreID = string(in.String())
		case "points":
			(out.Points).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c2ce5f2EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain7(out *jwriter.Writer, in StoreAttendance) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"store_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.StoreID))
	}
	{
		const prefix string = ",\"points\":"
		out.RawString(prefix)
		(in.Points).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StoreAttendance) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7c2ce5f2EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StoreAttendance) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7c2ce5f2EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StoreAttendance) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7c2ce5f2DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StoreAttendance) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7c2ce5f2DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain7(l, v)
}
func easyjson7c2ce5f2DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain8(in *jlexer.Lexer, out *RentersAttendance) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(RentersAttendance, 0, 1)
			} else {
				*out = RentersAttendance{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v13 RenterAttendance
			(v13).UnmarshalEasyJSON(in)
			*out = append(*out, v13)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c2ce5f2EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain8(out *jwriter.Writer, in RentersAttendance) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v14, v15 := range in {
			if v14 > 0 {
				out.RawByte(',')
			}
			(v15).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v RentersAttendance) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7c2ce5f2EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RentersAttendance) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7c2ce5f2EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RentersAttendance) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7c2ce5f2DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RentersAttendance) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7c2ce5f2DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain8(l, v)
}
func easyjson7c2ce5f2DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain9(in *jlexer.Lexer, out *RenterAttendance) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "renter_id":
			out.RenterID = string(in.String())
		case "points":
			(out.Points).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c2ce5f2EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain9(out *jwriter.Writer, in RenterAttendance) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"renter_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.RenterID))
	}
	{
		const prefix string = ",\"points\":"
		out.RawString(prefix)
		(in.Points).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RenterAttendance) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7c2ce5f2EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RenterAttendance) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7c2ce5f2EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RenterAttendance) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7c2ce5f2DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RenterAttendance) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7c2ce5f2DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain9(l, v)
}
func easyjson7c2ce5f2DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain10(in *jlexer.Lexer, out *QueueDataPoints) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(QueueDataPoints, 0, 1)
			} else {
				*out = QueueDataPoints{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v16 QueueDataPoint
			(v16).UnmarshalEasyJSON(in)
			*out = append(*out, v16)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c2ce5f2EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain10(out *jwriter.Writer, in QueueDataPoints) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v17, v18 := range in {
			if v17 > 0 {
				out.RawByte(',')
			}
			(v18).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v QueueDataPoints) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7c2ce5f2EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v QueueDataPoints) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7c2ce5f2EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *QueueDataPoints) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7c2ce5f2DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *QueueDataPoints) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7c2ce5f2DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain10(l, v)
}
func easyjson7c2ce5f2DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain11(in *jlexer.Lexer, out *QueueDataPoint) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "time":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Time).UnmarshalJSON(data))
			}
		case "value":
			out.Value = int32(in.Int32())
		case "value_total":
			out.ValueTotal = int32(in.Int32())
		case "count_channels":
			out.CountChannels = int(in.Int())
		case "count_channels_verified":
			out.CountChannelsVerified = int(in.Int())
		case "has_verified":
			out.HasVerified = bool(in.Bool())
		case "cash_income_flow":
			out.CashIncomeFlow = int32(in.Int32())
		case "sum_cash_income_flow_by_window":
			out.SumCashIncomeFlowByWindow = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c2ce5f2EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain11(out *jwriter.Writer, in QueueDataPoint) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix[1:])
		out.Raw((in.Time).MarshalJSON())
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		out.Int32(int32(in.Value))
	}
	{
		const prefix string = ",\"value_total\":"
		out.RawString(prefix)
		out.Int32(int32(in.ValueTotal))
	}
	{
		const prefix string = ",\"count_channels\":"
		out.RawString(prefix)
		out.Int(int(in.CountChannels))
	}
	{
		const prefix string = ",\"count_channels_verified\":"
		out.RawString(prefix)
		out.Int(int(in.CountChannelsVerified))
	}
	{
		const prefix string = ",\"has_verified\":"
		out.RawString(prefix)
		out.Bool(bool(in.HasVerified))
	}
	{
		const prefix string = ",\"cash_income_flow\":"
		out.RawString(prefix)
		out.Int32(int32(in.CashIncomeFlow))
	}
	{
		const prefix string = ",\"sum_cash_income_flow_by_window\":"
		out.RawString(prefix)
		out.Int32(int32(in.SumCashIncomeFlowByWindow))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v QueueDataPoint) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7c2ce5f2EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v QueueDataPoint) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7c2ce5f2EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *QueueDataPoint) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7c2ce5f2DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *QueueDataPoint) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7c2ce5f2DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain11(l, v)
}
func easyjson7c2ce5f2DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain12(in *jlexer.Lexer, out *EntrancesAttendance) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(EntrancesAttendance, 0, 1)
			} else {
				*out = EntrancesAttendance{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v19 EntranceAttendance
			(v19).UnmarshalEasyJSON(in)
			*out = append(*out, v19)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c2ce5f2EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain12(out *jwriter.Writer, in EntrancesAttendance) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v20, v21 := range in {
			if v20 > 0 {
				out.RawByte(',')
			}
			(v21).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v EntrancesAttendance) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7c2ce5f2EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EntrancesAttendance) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7c2ce5f2EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EntrancesAttendance) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7c2ce5f2DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EntrancesAttendance) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7c2ce5f2DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain12(l, v)
}
func easyjson7c2ce5f2DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain13(in *jlexer.Lexer, out *EntranceAttendance) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "entrance_id":
			out.EntranceID = string(in.String())
		case "points":
			(out.Points).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c2ce5f2EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain13(out *jwriter.Writer, in EntranceAttendance) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"entrance_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.EntranceID))
	}
	{
		const prefix string = ",\"points\":"
		out.RawString(prefix)
		(in.Points).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EntranceAttendance) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7c2ce5f2EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EntranceAttendance) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7c2ce5f2EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EntranceAttendance) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7c2ce5f2DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EntranceAttendance) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7c2ce5f2DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain13(l, v)
}
func easyjson7c2ce5f2DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain14(in *jlexer.Lexer, out *DelayPoint) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "value":
			out.Value = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c2ce5f2EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain14(out *jwriter.Writer, in DelayPoint) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DelayPoint) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7c2ce5f2EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DelayPoint) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7c2ce5f2EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DelayPoint) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7c2ce5f2DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DelayPoint) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7c2ce5f2DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain14(l, v)
}
func easyjson7c2ce5f2DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain15(in *jlexer.Lexer, out *DatasInside) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(DatasInside, 0, 1)
			} else {
				*out = DatasInside{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v22 DataInside
			(v22).UnmarshalEasyJSON(in)
			*out = append(*out, v22)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c2ce5f2EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain15(out *jwriter.Writer, in DatasInside) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v23, v24 := range in {
			if v23 > 0 {
				out.RawByte(',')
			}
			(v24).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v DatasInside) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7c2ce5f2EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DatasInside) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7c2ce5f2EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DatasInside) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7c2ce5f2DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DatasInside) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7c2ce5f2DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain15(l, v)
}
func easyjson7c2ce5f2DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain16(in *jlexer.Lexer, out *DataPoints) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(DataPoints, 0, 2)
			} else {
				*out = DataPoints{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v25 DataPoint
			(v25).UnmarshalEasyJSON(in)
			*out = append(*out, v25)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c2ce5f2EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain16(out *jwriter.Writer, in DataPoints) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v26, v27 := range in {
			if v26 > 0 {
				out.RawByte(',')
			}
			(v27).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v DataPoints) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7c2ce5f2EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DataPoints) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7c2ce5f2EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DataPoints) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7c2ce5f2DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DataPoints) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7c2ce5f2DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain16(l, v)
}
func easyjson7c2ce5f2DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain17(in *jlexer.Lexer, out *DataPoint) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "time":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Time).UnmarshalJSON(data))
			}
		case "value":
			out.Value = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c2ce5f2EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain17(out *jwriter.Writer, in DataPoint) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix[1:])
		out.Raw((in.Time).MarshalJSON())
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		out.Int32(int32(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DataPoint) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7c2ce5f2EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DataPoint) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7c2ce5f2EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DataPoint) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7c2ce5f2DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DataPoint) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7c2ce5f2DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain17(l, v)
}
func easyjson7c2ce5f2DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain18(in *jlexer.Lexer, out *DataInside) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "zone_id":
			out.ZoneID = string(in.String())
		case "points":
			(out.Points).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c2ce5f2EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain18(out *jwriter.Writer, in DataInside) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"zone_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ZoneID))
	}
	{
		const prefix string = ",\"points\":"
		out.RawString(prefix)
		(in.Points).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DataInside) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7c2ce5f2EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DataInside) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7c2ce5f2EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DataInside) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7c2ce5f2DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DataInside) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7c2ce5f2DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain18(l, v)
}
func easyjson7c2ce5f2DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain19(in *jlexer.Lexer, out *AttendanceDataPoints) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(AttendanceDataPoints, 0, 1)
			} else {
				*out = AttendanceDataPoints{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v28 AttendanceDataPoint
			(v28).UnmarshalEasyJSON(in)
			*out = append(*out, v28)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c2ce5f2EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain19(out *jwriter.Writer, in AttendanceDataPoints) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v29, v30 := range in {
			if v29 > 0 {
				out.RawByte(',')
			}
			(v30).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v AttendanceDataPoints) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7c2ce5f2EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AttendanceDataPoints) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7c2ce5f2EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AttendanceDataPoints) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7c2ce5f2DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AttendanceDataPoints) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7c2ce5f2DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain19(l, v)
}
func easyjson7c2ce5f2DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain20(in *jlexer.Lexer, out *AttendanceDataPoint) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "time_start":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.TimeStart).UnmarshalJSON(data))
			}
		case "time_end":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.TimeEnd).UnmarshalJSON(data))
			}
		case "sum_in":
			out.SumIn = int32(in.Int32())
		case "sum_out":
			out.SumOut = int32(in.Int32())
		case "passing_by":
			out.PassingBy = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7c2ce5f2EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain20(out *jwriter.Writer, in AttendanceDataPoint) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"time_start\":"
		out.RawString(prefix[1:])
		out.Raw((in.TimeStart).MarshalJSON())
	}
	{
		const prefix string = ",\"time_end\":"
		out.RawString(prefix)
		out.Raw((in.TimeEnd).MarshalJSON())
	}
	{
		const prefix string = ",\"sum_in\":"
		out.RawString(prefix)
		out.Int32(int32(in.SumIn))
	}
	{
		const prefix string = ",\"sum_out\":"
		out.RawString(prefix)
		out.Int32(int32(in.SumOut))
	}
	{
		const prefix string = ",\"passing_by\":"
		out.RawString(prefix)
		out.Int32(int32(in.PassingBy))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AttendanceDataPoint) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7c2ce5f2EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AttendanceDataPoint) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7c2ce5f2EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AttendanceDataPoint) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7c2ce5f2DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AttendanceDataPoint) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7c2ce5f2DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain20(l, v)
}

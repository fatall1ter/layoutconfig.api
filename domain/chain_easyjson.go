// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package domain

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonE2758465DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain(in *jlexer.Lexer, out *ChainZone) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "zone_id":
			out.ZoneID = string(in.String())
		case "parent_id":
			if in.IsNull() {
				in.Skip()
				out.ParentID = nil
			} else {
				if out.ParentID == nil {
					out.ParentID = new(string)
				}
				*out.ParentID = string(in.String())
			}
		case "layout_id":
			out.LayoutID = string(in.String())
		case "store_id":
			out.StoreID = string(in.String())
		case "kind":
			out.Kind = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "area":
			out.Area = float64(in.Float64())
		case "options":
			out.Options = string(in.String())
		case "notes":
			out.Notes = string(in.String())
		case "valid_from":
			if in.IsNull() {
				in.Skip()
				out.ValidFrom = nil
			} else {
				if out.ValidFrom == nil {
					out.ValidFrom = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ValidFrom).UnmarshalJSON(data))
				}
			}
		case "valid_to":
			if in.IsNull() {
				in.Skip()
				out.ValidTo = nil
			} else {
				if out.ValidTo == nil {
					out.ValidTo = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ValidTo).UnmarshalJSON(data))
				}
			}
		case "is_active":
			out.IsActive = bool(in.Bool())
		case "creator":
			out.Creator = string(in.String())
		case "created_at":
			if in.IsNull() {
				in.Skip()
				out.CreatedAt = nil
			} else {
				if out.CreatedAt == nil {
					out.CreatedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CreatedAt).UnmarshalJSON(data))
				}
			}
		case "modifier":
			if in.IsNull() {
				in.Skip()
				out.Modifier = nil
			} else {
				if out.Modifier == nil {
					out.Modifier = new(string)
				}
				*out.Modifier = string(in.String())
			}
		case "modified_at":
			if in.IsNull() {
				in.Skip()
				out.ModifiedAt = nil
			} else {
				if out.ModifiedAt == nil {
					out.ModifiedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ModifiedAt).UnmarshalJSON(data))
				}
			}
		case "entrances":
			if in.IsNull() {
				in.Skip()
				out.Entrances = nil
			} else {
				in.Delim('[')
				if out.Entrances == nil {
					if !in.IsDelim(']') {
						out.Entrances = make(ChainEntrances, 0, 0)
					} else {
						out.Entrances = ChainEntrances{}
					}
				} else {
					out.Entrances = (out.Entrances)[:0]
				}
				for !in.IsDelim(']') {
					var v1 ChainEntrance
					(v1).UnmarshalEasyJSON(in)
					out.Entrances = append(out.Entrances, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "sensors":
			if in.IsNull() {
				in.Skip()
				out.Sensors = nil
			} else {
				in.Delim('[')
				if out.Sensors == nil {
					if !in.IsDelim(']') {
						out.Sensors = make(ChainSensors, 0, 0)
					} else {
						out.Sensors = ChainSensors{}
					}
				} else {
					out.Sensors = (out.Sensors)[:0]
				}
				for !in.IsDelim(']') {
					var v2 ChainSensor
					(v2).UnmarshalEasyJSON(in)
					out.Sensors = append(out.Sensors, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE2758465EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain(out *jwriter.Writer, in ChainZone) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ZoneID != "" {
		const prefix string = ",\"zone_id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ZoneID))
	}
	if in.ParentID != nil {
		const prefix string = ",\"parent_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ParentID))
	}
	if in.LayoutID != "" {
		const prefix string = ",\"layout_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LayoutID))
	}
	if in.StoreID != "" {
		const prefix string = ",\"store_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.StoreID))
	}
	if in.Kind != "" {
		const prefix string = ",\"kind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Kind))
	}
	if in.Title != "" {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	if in.Area != 0 {
		const prefix string = ",\"area\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Area))
	}
	if in.Options != "" {
		const prefix string = ",\"options\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Options))
	}
	if in.Notes != "" {
		const prefix string = ",\"notes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Notes))
	}
	if in.ValidFrom != nil {
		const prefix string = ",\"valid_from\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.ValidFrom).MarshalJSON())
	}
	if in.ValidTo != nil {
		const prefix string = ",\"valid_to\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.ValidTo).MarshalJSON())
	}
	{
		const prefix string = ",\"is_active\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsActive))
	}
	if in.Creator != "" {
		const prefix string = ",\"creator\":"
		out.RawString(prefix)
		out.String(string(in.Creator))
	}
	if in.CreatedAt != nil {
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((*in.CreatedAt).MarshalJSON())
	}
	if in.Modifier != nil {
		const prefix string = ",\"modifier\":"
		out.RawString(prefix)
		out.String(string(*in.Modifier))
	}
	if in.ModifiedAt != nil {
		const prefix string = ",\"modified_at\":"
		out.RawString(prefix)
		out.Raw((*in.ModifiedAt).MarshalJSON())
	}
	if len(in.Entrances) != 0 {
		const prefix string = ",\"entrances\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v3, v4 := range in.Entrances {
				if v3 > 0 {
					out.RawByte(',')
				}
				(v4).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Sensors) != 0 {
		const prefix string = ",\"sensors\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v5, v6 := range in.Sensors {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChainZone) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE2758465EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChainZone) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE2758465EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChainZone) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE2758465DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChainZone) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE2758465DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain(l, v)
}
func easyjsonE2758465DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain1(in *jlexer.Lexer, out *ChainStore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "store_id":
			out.StoreID = string(in.String())
		case "layout_id":
			out.LayoutID = string(in.String())
		case "kind":
			out.Kind = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "crm_key":
			out.CRMKey = string(in.String())
		case "brands":
			out.Brands = string(in.String())
		case "statistics":
			out.Statistics = string(in.String())
		case "location_id":
			out.LocationID = string(in.String())
		case "area":
			out.Area = float64(in.Float64())
		case "currency":
			out.Currency = string(in.String())
		case "options":
			out.Options = string(in.String())
		case "notes":
			out.Notes = string(in.String())
		case "valid_from":
			if in.IsNull() {
				in.Skip()
				out.ValidFrom = nil
			} else {
				if out.ValidFrom == nil {
					out.ValidFrom = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ValidFrom).UnmarshalJSON(data))
				}
			}
		case "valid_to":
			if in.IsNull() {
				in.Skip()
				out.ValidTo = nil
			} else {
				if out.ValidTo == nil {
					out.ValidTo = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ValidTo).UnmarshalJSON(data))
				}
			}
		case "is_active":
			out.IsActive = bool(in.Bool())
		case "creator":
			out.Creator = string(in.String())
		case "created_at":
			if in.IsNull() {
				in.Skip()
				out.CreatedAt = nil
			} else {
				if out.CreatedAt == nil {
					out.CreatedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CreatedAt).UnmarshalJSON(data))
				}
			}
		case "modifier":
			if in.IsNull() {
				in.Skip()
				out.Modifier = nil
			} else {
				if out.Modifier == nil {
					out.Modifier = new(string)
				}
				*out.Modifier = string(in.String())
			}
		case "modified_at":
			if in.IsNull() {
				in.Skip()
				out.ModifiedAt = nil
			} else {
				if out.ModifiedAt == nil {
					out.ModifiedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ModifiedAt).UnmarshalJSON(data))
				}
			}
		case "entrances":
			if in.IsNull() {
				in.Skip()
				out.Entrances = nil
			} else {
				in.Delim('[')
				if out.Entrances == nil {
					if !in.IsDelim(']') {
						out.Entrances = make(ChainEntrances, 0, 0)
					} else {
						out.Entrances = ChainEntrances{}
					}
				} else {
					out.Entrances = (out.Entrances)[:0]
				}
				for !in.IsDelim(']') {
					var v7 ChainEntrance
					(v7).UnmarshalEasyJSON(in)
					out.Entrances = append(out.Entrances, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "zones":
			if in.IsNull() {
				in.Skip()
				out.Zones = nil
			} else {
				in.Delim('[')
				if out.Zones == nil {
					if !in.IsDelim(']') {
						out.Zones = make(ChainZones, 0, 0)
					} else {
						out.Zones = ChainZones{}
					}
				} else {
					out.Zones = (out.Zones)[:0]
				}
				for !in.IsDelim(']') {
					var v8 ChainZone
					(v8).UnmarshalEasyJSON(in)
					out.Zones = append(out.Zones, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "devices":
			if in.IsNull() {
				in.Skip()
				out.Devices = nil
			} else {
				in.Delim('[')
				if out.Devices == nil {
					if !in.IsDelim(']') {
						out.Devices = make(ChainDevices, 0, 0)
					} else {
						out.Devices = ChainDevices{}
					}
				} else {
					out.Devices = (out.Devices)[:0]
				}
				for !in.IsDelim(']') {
					var v9 ChainDevice
					(v9).UnmarshalEasyJSON(in)
					out.Devices = append(out.Devices, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE2758465EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain1(out *jwriter.Writer, in ChainStore) {
	out.RawByte('{')
	first := true
	_ = first
	if in.StoreID != "" {
		const prefix string = ",\"store_id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.StoreID))
	}
	if in.LayoutID != "" {
		const prefix string = ",\"layout_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LayoutID))
	}
	if in.Kind != "" {
		const prefix string = ",\"kind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Kind))
	}
	if in.Title != "" {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	if in.CRMKey != "" {
		const prefix string = ",\"crm_key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CRMKey))
	}
	if in.Brands != "" {
		const prefix string = ",\"brands\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Brands))
	}
	if in.Statistics != "" {
		const prefix string = ",\"statistics\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Statistics))
	}
	if in.LocationID != "" {
		const prefix string = ",\"location_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LocationID))
	}
	if in.Area != 0 {
		const prefix string = ",\"area\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Area))
	}
	if in.Currency != "" {
		const prefix string = ",\"currency\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Currency))
	}
	if in.Options != "" {
		const prefix string = ",\"options\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Options))
	}
	if in.Notes != "" {
		const prefix string = ",\"notes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Notes))
	}
	if in.ValidFrom != nil {
		const prefix string = ",\"valid_from\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.ValidFrom).MarshalJSON())
	}
	if in.ValidTo != nil {
		const prefix string = ",\"valid_to\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.ValidTo).MarshalJSON())
	}
	{
		const prefix string = ",\"is_active\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsActive))
	}
	if in.Creator != "" {
		const prefix string = ",\"creator\":"
		out.RawString(prefix)
		out.String(string(in.Creator))
	}
	if in.CreatedAt != nil {
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((*in.CreatedAt).MarshalJSON())
	}
	if in.Modifier != nil {
		const prefix string = ",\"modifier\":"
		out.RawString(prefix)
		out.String(string(*in.Modifier))
	}
	if in.ModifiedAt != nil {
		const prefix string = ",\"modified_at\":"
		out.RawString(prefix)
		out.Raw((*in.ModifiedAt).MarshalJSON())
	}
	if len(in.Entrances) != 0 {
		const prefix string = ",\"entrances\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v10, v11 := range in.Entrances {
				if v10 > 0 {
					out.RawByte(',')
				}
				(v11).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Zones) != 0 {
		const prefix string = ",\"zones\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v12, v13 := range in.Zones {
				if v12 > 0 {
					out.RawByte(',')
				}
				(v13).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Devices) != 0 {
		const prefix string = ",\"devices\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v14, v15 := range in.Devices {
				if v14 > 0 {
					out.RawByte(',')
				}
				(v15).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChainStore) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE2758465EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChainStore) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE2758465EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChainStore) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE2758465DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChainStore) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE2758465DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain1(l, v)
}
func easyjsonE2758465DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain2(in *jlexer.Lexer, out *ChainSensor) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "sensor_id":
			out.SensorID = string(in.String())
		case "device_id":
			out.DeviceID = string(in.String())
		case "layout_id":
			out.LayoutID = string(in.String())
		case "store_id":
			out.StoreID = string(in.String())
		case "external_id":
			out.ExternalID = string(in.String())
		case "kind":
			out.Kind = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "options":
			out.Options = string(in.String())
		case "notes":
			out.Notes = string(in.String())
		case "valid_from":
			if in.IsNull() {
				in.Skip()
				out.ValidFrom = nil
			} else {
				if out.ValidFrom == nil {
					out.ValidFrom = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ValidFrom).UnmarshalJSON(data))
				}
			}
		case "valid_to":
			if in.IsNull() {
				in.Skip()
				out.ValidTo = nil
			} else {
				if out.ValidTo == nil {
					out.ValidTo = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ValidTo).UnmarshalJSON(data))
				}
			}
		case "is_active":
			out.IsActive = bool(in.Bool())
		case "creator":
			out.Creator = string(in.String())
		case "created_at":
			if in.IsNull() {
				in.Skip()
				out.CreatedAt = nil
			} else {
				if out.CreatedAt == nil {
					out.CreatedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CreatedAt).UnmarshalJSON(data))
				}
			}
		case "modifier":
			if in.IsNull() {
				in.Skip()
				out.Modifier = nil
			} else {
				if out.Modifier == nil {
					out.Modifier = new(string)
				}
				*out.Modifier = string(in.String())
			}
		case "modified_at":
			if in.IsNull() {
				in.Skip()
				out.ModifiedAt = nil
			} else {
				if out.ModifiedAt == nil {
					out.ModifiedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ModifiedAt).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE2758465EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain2(out *jwriter.Writer, in ChainSensor) {
	out.RawByte('{')
	first := true
	_ = first
	if in.SensorID != "" {
		const prefix string = ",\"sensor_id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.SensorID))
	}
	if in.DeviceID != "" {
		const prefix string = ",\"device_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DeviceID))
	}
	if in.LayoutID != "" {
		const prefix string = ",\"layout_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LayoutID))
	}
	if in.StoreID != "" {
		const prefix string = ",\"store_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.StoreID))
	}
	if in.ExternalID != "" {
		const prefix string = ",\"external_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ExternalID))
	}
	if in.Kind != "" {
		const prefix string = ",\"kind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Kind))
	}
	if in.Title != "" {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	if in.Options != "" {
		const prefix string = ",\"options\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Options))
	}
	if in.Notes != "" {
		const prefix string = ",\"notes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Notes))
	}
	if in.ValidFrom != nil {
		const prefix string = ",\"valid_from\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.ValidFrom).MarshalJSON())
	}
	if in.ValidTo != nil {
		const prefix string = ",\"valid_to\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.ValidTo).MarshalJSON())
	}
	{
		const prefix string = ",\"is_active\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsActive))
	}
	if in.Creator != "" {
		const prefix string = ",\"creator\":"
		out.RawString(prefix)
		out.String(string(in.Creator))
	}
	if in.CreatedAt != nil {
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((*in.CreatedAt).MarshalJSON())
	}
	if in.Modifier != nil {
		const prefix string = ",\"modifier\":"
		out.RawString(prefix)
		out.String(string(*in.Modifier))
	}
	if in.ModifiedAt != nil {
		const prefix string = ",\"modified_at\":"
		out.RawString(prefix)
		out.Raw((*in.ModifiedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChainSensor) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE2758465EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChainSensor) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE2758465EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChainSensor) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE2758465DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChainSensor) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE2758465DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain2(l, v)
}
func easyjsonE2758465DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain3(in *jlexer.Lexer, out *ChainEntrance) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "entrance_id":
			out.EntranceID = string(in.String())
		case "layout_id":
			out.LayoutID = string(in.String())
		case "store_id":
			out.StoreID = string(in.String())
		case "kind":
			out.Kind = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "options":
			out.Options = string(in.String())
		case "notes":
			out.Notes = string(in.String())
		case "valid_from":
			if in.IsNull() {
				in.Skip()
				out.ValidFrom = nil
			} else {
				if out.ValidFrom == nil {
					out.ValidFrom = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ValidFrom).UnmarshalJSON(data))
				}
			}
		case "valid_to":
			if in.IsNull() {
				in.Skip()
				out.ValidTo = nil
			} else {
				if out.ValidTo == nil {
					out.ValidTo = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ValidTo).UnmarshalJSON(data))
				}
			}
		case "is_active":
			out.IsActive = bool(in.Bool())
		case "creator":
			out.Creator = string(in.String())
		case "created_at":
			if in.IsNull() {
				in.Skip()
				out.CreatedAt = nil
			} else {
				if out.CreatedAt == nil {
					out.CreatedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CreatedAt).UnmarshalJSON(data))
				}
			}
		case "modifier":
			if in.IsNull() {
				in.Skip()
				out.Modifier = nil
			} else {
				if out.Modifier == nil {
					out.Modifier = new(string)
				}
				*out.Modifier = string(in.String())
			}
		case "modified_at":
			if in.IsNull() {
				in.Skip()
				out.ModifiedAt = nil
			} else {
				if out.ModifiedAt == nil {
					out.ModifiedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ModifiedAt).UnmarshalJSON(data))
				}
			}
		case "sensors":
			if in.IsNull() {
				in.Skip()
				out.Sensors = nil
			} else {
				in.Delim('[')
				if out.Sensors == nil {
					if !in.IsDelim(']') {
						out.Sensors = make(ChainSensors, 0, 0)
					} else {
						out.Sensors = ChainSensors{}
					}
				} else {
					out.Sensors = (out.Sensors)[:0]
				}
				for !in.IsDelim(']') {
					var v16 ChainSensor
					(v16).UnmarshalEasyJSON(in)
					out.Sensors = append(out.Sensors, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE2758465EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain3(out *jwriter.Writer, in ChainEntrance) {
	out.RawByte('{')
	first := true
	_ = first
	if in.EntranceID != "" {
		const prefix string = ",\"entrance_id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.EntranceID))
	}
	if in.LayoutID != "" {
		const prefix string = ",\"layout_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LayoutID))
	}
	if in.StoreID != "" {
		const prefix string = ",\"store_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.StoreID))
	}
	if in.Kind != "" {
		const prefix string = ",\"kind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Kind))
	}
	if in.Title != "" {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	if in.Options != "" {
		const prefix string = ",\"options\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Options))
	}
	if in.Notes != "" {
		const prefix string = ",\"notes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Notes))
	}
	if in.ValidFrom != nil {
		const prefix string = ",\"valid_from\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.ValidFrom).MarshalJSON())
	}
	if in.ValidTo != nil {
		const prefix string = ",\"valid_to\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.ValidTo).MarshalJSON())
	}
	{
		const prefix string = ",\"is_active\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsActive))
	}
	if in.Creator != "" {
		const prefix string = ",\"creator\":"
		out.RawString(prefix)
		out.String(string(in.Creator))
	}
	if in.CreatedAt != nil {
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((*in.CreatedAt).MarshalJSON())
	}
	if in.Modifier != nil {
		const prefix string = ",\"modifier\":"
		out.RawString(prefix)
		out.String(string(*in.Modifier))
	}
	if in.ModifiedAt != nil {
		const prefix string = ",\"modified_at\":"
		out.RawString(prefix)
		out.Raw((*in.ModifiedAt).MarshalJSON())
	}
	if len(in.Sensors) != 0 {
		const prefix string = ",\"sensors\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v17, v18 := range in.Sensors {
				if v17 > 0 {
					out.RawByte(',')
				}
				(v18).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChainEntrance) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE2758465EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChainEntrance) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE2758465EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChainEntrance) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE2758465DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChainEntrance) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE2758465DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain3(l, v)
}
func easyjsonE2758465DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain4(in *jlexer.Lexer, out *ChainDevice) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "device_id":
			out.DeviceID = string(in.String())
		case "layout_id":
			out.LayoutID = string(in.String())
		case "store_id":
			out.StoreID = string(in.String())
		case "master_id":
			if in.IsNull() {
				in.Skip()
				out.MasterID = nil
			} else {
				if out.MasterID == nil {
					out.MasterID = new(string)
				}
				*out.MasterID = string(in.String())
			}
		case "kind":
			out.Kind = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "is_active":
			out.IsActive = bool(in.Bool())
		case "ip":
			out.IP = string(in.String())
		case "port":
			out.Port = string(in.String())
		case "sn":
			out.SN = string(in.String())
		case "mode":
			out.Mode = string(in.String())
		case "dcmode":
			out.DCMode = string(in.String())
		case "login":
			out.Login = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "options":
			out.Options = string(in.String())
		case "notes":
			out.Notes = string(in.String())
		case "valid_from":
			if in.IsNull() {
				in.Skip()
				out.ValidFrom = nil
			} else {
				if out.ValidFrom == nil {
					out.ValidFrom = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ValidFrom).UnmarshalJSON(data))
				}
			}
		case "valid_to":
			if in.IsNull() {
				in.Skip()
				out.ValidTo = nil
			} else {
				if out.ValidTo == nil {
					out.ValidTo = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ValidTo).UnmarshalJSON(data))
				}
			}
		case "creator":
			out.Creator = string(in.String())
		case "created_at":
			if in.IsNull() {
				in.Skip()
				out.CreatedAt = nil
			} else {
				if out.CreatedAt == nil {
					out.CreatedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CreatedAt).UnmarshalJSON(data))
				}
			}
		case "modifier":
			if in.IsNull() {
				in.Skip()
				out.Modifier = nil
			} else {
				if out.Modifier == nil {
					out.Modifier = new(string)
				}
				*out.Modifier = string(in.String())
			}
		case "modified_at":
			if in.IsNull() {
				in.Skip()
				out.ModifiedAt = nil
			} else {
				if out.ModifiedAt == nil {
					out.ModifiedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ModifiedAt).UnmarshalJSON(data))
				}
			}
		case "sensors":
			if in.IsNull() {
				in.Skip()
				out.Sensors = nil
			} else {
				in.Delim('[')
				if out.Sensors == nil {
					if !in.IsDelim(']') {
						out.Sensors = make(ChainSensors, 0, 0)
					} else {
						out.Sensors = ChainSensors{}
					}
				} else {
					out.Sensors = (out.Sensors)[:0]
				}
				for !in.IsDelim(']') {
					var v19 ChainSensor
					(v19).UnmarshalEasyJSON(in)
					out.Sensors = append(out.Sensors, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "delay":
			if in.IsNull() {
				in.Skip()
				out.Delay = nil
			} else {
				if out.Delay == nil {
					out.Delay = new(DelayPoint)
				}
				(*out.Delay).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE2758465EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain4(out *jwriter.Writer, in ChainDevice) {
	out.RawByte('{')
	first := true
	_ = first
	if in.DeviceID != "" {
		const prefix string = ",\"device_id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.DeviceID))
	}
	if in.LayoutID != "" {
		const prefix string = ",\"layout_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LayoutID))
	}
	if in.StoreID != "" {
		const prefix string = ",\"store_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.StoreID))
	}
	if in.MasterID != nil {
		const prefix string = ",\"master_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.MasterID))
	}
	if in.Kind != "" {
		const prefix string = ",\"kind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Kind))
	}
	if in.Title != "" {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"is_active\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsActive))
	}
	if in.IP != "" {
		const prefix string = ",\"ip\":"
		out.RawString(prefix)
		out.String(string(in.IP))
	}
	if in.Port != "" {
		const prefix string = ",\"port\":"
		out.RawString(prefix)
		out.String(string(in.Port))
	}
	if in.SN != "" {
		const prefix string = ",\"sn\":"
		out.RawString(prefix)
		out.String(string(in.SN))
	}
	if in.Mode != "" {
		const prefix string = ",\"mode\":"
		out.RawString(prefix)
		out.String(string(in.Mode))
	}
	if in.DCMode != "" {
		const prefix string = ",\"dcmode\":"
		out.RawString(prefix)
		out.String(string(in.DCMode))
	}
	if in.Login != "" {
		const prefix string = ",\"login\":"
		out.RawString(prefix)
		out.String(string(in.Login))
	}
	if in.Password != "" {
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	if in.Options != "" {
		const prefix string = ",\"options\":"
		out.RawString(prefix)
		out.String(string(in.Options))
	}
	if in.Notes != "" {
		const prefix string = ",\"notes\":"
		out.RawString(prefix)
		out.String(string(in.Notes))
	}
	if in.ValidFrom != nil {
		const prefix string = ",\"valid_from\":"
		out.RawString(prefix)
		out.Raw((*in.ValidFrom).MarshalJSON())
	}
	if in.ValidTo != nil {
		const prefix string = ",\"valid_to\":"
		out.RawString(prefix)
		out.Raw((*in.ValidTo).MarshalJSON())
	}
	if in.Creator != "" {
		const prefix string = ",\"creator\":"
		out.RawString(prefix)
		out.String(string(in.Creator))
	}
	if in.CreatedAt != nil {
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((*in.CreatedAt).MarshalJSON())
	}
	if in.Modifier != nil {
		const prefix string = ",\"modifier\":"
		out.RawString(prefix)
		out.String(string(*in.Modifier))
	}
	if in.ModifiedAt != nil {
		const prefix string = ",\"modified_at\":"
		out.RawString(prefix)
		out.Raw((*in.ModifiedAt).MarshalJSON())
	}
	if len(in.Sensors) != 0 {
		const prefix string = ",\"sensors\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v20, v21 := range in.Sensors {
				if v20 > 0 {
					out.RawByte(',')
				}
				(v21).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.Delay != nil {
		const prefix string = ",\"delay\":"
		out.RawString(prefix)
		(*in.Delay).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChainDevice) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE2758465EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChainDevice) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE2758465EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChainDevice) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE2758465DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChainDevice) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE2758465DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain4(l, v)
}
func easyjsonE2758465DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain5(in *jlexer.Lexer, out *Chain) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "layout_id":
			out.LayoutID = string(in.String())
		case "kind":
			out.Kind = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "languages":
			out.Languages = string(in.String())
		case "crm_key":
			out.CRMKey = string(in.String())
		case "brands":
			out.Brands = string(in.String())
		case "currency":
			out.Currency = string(in.String())
		case "options":
			out.Options = string(in.String())
		case "notes":
			out.Notes = string(in.String())
		case "valid_from":
			if in.IsNull() {
				in.Skip()
				out.ValidFrom = nil
			} else {
				if out.ValidFrom == nil {
					out.ValidFrom = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ValidFrom).UnmarshalJSON(data))
				}
			}
		case "valid_to":
			if in.IsNull() {
				in.Skip()
				out.ValidTo = nil
			} else {
				if out.ValidTo == nil {
					out.ValidTo = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ValidTo).UnmarshalJSON(data))
				}
			}
		case "is_active":
			out.IsActive = bool(in.Bool())
		case "creator":
			out.Creator = string(in.String())
		case "created_at":
			if in.IsNull() {
				in.Skip()
				out.CreatedAt = nil
			} else {
				if out.CreatedAt == nil {
					out.CreatedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CreatedAt).UnmarshalJSON(data))
				}
			}
		case "modifier":
			if in.IsNull() {
				in.Skip()
				out.Modifier = nil
			} else {
				if out.Modifier == nil {
					out.Modifier = new(string)
				}
				*out.Modifier = string(in.String())
			}
		case "modified_at":
			if in.IsNull() {
				in.Skip()
				out.ModifiedAt = nil
			} else {
				if out.ModifiedAt == nil {
					out.ModifiedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ModifiedAt).UnmarshalJSON(data))
				}
			}
		case "read_only":
			out.ReadOnly = bool(in.Bool())
		case "stores":
			if in.IsNull() {
				in.Skip()
				out.Stores = nil
			} else {
				in.Delim('[')
				if out.Stores == nil {
					if !in.IsDelim(']') {
						out.Stores = make(ChainStores, 0, 0)
					} else {
						out.Stores = ChainStores{}
					}
				} else {
					out.Stores = (out.Stores)[:0]
				}
				for !in.IsDelim(']') {
					var v22 ChainStore
					(v22).UnmarshalEasyJSON(in)
					out.Stores = append(out.Stores, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE2758465EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain5(out *jwriter.Writer, in Chain) {
	out.RawByte('{')
	first := true
	_ = first
	if in.LayoutID != "" {
		const prefix string = ",\"layout_id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.LayoutID))
	}
	if in.Kind != "" {
		const prefix string = ",\"kind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Kind))
	}
	if in.Title != "" {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	if in.Languages != "" {
		const prefix string = ",\"languages\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Languages))
	}
	if in.CRMKey != "" {
		const prefix string = ",\"crm_key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CRMKey))
	}
	if in.Brands != "" {
		const prefix string = ",\"brands\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Brands))
	}
	if in.Currency != "" {
		const prefix string = ",\"currency\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Currency))
	}
	if in.Options != "" {
		const prefix string = ",\"options\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Options))
	}
	if in.Notes != "" {
		const prefix string = ",\"notes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Notes))
	}
	if in.ValidFrom != nil {
		const prefix string = ",\"valid_from\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.ValidFrom).MarshalJSON())
	}
	if in.ValidTo != nil {
		const prefix string = ",\"valid_to\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.ValidTo).MarshalJSON())
	}
	{
		const prefix string = ",\"is_active\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsActive))
	}
	if in.Creator != "" {
		const prefix string = ",\"creator\":"
		out.RawString(prefix)
		out.String(string(in.Creator))
	}
	if in.CreatedAt != nil {
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((*in.CreatedAt).MarshalJSON())
	}
	if in.Modifier != nil {
		const prefix string = ",\"modifier\":"
		out.RawString(prefix)
		out.String(string(*in.Modifier))
	}
	if in.ModifiedAt != nil {
		const prefix string = ",\"modified_at\":"
		out.RawString(prefix)
		out.Raw((*in.ModifiedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"read_only\":"
		out.RawString(prefix)
		out.Bool(bool(in.ReadOnly))
	}
	if len(in.Stores) != 0 {
		const prefix string = ",\"stores\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v23, v24 := range in.Stores {
				if v23 > 0 {
					out.RawByte(',')
				}
				(v24).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Chain) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE2758465EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Chain) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE2758465EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Chain) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE2758465DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Chain) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE2758465DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain5(l, v)
}
func easyjsonE2758465DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain6(in *jlexer.Lexer, out *BindingChainSensorZone) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "sensor_id":
			out.SensorID = string(in.String())
		case "zone_id":
			out.ZoneID = string(in.String())
		case "kind_zone":
			out.KindZone = string(in.String())
		case "options":
			out.Options = string(in.String())
		case "valid_from":
			if in.IsNull() {
				in.Skip()
				out.ValidFrom = nil
			} else {
				if out.ValidFrom == nil {
					out.ValidFrom = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ValidFrom).UnmarshalJSON(data))
				}
			}
		case "valid_to":
			if in.IsNull() {
				in.Skip()
				out.ValidTo = nil
			} else {
				if out.ValidTo == nil {
					out.ValidTo = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ValidTo).UnmarshalJSON(data))
				}
			}
		case "creator":
			out.Creator = string(in.String())
		case "created_at":
			if in.IsNull() {
				in.Skip()
				out.CreatedAt = nil
			} else {
				if out.CreatedAt == nil {
					out.CreatedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CreatedAt).UnmarshalJSON(data))
				}
			}
		case "modifier":
			if in.IsNull() {
				in.Skip()
				out.Modifier = nil
			} else {
				if out.Modifier == nil {
					out.Modifier = new(string)
				}
				*out.Modifier = string(in.String())
			}
		case "modified_at":
			if in.IsNull() {
				in.Skip()
				out.ModifiedAt = nil
			} else {
				if out.ModifiedAt == nil {
					out.ModifiedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ModifiedAt).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE2758465EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain6(out *jwriter.Writer, in BindingChainSensorZone) {
	out.RawByte('{')
	first := true
	_ = first
	if in.SensorID != "" {
		const prefix string = ",\"sensor_id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.SensorID))
	}
	if in.ZoneID != "" {
		const prefix string = ",\"zone_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ZoneID))
	}
	if in.KindZone != "" {
		const prefix string = ",\"kind_zone\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.KindZone))
	}
	if in.Options != "" {
		const prefix string = ",\"options\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Options))
	}
	if in.ValidFrom != nil {
		const prefix string = ",\"valid_from\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.ValidFrom).MarshalJSON())
	}
	if in.ValidTo != nil {
		const prefix string = ",\"valid_to\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.ValidTo).MarshalJSON())
	}
	if in.Creator != "" {
		const prefix string = ",\"creator\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Creator))
	}
	if in.CreatedAt != nil {
		const prefix string = ",\"created_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.CreatedAt).MarshalJSON())
	}
	if in.Modifier != nil {
		const prefix string = ",\"modifier\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Modifier))
	}
	if in.ModifiedAt != nil {
		const prefix string = ",\"modified_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.ModifiedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BindingChainSensorZone) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE2758465EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BindingChainSensorZone) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE2758465EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BindingChainSensorZone) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE2758465DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BindingChainSensorZone) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE2758465DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain6(l, v)
}
func easyjsonE2758465DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain7(in *jlexer.Lexer, out *BindingChainSensorEntrance) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "sensor_id":
			out.SensorID = string(in.String())
		case "entrance_id":
			out.EntranceID = string(in.String())
		case "kind_entrance":
			out.KindEntrance = string(in.String())
		case "direction":
			out.Direction = string(in.String())
		case "k_in":
			out.KIn = float64(in.Float64())
		case "k_out":
			out.KOut = float64(in.Float64())
		case "options":
			out.Options = string(in.String())
		case "valid_from":
			if in.IsNull() {
				in.Skip()
				out.ValidFrom = nil
			} else {
				if out.ValidFrom == nil {
					out.ValidFrom = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ValidFrom).UnmarshalJSON(data))
				}
			}
		case "valid_to":
			if in.IsNull() {
				in.Skip()
				out.ValidTo = nil
			} else {
				if out.ValidTo == nil {
					out.ValidTo = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ValidTo).UnmarshalJSON(data))
				}
			}
		case "creator":
			out.Creator = string(in.String())
		case "created_at":
			if in.IsNull() {
				in.Skip()
				out.CreatedAt = nil
			} else {
				if out.CreatedAt == nil {
					out.CreatedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CreatedAt).UnmarshalJSON(data))
				}
			}
		case "modifier":
			if in.IsNull() {
				in.Skip()
				out.Modifier = nil
			} else {
				if out.Modifier == nil {
					out.Modifier = new(string)
				}
				*out.Modifier = string(in.String())
			}
		case "modified_at":
			if in.IsNull() {
				in.Skip()
				out.ModifiedAt = nil
			} else {
				if out.ModifiedAt == nil {
					out.ModifiedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ModifiedAt).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE2758465EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain7(out *jwriter.Writer, in BindingChainSensorEntrance) {
	out.RawByte('{')
	first := true
	_ = first
	if in.SensorID != "" {
		const prefix string = ",\"sensor_id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.SensorID))
	}
	if in.EntranceID != "" {
		const prefix string = ",\"entrance_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.EntranceID))
	}
	if in.KindEntrance != "" {
		const prefix string = ",\"kind_entrance\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.KindEntrance))
	}
	if in.Direction != "" {
		const prefix string = ",\"direction\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Direction))
	}
	if in.KIn != 0 {
		const prefix string = ",\"k_in\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.KIn))
	}
	if in.KOut != 0 {
		const prefix string = ",\"k_out\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.KOut))
	}
	if in.Options != "" {
		const prefix string = ",\"options\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Options))
	}
	if in.ValidFrom != nil {
		const prefix string = ",\"valid_from\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.ValidFrom).MarshalJSON())
	}
	if in.ValidTo != nil {
		const prefix string = ",\"valid_to\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.ValidTo).MarshalJSON())
	}
	if in.Creator != "" {
		const prefix string = ",\"creator\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Creator))
	}
	if in.CreatedAt != nil {
		const prefix string = ",\"created_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.CreatedAt).MarshalJSON())
	}
	if in.Modifier != nil {
		const prefix string = ",\"modifier\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Modifier))
	}
	if in.ModifiedAt != nil {
		const prefix string = ",\"modified_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.ModifiedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BindingChainSensorEntrance) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE2758465EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BindingChainSensorEntrance) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE2758465EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BindingChainSensorEntrance) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE2758465DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BindingChainSensorEntrance) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE2758465DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain7(l, v)
}
func easyjsonE2758465DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain8(in *jlexer.Lexer, out *BindingChainEntranceZone) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "entrance_id":
			out.EntranceID = string(in.String())
		case "zone_id":
			out.ZoneID = string(in.String())
		case "kind_zone":
			out.KindZone = string(in.String())
		case "direction":
			out.Direction = string(in.String())
		case "options":
			out.Options = string(in.String())
		case "valid_from":
			if in.IsNull() {
				in.Skip()
				out.ValidFrom = nil
			} else {
				if out.ValidFrom == nil {
					out.ValidFrom = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ValidFrom).UnmarshalJSON(data))
				}
			}
		case "valid_to":
			if in.IsNull() {
				in.Skip()
				out.ValidTo = nil
			} else {
				if out.ValidTo == nil {
					out.ValidTo = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ValidTo).UnmarshalJSON(data))
				}
			}
		case "creator":
			out.Creator = string(in.String())
		case "created_at":
			if in.IsNull() {
				in.Skip()
				out.CreatedAt = nil
			} else {
				if out.CreatedAt == nil {
					out.CreatedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CreatedAt).UnmarshalJSON(data))
				}
			}
		case "modifier":
			if in.IsNull() {
				in.Skip()
				out.Modifier = nil
			} else {
				if out.Modifier == nil {
					out.Modifier = new(string)
				}
				*out.Modifier = string(in.String())
			}
		case "modified_at":
			if in.IsNull() {
				in.Skip()
				out.ModifiedAt = nil
			} else {
				if out.ModifiedAt == nil {
					out.ModifiedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ModifiedAt).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE2758465EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain8(out *jwriter.Writer, in BindingChainEntranceZone) {
	out.RawByte('{')
	first := true
	_ = first
	if in.EntranceID != "" {
		const prefix string = ",\"entrance_id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.EntranceID))
	}
	if in.ZoneID != "" {
		const prefix string = ",\"zone_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ZoneID))
	}
	if in.KindZone != "" {
		const prefix string = ",\"kind_zone\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.KindZone))
	}
	if in.Direction != "" {
		const prefix string = ",\"direction\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Direction))
	}
	if in.Options != "" {
		const prefix string = ",\"options\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Options))
	}
	if in.ValidFrom != nil {
		const prefix string = ",\"valid_from\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.ValidFrom).MarshalJSON())
	}
	if in.ValidTo != nil {
		const prefix string = ",\"valid_to\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.ValidTo).MarshalJSON())
	}
	if in.Creator != "" {
		const prefix string = ",\"creator\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Creator))
	}
	if in.CreatedAt != nil {
		const prefix string = ",\"created_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.CreatedAt).MarshalJSON())
	}
	if in.Modifier != nil {
		const prefix string = ",\"modifier\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Modifier))
	}
	if in.ModifiedAt != nil {
		const prefix string = ",\"modified_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.ModifiedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BindingChainEntranceZone) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE2758465EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BindingChainEntranceZone) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE2758465EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BindingChainEntranceZone) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE2758465DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BindingChainEntranceZone) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE2758465DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain8(l, v)
}
func easyjsonE2758465DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain9(in *jlexer.Lexer, out *BindingChainEntranceStore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "entrance_id":
			out.EntranceID = string(in.String())
		case "store_id":
			out.StoreID = string(in.String())
		case "kind_store":
			out.KindStore = string(in.String())
		case "direction":
			out.Direction = string(in.String())
		case "options":
			out.Options = string(in.String())
		case "valid_from":
			if in.IsNull() {
				in.Skip()
				out.ValidFrom = nil
			} else {
				if out.ValidFrom == nil {
					out.ValidFrom = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ValidFrom).UnmarshalJSON(data))
				}
			}
		case "valid_to":
			if in.IsNull() {
				in.Skip()
				out.ValidTo = nil
			} else {
				if out.ValidTo == nil {
					out.ValidTo = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ValidTo).UnmarshalJSON(data))
				}
			}
		case "creator":
			out.Creator = string(in.String())
		case "created_at":
			if in.IsNull() {
				in.Skip()
				out.CreatedAt = nil
			} else {
				if out.CreatedAt == nil {
					out.CreatedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CreatedAt).UnmarshalJSON(data))
				}
			}
		case "modifier":
			if in.IsNull() {
				in.Skip()
				out.Modifier = nil
			} else {
				if out.Modifier == nil {
					out.Modifier = new(string)
				}
				*out.Modifier = string(in.String())
			}
		case "modified_at":
			if in.IsNull() {
				in.Skip()
				out.ModifiedAt = nil
			} else {
				if out.ModifiedAt == nil {
					out.ModifiedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ModifiedAt).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE2758465EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain9(out *jwriter.Writer, in BindingChainEntranceStore) {
	out.RawByte('{')
	first := true
	_ = first
	if in.EntranceID != "" {
		const prefix string = ",\"entrance_id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.EntranceID))
	}
	if in.StoreID != "" {
		const prefix string = ",\"store_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.StoreID))
	}
	if in.KindStore != "" {
		const prefix string = ",\"kind_store\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.KindStore))
	}
	if in.Direction != "" {
		const prefix string = ",\"direction\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Direction))
	}
	if in.Options != "" {
		const prefix string = ",\"options\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Options))
	}
	if in.ValidFrom != nil {
		const prefix string = ",\"valid_from\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.ValidFrom).MarshalJSON())
	}
	if in.ValidTo != nil {
		const prefix string = ",\"valid_to\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.ValidTo).MarshalJSON())
	}
	if in.Creator != "" {
		const prefix string = ",\"creator\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Creator))
	}
	if in.CreatedAt != nil {
		const prefix string = ",\"created_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.CreatedAt).MarshalJSON())
	}
	if in.Modifier != nil {
		const prefix string = ",\"modifier\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Modifier))
	}
	if in.ModifiedAt != nil {
		const prefix string = ",\"modified_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.ModifiedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BindingChainEntranceStore) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE2758465EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BindingChainEntranceStore) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE2758465EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BindingChainEntranceStore) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE2758465DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BindingChainEntranceStore) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE2758465DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain9(l, v)
}

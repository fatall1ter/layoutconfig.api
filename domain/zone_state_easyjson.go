// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package domain

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonF0227db4DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain(in *jlexer.Lexer, out *ZoneStates) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(ZoneStates, 0, 0)
			} else {
				*out = ZoneStates{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 ZoneState
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF0227db4EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain(out *jwriter.Writer, in ZoneStates) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v ZoneStates) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF0227db4EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ZoneStates) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF0227db4EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ZoneStates) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF0227db4DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ZoneStates) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF0227db4DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain(l, v)
}
func easyjsonF0227db4DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain1(in *jlexer.Lexer, out *ZoneState) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "zone_id":
			out.ZoneID = string(in.String())
		case "store_id":
			out.StoreID = string(in.String())
		case "layout_id":
			out.LayoutID = string(in.String())
		case "state":
			out.State = string(in.String())
		case "valid_from":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ValidFrom).UnmarshalJSON(data))
			}
		case "valid_to":
			if in.IsNull() {
				in.Skip()
				out.ValidTo = nil
			} else {
				if out.ValidTo == nil {
					out.ValidTo = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ValidTo).UnmarshalJSON(data))
				}
			}
		case "creator":
			out.Creator = string(in.String())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "modifier":
			if in.IsNull() {
				in.Skip()
				out.Modifier = nil
			} else {
				if out.Modifier == nil {
					out.Modifier = new(string)
				}
				*out.Modifier = string(in.String())
			}
		case "modified_at":
			if in.IsNull() {
				in.Skip()
				out.ModifiedAt = nil
			} else {
				if out.ModifiedAt == nil {
					out.ModifiedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ModifiedAt).UnmarshalJSON(data))
				}
			}
		case "comment":
			out.Comment = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF0227db4EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain1(out *jwriter.Writer, in ZoneState) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"zone_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ZoneID))
	}
	if in.StoreID != "" {
		const prefix string = ",\"store_id\":"
		out.RawString(prefix)
		out.String(string(in.StoreID))
	}
	if in.LayoutID != "" {
		const prefix string = ",\"layout_id\":"
		out.RawString(prefix)
		out.String(string(in.LayoutID))
	}
	if in.State != "" {
		const prefix string = ",\"state\":"
		out.RawString(prefix)
		out.String(string(in.State))
	}
	if true {
		const prefix string = ",\"valid_from\":"
		out.RawString(prefix)
		out.Raw((in.ValidFrom).MarshalJSON())
	}
	if in.ValidTo != nil {
		const prefix string = ",\"valid_to\":"
		out.RawString(prefix)
		out.Raw((*in.ValidTo).MarshalJSON())
	}
	if in.Creator != "" {
		const prefix string = ",\"creator\":"
		out.RawString(prefix)
		out.String(string(in.Creator))
	}
	if true {
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	if in.Modifier != nil {
		const prefix string = ",\"modifier\":"
		out.RawString(prefix)
		out.String(string(*in.Modifier))
	}
	if in.ModifiedAt != nil {
		const prefix string = ",\"modified_at\":"
		out.RawString(prefix)
		out.Raw((*in.ModifiedAt).MarshalJSON())
	}
	if in.Comment != "" {
		const prefix string = ",\"comment\":"
		out.RawString(prefix)
		out.String(string(in.Comment))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ZoneState) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF0227db4EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ZoneState) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF0227db4EncodeGitCountmaxRuCountmaxLayoutconfigApiDomain1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ZoneState) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF0227db4DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ZoneState) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF0227db4DecodeGitCountmaxRuCountmaxLayoutconfigApiDomain1(l, v)
}

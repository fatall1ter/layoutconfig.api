// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package domain

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonF642ad3eDecodeGitCountmaxRuCountmaxLayoutconfigApiDomain(in *jlexer.Lexer, out *Source) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "kind":
			out.Kind = string(in.String())
		case "params":
			if in.IsNull() {
				in.Skip()
				out.Params = nil
			} else {
				in.Delim('[')
				if out.Params == nil {
					if !in.IsDelim(']') {
						out.Params = make([]Param, 0, 2)
					} else {
						out.Params = []Param{}
					}
				} else {
					out.Params = (out.Params)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Param
					(v1).UnmarshalEasyJSON(in)
					out.Params = append(out.Params, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGitCountmaxRuCountmaxLayoutconfigApiDomain(out *jwriter.Writer, in Source) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"kind\":"
		out.RawString(prefix[1:])
		out.String(string(in.Kind))
	}
	{
		const prefix string = ",\"params\":"
		out.RawString(prefix)
		if in.Params == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Params {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Source) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF642ad3eEncodeGitCountmaxRuCountmaxLayoutconfigApiDomain(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Source) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF642ad3eEncodeGitCountmaxRuCountmaxLayoutconfigApiDomain(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Source) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF642ad3eDecodeGitCountmaxRuCountmaxLayoutconfigApiDomain(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Source) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF642ad3eDecodeGitCountmaxRuCountmaxLayoutconfigApiDomain(l, v)
}
func easyjsonF642ad3eDecodeGitCountmaxRuCountmaxLayoutconfigApiDomain1(in *jlexer.Lexer, out *Param) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "value":
			out.Value = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGitCountmaxRuCountmaxLayoutconfigApiDomain1(out *jwriter.Writer, in Param) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		out.String(string(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Param) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF642ad3eEncodeGitCountmaxRuCountmaxLayoutconfigApiDomain1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Param) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF642ad3eEncodeGitCountmaxRuCountmaxLayoutconfigApiDomain1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Param) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF642ad3eDecodeGitCountmaxRuCountmaxLayoutconfigApiDomain1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Param) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF642ad3eDecodeGitCountmaxRuCountmaxLayoutconfigApiDomain1(l, v)
}
func easyjsonF642ad3eDecodeGitCountmaxRuCountmaxLayoutconfigApiDomain2(in *jlexer.Lexer, out *Events) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Events, 0, 0)
			} else {
				*out = Events{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v4 Event
			(v4).UnmarshalEasyJSON(in)
			*out = append(*out, v4)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGitCountmaxRuCountmaxLayoutconfigApiDomain2(out *jwriter.Writer, in Events) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v5, v6 := range in {
			if v5 > 0 {
				out.RawByte(',')
			}
			(v6).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v Events) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF642ad3eEncodeGitCountmaxRuCountmaxLayoutconfigApiDomain2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Events) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF642ad3eEncodeGitCountmaxRuCountmaxLayoutconfigApiDomain2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Events) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF642ad3eDecodeGitCountmaxRuCountmaxLayoutconfigApiDomain2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Events) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF642ad3eDecodeGitCountmaxRuCountmaxLayoutconfigApiDomain2(l, v)
}
func easyjsonF642ad3eDecodeGitCountmaxRuCountmaxLayoutconfigApiDomain3(in *jlexer.Lexer, out *Event) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "key":
			out.Key = string(in.String())
		case "event_time":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.EventTime).UnmarshalJSON(data))
			}
		case "kind":
			out.Kind = string(in.String())
		case "message":
			out.Message = string(in.String())
		case "severity":
			out.Severity = string(in.String())
		case "layout_id":
			out.LayoutID = string(in.String())
		case "store_id":
			out.StoreID = string(in.String())
		case "source":
			if in.IsNull() {
				in.Skip()
				out.Source = nil
			} else {
				if out.Source == nil {
					out.Source = new(Source)
				}
				(*out.Source).UnmarshalEasyJSON(in)
			}
		case "creator":
			out.Creator = string(in.String())
		case "created_at":
			if in.IsNull() {
				in.Skip()
				out.CreatedAt = nil
			} else {
				if out.CreatedAt == nil {
					out.CreatedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CreatedAt).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF642ad3eEncodeGitCountmaxRuCountmaxLayoutconfigApiDomain3(out *jwriter.Writer, in Event) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.Key != "" {
		const prefix string = ",\"key\":"
		out.RawString(prefix)
		out.String(string(in.Key))
	}
	{
		const prefix string = ",\"event_time\":"
		out.RawString(prefix)
		out.Raw((in.EventTime).MarshalJSON())
	}
	if in.Kind != "" {
		const prefix string = ",\"kind\":"
		out.RawString(prefix)
		out.String(string(in.Kind))
	}
	if in.Message != "" {
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	if in.Severity != "" {
		const prefix string = ",\"severity\":"
		out.RawString(prefix)
		out.String(string(in.Severity))
	}
	if in.LayoutID != "" {
		const prefix string = ",\"layout_id\":"
		out.RawString(prefix)
		out.String(string(in.LayoutID))
	}
	if in.StoreID != "" {
		const prefix string = ",\"store_id\":"
		out.RawString(prefix)
		out.String(string(in.StoreID))
	}
	if in.Source != nil {
		const prefix string = ",\"source\":"
		out.RawString(prefix)
		(*in.Source).MarshalEasyJSON(out)
	}
	if in.Creator != "" {
		const prefix string = ",\"creator\":"
		out.RawString(prefix)
		out.String(string(in.Creator))
	}
	if in.CreatedAt != nil {
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((*in.CreatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Event) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF642ad3eEncodeGitCountmaxRuCountmaxLayoutconfigApiDomain3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Event) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF642ad3eEncodeGitCountmaxRuCountmaxLayoutconfigApiDomain3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Event) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF642ad3eDecodeGitCountmaxRuCountmaxLayoutconfigApiDomain3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Event) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF642ad3eDecodeGitCountmaxRuCountmaxLayoutconfigApiDomain3(l, v)
}

definitions:
  domain.AttendanceDataPoint:
    properties:
      passing_by:
        type: integer
      sum_in:
        type: integer
      sum_out:
        type: integer
      time_end:
        type: string
      time_start:
        type: string
    type: object
  domain.AttendanceDataPoints:
    items:
      $ref: '#/definitions/domain.AttendanceDataPoint'
    type: array
  domain.Behavior:
    properties:
      Close:
        type: string
      Open:
        type: string
      behavior_config:
        $ref: '#/definitions/domain.BehaviorConfig'
        type: object
      time_zone:
        type: string
    type: object
  domain.BehaviorConfig:
    properties:
      queue:
        $ref: '#/definitions/domain.Queue'
        type: object
      queue_thresholds:
        $ref: '#/definitions/domain.QueueThresholds'
        type: object
      recommendations:
        $ref: '#/definitions/domain.Recommendations'
        type: object
    type: object
  domain.Behaviors:
    items:
      $ref: '#/definitions/domain.Behavior'
    type: array
  domain.BindingChainEntranceStore:
    properties:
      created_at:
        type: string
      creator:
        type: string
      direction:
        type: string
      entrance_id:
        type: string
      kind_store:
        type: string
      modified_at:
        type: string
      modifier:
        type: string
      options:
        type: string
      store_id:
        type: string
      valid_from:
        type: string
      valid_to:
        type: string
    type: object
  domain.BindingChainEntranceZone:
    properties:
      created_at:
        type: string
      creator:
        type: string
      direction:
        type: string
      entrance_id:
        type: string
      kind_zone:
        type: string
      modified_at:
        type: string
      modifier:
        type: string
      options:
        type: string
      valid_from:
        type: string
      valid_to:
        type: string
      zone_id:
        type: string
    type: object
  domain.BindingChainSensorEntrance:
    properties:
      created_at:
        type: string
      creator:
        type: string
      direction:
        type: string
      entrance_id:
        type: string
      k_in:
        type: number
      k_out:
        type: number
      kind_entrance:
        type: string
      modified_at:
        type: string
      modifier:
        type: string
      options:
        type: string
      sensor_id:
        type: string
      valid_from:
        type: string
      valid_to:
        type: string
    type: object
  domain.BindingChainSensorZone:
    properties:
      created_at:
        type: string
      creator:
        type: string
      kind_zone:
        type: string
      modified_at:
        type: string
      modifier:
        type: string
      options:
        type: string
      sensor_id:
        type: string
      valid_from:
        type: string
      valid_to:
        type: string
      zone_id:
        type: string
    type: object
  domain.BindingEntranceZone:
    properties:
      created_at:
        type: string
      creator:
        type: string
      direction:
        type: string
      entrance_id:
        type: string
      entrance_name:
        type: string
      kind_zone:
        type: string
      modified_at:
        type: string
      modifier:
        type: string
      options:
        type: string
      valid_from:
        type: string
      valid_to:
        type: string
      zone_id:
        type: string
    type: object
  domain.BindingsChainSensorZone:
    items:
      $ref: '#/definitions/domain.BindingChainSensorZone'
    type: array
  domain.BindingsEntranceZone:
    items:
      $ref: '#/definitions/domain.BindingEntranceZone'
    type: array
  domain.BlocksServiceChannel:
    properties:
      block_service_channels_id:
        type: string
      sequence_length:
        type: integer
      threshold:
        type: number
      title:
        type: string
    type: object
  domain.CRMCustomer:
    properties:
      id:
        type: string
      title:
        type: string
    type: object
  domain.Chain:
    properties:
      brands:
        type: string
      created_at:
        type: string
      creator:
        type: string
      crm_key:
        type: string
      currency:
        type: string
      is_active:
        type: boolean
      kind:
        type: string
      languages:
        type: string
      layout_id:
        type: string
      modified_at:
        type: string
      modifier:
        type: string
      notes:
        type: string
      options:
        type: string
      read_only:
        type: boolean
      stores:
        $ref: '#/definitions/domain.ChainStores'
        type: object
      title:
        type: string
      valid_from:
        type: string
      valid_to:
        type: string
    type: object
  domain.ChainDevice:
    properties:
      created_at:
        type: string
      creator:
        type: string
      dcmode:
        description: |-
          DCMode data collector mode: active - device transmit data to server;
          passive - server request data from device
        type: string
      delay:
        $ref: '#/definitions/domain.DelayPoint'
        type: object
      device_id:
        type: string
      ip:
        type: string
      is_active:
        type: boolean
      kind:
        type: string
      layout_id:
        type: string
      login:
        type: string
      master_id:
        type: string
      mode:
        description: 'Mode: single/master/slave'
        type: string
      modified_at:
        type: string
      modifier:
        type: string
      notes:
        type: string
      options:
        type: string
      password:
        type: string
      port:
        type: string
      sensors:
        $ref: '#/definitions/domain.ChainSensors'
        type: object
      sn:
        type: string
      store_id:
        type: string
      title:
        type: string
      valid_from:
        type: string
      valid_to:
        type: string
    type: object
  domain.ChainDevices:
    items:
      $ref: '#/definitions/domain.ChainDevice'
    type: array
  domain.ChainEntrance:
    properties:
      created_at:
        type: string
      creator:
        type: string
      entrance_id:
        type: string
      is_active:
        type: boolean
      kind:
        type: string
      layout_id:
        type: string
      modified_at:
        type: string
      modifier:
        type: string
      notes:
        type: string
      options:
        type: string
      sensors:
        $ref: '#/definitions/domain.ChainSensors'
        type: object
      store_id:
        type: string
      title:
        type: string
      valid_from:
        type: string
      valid_to:
        type: string
    type: object
  domain.ChainEntrances:
    items:
      $ref: '#/definitions/domain.ChainEntrance'
    type: array
  domain.ChainSensor:
    properties:
      created_at:
        type: string
      creator:
        type: string
      device_id:
        type: string
      external_id:
        type: string
      is_active:
        type: boolean
      kind:
        type: string
      layout_id:
        type: string
      modified_at:
        type: string
      modifier:
        type: string
      notes:
        type: string
      options:
        type: string
      sensor_id:
        type: string
      store_id:
        type: string
      title:
        type: string
      valid_from:
        type: string
      valid_to:
        type: string
    type: object
  domain.ChainSensors:
    items:
      $ref: '#/definitions/domain.ChainSensor'
    type: array
  domain.ChainStore:
    properties:
      area:
        type: number
      brands:
        type: string
      created_at:
        type: string
      creator:
        type: string
      crm_key:
        type: string
      currency:
        type: string
      devices:
        $ref: '#/definitions/domain.ChainDevices'
        type: object
      entrances:
        $ref: '#/definitions/domain.ChainEntrances'
        type: object
      is_active:
        type: boolean
      kind:
        type: string
      layout_id:
        type: string
      location_id:
        type: string
      modified_at:
        type: string
      modifier:
        type: string
      notes:
        type: string
      options:
        type: string
      statistics:
        type: string
      store_id:
        type: string
      title:
        type: string
      valid_from:
        type: string
      valid_to:
        type: string
      zones:
        $ref: '#/definitions/domain.ChainZones'
        type: object
    type: object
  domain.ChainStores:
    items:
      $ref: '#/definitions/domain.ChainStore'
    type: array
  domain.ChainZone:
    properties:
      area:
        type: number
        x-order: "6"
      created_at:
        type: string
        x-order: "12"
      creator:
        type: string
        x-order: "11"
      entrances:
        $ref: '#/definitions/domain.ChainEntrances'
        type: object
      is_active:
        type: boolean
      kind:
        type: string
        x-order: "4"
      layout_id:
        type: string
        x-order: "2"
      modified_at:
        type: string
        x-order: "14"
      modifier:
        type: string
        x-order: "13"
      notes:
        type: string
        x-order: "8"
      options:
        type: string
        x-order: "7"
      parent_id:
        type: string
        x-order: "1"
      sensors:
        $ref: '#/definitions/domain.ChainSensors'
        type: object
      store_id:
        type: string
        x-order: "3"
      title:
        type: string
        x-order: "5"
      valid_from:
        type: string
        x-order: "9"
      valid_to:
        type: string
        x-order: "10"
      zone_id:
        type: string
        x-order: "0"
    type: object
  domain.ChainZones:
    items:
      $ref: '#/definitions/domain.ChainZone'
    type: array
  domain.Chains:
    items:
      $ref: '#/definitions/domain.Chain'
    type: array
  domain.DataInside:
    properties:
      points:
        $ref: '#/definitions/domain.DataPoints'
        type: object
      zone_id:
        type: string
    type: object
  domain.DataPoint:
    properties:
      time:
        type: string
      value:
        type: integer
    type: object
  domain.DataPoints:
    items:
      $ref: '#/definitions/domain.DataPoint'
    type: array
  domain.DatasInside:
    items:
      $ref: '#/definitions/domain.DataInside'
    type: array
  domain.DelayPoint:
    properties:
      value:
        type: integer
    type: object
  domain.DevConfig:
    properties:
      sensors:
        $ref: '#/definitions/domain.DevSensors'
        type: object
      sn:
        type: string
    type: object
  domain.DevSensor:
    properties:
      id:
        type: string
      kind:
        type: string
    type: object
  domain.DevSensors:
    items:
      $ref: '#/definitions/domain.DevSensor'
    type: array
  domain.Entities:
    items:
      $ref: '#/definitions/domain.Entity'
    type: array
  domain.Entity:
    properties:
      entity_key:
        type: string
      kind:
        type: string
      notes:
        type: string
      options:
        type: string
      parent_key:
        type: string
      title:
        type: string
    type: object
  domain.EntranceAttendance:
    properties:
      entrance_id:
        type: string
      points:
        $ref: '#/definitions/domain.AttendanceDataPoints'
        type: object
    type: object
  domain.EntrancesAttendance:
    items:
      $ref: '#/definitions/domain.EntranceAttendance'
    type: array
  domain.Event:
    properties:
      created_at:
        type: string
      creator:
        type: string
      event_time:
        type: string
      id:
        type: string
      key:
        type: string
      kind:
        type: string
      layout_id:
        type: string
      message:
        type: string
      severity:
        type: string
      source:
        $ref: '#/definitions/domain.Source'
        type: object
      store_id:
        type: string
    type: object
  domain.Events:
    items:
      $ref: '#/definitions/domain.Event'
    type: array
  domain.Index:
    properties:
      kind:
        type: string
      op:
        type: string
      weight:
        type: integer
    type: object
  domain.Layout:
    properties:
      id:
        type: string
      is_active:
        type: boolean
      kind:
        type: string
      owner:
        $ref: '#/definitions/domain.CRMCustomer'
        type: object
      title:
        type: string
    type: object
  domain.LayoutInfo:
    properties:
      layout_id:
        type: string
      params:
        items:
          $ref: '#/definitions/domain.Param'
        type: array
    type: object
  domain.LayoutServiceChannel:
    properties:
      indexes:
        items:
          $ref: '#/definitions/domain.Index'
        type: array
    type: object
  domain.Layouts:
    items:
      $ref: '#/definitions/domain.Layout'
    type: array
  domain.ListQueueLength:
    items:
      type: number
    type: array
  domain.Mall:
    properties:
      created_at:
        type: string
      creator:
        type: string
      crm_key:
        type: string
      is_active:
        type: boolean
      kind:
        type: string
      languages:
        type: string
      layout_id:
        type: string
      modified_at:
        type: string
      modifier:
        type: string
      notes:
        type: string
      options:
        type: string
      read_only:
        type: boolean
      title:
        type: string
      valid_from:
        type: string
      valid_to:
        type: string
    type: object
  domain.MallDevice:
    properties:
      created_at:
        type: string
      creator:
        type: string
      dcmode:
        description: |-
          DCMode data collector mode: active - device transmit data to server;
          passive - server request data from device
        type: string
      delay:
        $ref: '#/definitions/domain.DelayPoint'
        type: object
      device_id:
        type: string
      floor_id:
        type: string
      ip:
        type: string
      is_active:
        type: boolean
      kind:
        type: string
      layout_id:
        type: string
      login:
        type: string
      master_id:
        type: string
      mode:
        description: 'Mode: single/master/slave'
        type: string
      modified_at:
        type: string
      modifier:
        type: string
      notes:
        type: string
      options:
        type: string
      password:
        type: string
      port:
        type: string
      sensors:
        $ref: '#/definitions/domain.MallSensors'
        type: object
      sn:
        type: string
      title:
        type: string
      valid_from:
        type: string
      valid_to:
        type: string
    type: object
  domain.MallDevices:
    items:
      $ref: '#/definitions/domain.MallDevice'
    type: array
  domain.MallEntrance:
    properties:
      created_at:
        type: string
      creator:
        type: string
      entrance_id:
        type: string
      floor_id:
        type: string
      is_active:
        type: boolean
      kind:
        type: string
      layout_id:
        type: string
      modified_at:
        type: string
      modifier:
        type: string
      notes:
        type: string
      options:
        type: string
      sensors:
        $ref: '#/definitions/domain.MallSensors'
        type: object
      title:
        type: string
      valid_from:
        type: string
      valid_to:
        type: string
    type: object
  domain.MallEntrances:
    items:
      $ref: '#/definitions/domain.MallEntrance'
    type: array
  domain.MallSensor:
    properties:
      created_at:
        type: string
      creator:
        type: string
      device_id:
        type: string
      external_id:
        type: string
      is_active:
        type: boolean
      kind:
        type: string
      layout_id:
        type: string
      modified_at:
        type: string
      modifier:
        type: string
      notes:
        type: string
      options:
        type: string
      sensor_id:
        type: string
      title:
        type: string
      valid_from:
        type: string
      valid_to:
        type: string
    type: object
  domain.MallSensors:
    items:
      $ref: '#/definitions/domain.MallSensor'
    type: array
  domain.MallZone:
    properties:
      area:
        type: number
      created_at:
        type: string
      creator:
        type: string
      entrances:
        $ref: '#/definitions/domain.BindingsEntranceZone'
        type: object
      is_active:
        type: boolean
      kind:
        type: string
      layout_id:
        type: string
      modified_at:
        type: string
      modifier:
        type: string
      notes:
        type: string
      options:
        type: string
      parent_id:
        type: string
      sensors:
        $ref: '#/definitions/domain.MallSensors'
        type: object
      title:
        type: string
      valid_from:
        type: string
      valid_to:
        type: string
      zone_id:
        type: string
    type: object
  domain.MallZones:
    items:
      $ref: '#/definitions/domain.MallZone'
    type: array
  domain.Malls:
    items:
      $ref: '#/definitions/domain.Mall'
    type: array
  domain.Param:
    properties:
      name:
        type: string
      value:
        type: string
    type: object
  domain.ParamScreenUpd:
    properties:
      device_id:
        type: string
      screenshot_status:
        type: string
      screenshot_time:
        type: string
    type: object
  domain.ParamsScreenUpd:
    items:
      $ref: '#/definitions/domain.ParamScreenUpd'
    type: array
  domain.PredictionDataPoint:
    properties:
      cash_income_flow:
        type: number
      cash_income_sum:
        type: number
      prediction_queue_length:
        type: number
      queue_length:
        $ref: '#/definitions/domain.ListQueueLength'
        type: object
      recommended_checkouts_number:
        type: integer
      time:
        type: string
      total_customer_count:
        type: number
    type: object
  domain.PredictionDataPoints:
    items:
      $ref: '#/definitions/domain.PredictionDataPoint'
    type: array
  domain.PredictionQueue:
    properties:
      points:
        $ref: '#/definitions/domain.PredictionDataPoints'
        type: object
      store_id:
        type: string
    type: object
  domain.PredictionsQueue:
    items:
      $ref: '#/definitions/domain.PredictionQueue'
    type: array
  domain.QTLayout:
    properties:
      layout_id:
        type: string
      sequence_length:
        type: integer
      threshold:
        type: number
      title:
        type: string
    type: object
  domain.QTStore:
    properties:
      sequence_length:
        type: integer
      store_id:
        type: string
      threshold:
        type: number
      title:
        type: string
    type: object
  domain.Queue:
    properties:
      layouts:
        items:
          $ref: '#/definitions/domain.QueueLayout'
        type: array
      service_channels:
        items:
          $ref: '#/definitions/domain.ServiceChannelElement'
        type: array
      stores:
        items:
          $ref: '#/definitions/domain.QueueStore'
        type: array
    type: object
  domain.QueueDataPoint:
    properties:
      cash_income_flow:
        description: how many "people" income to queue from prev interval
        type: integer
      count_channels:
        description: number of service channels in the online mode at measurement
          moment
        type: integer
      count_channels_verified:
        description: verified number of service channels in the online mode at measurement
          moment
        type: integer
      has_verified:
        description: flag existsing verified number of service channels
        type: boolean
      sum_cash_income_flow_by_window:
        description: summa of the income flow values by window interval
        type: integer
      time:
        description: datetime of measurement
        type: string
      value:
        description: count of people in the queue total (include service channels
          only in the online mode)
        type: integer
      value_total:
        description: count of people in the queue total (include service channels
          in the offline and online mode)
        type: integer
    type: object
  domain.QueueDataPoints:
    items:
      $ref: '#/definitions/domain.QueueDataPoint'
    type: array
  domain.QueueLayout:
    properties:
      layout_id:
        type: string
      service_channel:
        $ref: '#/definitions/domain.LayoutServiceChannel'
        type: object
      threshold:
        type: number
      title:
        type: string
    type: object
  domain.QueueStore:
    properties:
      service_channel:
        $ref: '#/definitions/domain.LayoutServiceChannel'
        type: object
      store_id:
        type: string
      threshold:
        type: number
      title:
        type: string
    type: object
  domain.QueueThresholds:
    properties:
      blocks_service_channels:
        items:
          $ref: '#/definitions/domain.BlocksServiceChannel'
        type: array
      layouts:
        items:
          $ref: '#/definitions/domain.QTLayout'
        type: array
      stores:
        items:
          $ref: '#/definitions/domain.QTStore'
        type: array
    type: object
  domain.Recommendations:
    properties:
      layouts:
        items:
          $ref: '#/definitions/domain.RecommendationsLayout'
        type: array
      stores:
        items:
          $ref: '#/definitions/domain.Store'
        type: array
    type: object
  domain.RecommendationsLayout:
    properties:
      checkout_productivity:
        type: number
      hist_minutes:
        type: integer
      layout_id:
        type: string
      pred_minutes:
        type: integer
      queue_multiplier:
        type: number
      std_coef:
        type: number
      title:
        type: string
    type: object
  domain.Renter:
    properties:
      category_id:
        type: string
      contract:
        type: string
      created_at:
        type: string
      creator:
        type: string
      is_active:
        type: boolean
      layout_id:
        type: string
      modified_at:
        type: string
      modifier:
        type: string
      notes:
        type: string
      options:
        type: string
      price_segment_id:
        type: string
      renter_id:
        type: string
      time_close:
        type: string
      time_open:
        type: string
      title:
        type: string
      valid_from:
        type: string
      valid_to:
        type: string
      zones:
        $ref: '#/definitions/domain.MallZones'
        type: object
    type: object
  domain.RenterAttendance:
    properties:
      points:
        $ref: '#/definitions/domain.AttendanceDataPoints'
        type: object
      renter_id:
        type: string
    type: object
  domain.Renters:
    items:
      $ref: '#/definitions/domain.Renter'
    type: array
  domain.RentersAttendance:
    items:
      $ref: '#/definitions/domain.RenterAttendance'
    type: array
  domain.Report:
    properties:
      extension:
        type: string
      files_count:
        type: integer
      id:
        type: string
      layout_id:
        type: string
      subscribers:
        items:
          type: string
        type: array
      template_kind:
        type: string
      title:
        type: string
    type: object
  domain.ReportFile:
    properties:
      content:
        items:
          type: integer
        type: array
      created_at:
        type: string
      file_id:
        type: string
      mime_type:
        type: string
      name:
        type: string
      sent_at:
        type: string
      size:
        type: integer
    type: object
  domain.ReportFiles:
    items:
      $ref: '#/definitions/domain.ReportFile'
    type: array
  domain.Reports:
    items:
      $ref: '#/definitions/domain.Report'
    type: array
  domain.Screenshot:
    properties:
      created_at:
        description: timestamptz not null default current_timestamp, -- дата-время
          создания записи
        type: string
      creator:
        description: varchar(128) not null default current_user, -- пользователь,
          создавший запись
        type: string
      device_id:
        description: text not null, -- идентификатор устройства, с которого получен
          скриншот
        type: string
      layout_id:
        description: text null, -- идентификатор схемы размещения, которой принадлежит
          устройство с которого получен скриншот
        type: string
      layout_info:
        $ref: '#/definitions/domain.LayoutInfo'
        description: jsonb not null default '{}'::jsonb, -- более детальная проектная
          информация устройства
        type: object
      notes:
        description: text null, -- заметки
        type: string
      screenshot_status:
        description: 'статус скриншота: new-по умолчанию, processed-блокировка от
          изменений другими пользователями (не более 1 минуты), to_delete-помечен
          для удаления, archived-запись для вечного хранения'
        type: string
      screenshot_time:
        description: stamptz not null, -- дата-время создания скриншота
        type: string
      store_id:
        description: text not null, -- идентификатор магазина, в котором находилось
          устройство с которого получен скриншот
        type: string
      url:
        description: text not null, -- адрес местонахождения скриншота
        type: string
      url_aliases:
        description: api layer only, alt links to screenshots
        items:
          type: string
        type: array
    type: object
  domain.Screenshots:
    items:
      $ref: '#/definitions/domain.Screenshot'
    type: array
  domain.ServiceChannelElement:
    properties:
      service_channel:
        $ref: '#/definitions/domain.LayoutServiceChannel'
        type: object
      service_channel_id:
        type: string
      threshold:
        type: number
      title:
        type: string
    type: object
  domain.Source:
    properties:
      kind:
        type: string
      params:
        items:
          $ref: '#/definitions/domain.Param'
        type: array
    type: object
  domain.Store:
    properties:
      checkout_productivity:
        type: number
      hist_minutes:
        type: integer
      pred_minutes:
        type: integer
      queue_multiplier:
        type: number
      std_coef:
        type: number
      store_id:
        type: string
      title:
        type: string
    type: object
  domain.StoreAttendance:
    properties:
      points:
        $ref: '#/definitions/domain.AttendanceDataPoints'
        type: object
      store_id:
        type: string
    type: object
  domain.StoreDataQueue:
    properties:
      points:
        $ref: '#/definitions/domain.QueueDataPoints'
        type: object
      store_id:
        type: string
    type: object
  domain.StoresAttendance:
    items:
      $ref: '#/definitions/domain.StoreAttendance'
    type: array
  domain.StoresDataQueue:
    items:
      $ref: '#/definitions/domain.StoreDataQueue'
    type: array
  domain.Track:
    properties:
      comment:
        type: string
      created_at:
        type: string
      creator:
        type: string
      customer_id:
        type: string
      device_id:
        type: string
      h:
        type: number
      layout_id:
        type: string
      store_id:
        type: string
      track_time:
        type: string
      x:
        type: number
      "y":
        type: number
    type: object
  domain.Tracks:
    items:
      $ref: '#/definitions/domain.Track'
    type: array
  domain.ZoneAttendance:
    properties:
      points:
        $ref: '#/definitions/domain.AttendanceDataPoints'
        type: object
      zone_id:
        type: string
    type: object
  domain.ZoneDataEvaluation:
    properties:
      comment:
        type: string
      is_full:
        type: boolean
      layout_id:
        type: string
      record_time:
        type: string
      service_channel_block_id:
        type: string
      store_id:
        type: string
    type: object
  domain.ZoneDataEvaluations:
    items:
      $ref: '#/definitions/domain.ZoneDataEvaluation'
    type: array
  domain.ZoneDataQueue:
    properties:
      points:
        $ref: '#/definitions/domain.QueueDataPoints'
        type: object
      zone_id:
        type: string
    type: object
  domain.ZoneState:
    properties:
      comment:
        type: string
      created_at:
        type: string
      creator:
        type: string
      layout_id:
        type: string
      modified_at:
        type: string
      modifier:
        type: string
      state:
        type: string
      store_id:
        type: string
      valid_from:
        type: string
      valid_to:
        type: string
      zone_id:
        type: string
    type: object
  domain.ZoneStates:
    items:
      $ref: '#/definitions/domain.ZoneState'
    type: array
  domain.ZonesAttendance:
    items:
      $ref: '#/definitions/domain.ZoneAttendance'
    type: array
  domain.ZonesDataQueue:
    items:
      $ref: '#/definitions/domain.ZoneDataQueue'
    type: array
  infra.BehaviorsResponse:
    properties:
      data:
        $ref: '#/definitions/domain.Behaviors'
        type: object
      result_set:
        $ref: '#/definitions/infra.ResultSet'
        type: object
    type: object
  infra.ChainBindSensorZoneResponse:
    properties:
      data:
        $ref: '#/definitions/domain.BindingsChainSensorZone'
        type: object
      result_set:
        $ref: '#/definitions/infra.ResultSet'
        type: object
    type: object
  infra.ChainDeviceTracksResponse:
    properties:
      data:
        $ref: '#/definitions/domain.Tracks'
        type: object
      result_set:
        $ref: '#/definitions/infra.ResultSet'
        type: object
    type: object
  infra.ChainDevicesResponse:
    properties:
      data:
        $ref: '#/definitions/domain.ChainDevices'
        type: object
      result_set:
        $ref: '#/definitions/infra.ResultSet'
        type: object
    type: object
  infra.ChainEntrancesResponse:
    properties:
      data:
        $ref: '#/definitions/domain.ChainEntrances'
        type: object
      result_set:
        $ref: '#/definitions/infra.ResultSet'
        type: object
    type: object
  infra.ChainEventsResponse:
    properties:
      data:
        $ref: '#/definitions/domain.Events'
        type: object
      result_set:
        $ref: '#/definitions/infra.ResultSet'
        type: object
    type: object
  infra.ChainSensorsResponse:
    properties:
      data:
        $ref: '#/definitions/domain.ChainSensors'
        type: object
      result_set:
        $ref: '#/definitions/infra.ResultSet'
        type: object
    type: object
  infra.ChainStoresResponse:
    properties:
      data:
        $ref: '#/definitions/domain.ChainStores'
        type: object
      result_set:
        $ref: '#/definitions/infra.ResultSet'
        type: object
    type: object
  infra.ChainZonesResponse:
    properties:
      data:
        $ref: '#/definitions/domain.ChainZones'
        type: object
      result_set:
        $ref: '#/definitions/infra.ResultSet'
        type: object
    type: object
  infra.ChainZonesStatesResponse:
    properties:
      data:
        $ref: '#/definitions/domain.ZoneStates'
        type: object
      result_set:
        $ref: '#/definitions/infra.ResultSet'
        type: object
    type: object
  infra.ChainsResponse:
    properties:
      data:
        $ref: '#/definitions/domain.Chains'
        type: object
      result_set:
        $ref: '#/definitions/infra.ResultSet'
        type: object
    type: object
  infra.EntitiesResponse:
    properties:
      data:
        $ref: '#/definitions/domain.Entities'
        type: object
      result_set:
        $ref: '#/definitions/infra.ResultSet'
        type: object
    type: object
  infra.ErrResponse:
    properties:
      code:
        description: application-specific error code
        type: integer
      error:
        description: application-level error message, for debugging
        type: string
      status:
        description: user-level status message
        type: string
    type: object
  infra.HTTPError:
    properties:
      message:
        type: object
    type: object
  infra.LayoutResponse:
    properties:
      data:
        $ref: '#/definitions/domain.Layouts'
        type: object
      result_set:
        $ref: '#/definitions/infra.ResultSet'
        type: object
    type: object
  infra.MallDevicesResponse:
    properties:
      data:
        $ref: '#/definitions/domain.MallDevices'
        type: object
      result_set:
        $ref: '#/definitions/infra.ResultSet'
        type: object
    type: object
  infra.MallEntrancesResponse:
    properties:
      data:
        $ref: '#/definitions/domain.MallEntrances'
        type: object
      result_set:
        $ref: '#/definitions/infra.ResultSet'
        type: object
    type: object
  infra.MallZonesResponse:
    properties:
      data:
        $ref: '#/definitions/domain.MallZones'
        type: object
      result_set:
        $ref: '#/definitions/infra.ResultSet'
        type: object
    type: object
  infra.MallsResponse:
    properties:
      data:
        $ref: '#/definitions/domain.Malls'
        type: object
      result_set:
        $ref: '#/definitions/infra.ResultSet'
        type: object
    type: object
  infra.NewChain:
    properties:
      brands:
        type: string
      creator:
        type: string
      crm_key:
        type: string
      currency:
        type: string
      kind:
        type: string
      languages:
        type: string
      notes:
        type: string
      options:
        type: string
      read_only:
        type: boolean
      title:
        type: string
      valid_from:
        type: string
      valid_to:
        type: string
    type: object
  infra.NewChainDevice:
    properties:
      creator:
        type: string
      dcmode:
        description: 'DCMode data collector mode: active - device transmit data to
          server; passive - server request data from device'
        type: string
      ip:
        type: string
      is_active:
        type: boolean
      kind:
        type: string
      layout_id:
        type: string
      login:
        type: string
      master_id:
        type: string
      mode:
        description: 'Mode of people-counting: single/master/slave'
        type: string
      notes:
        type: string
      options:
        type: string
      password:
        type: string
      port:
        type: string
      sn:
        type: string
      store_id:
        type: string
      title:
        type: string
      valid_from:
        type: string
      valid_to:
        type: string
    type: object
  infra.NewChainEntrance:
    properties:
      creator:
        type: string
      kind:
        type: string
      layout_id:
        type: string
      notes:
        type: string
      options:
        type: string
      store_id:
        type: string
      title:
        type: string
      valid_from:
        type: string
      valid_to:
        type: string
    type: object
  infra.NewChainSensor:
    properties:
      creator:
        type: string
      device_id:
        type: string
      external_id:
        type: string
      kind:
        type: string
      layout_id:
        type: string
      notes:
        type: string
      options:
        type: string
      store_id:
        type: string
      title:
        type: string
      valid_from:
        type: string
      valid_to:
        type: string
    type: object
  infra.NewChainStore:
    properties:
      area:
        type: number
      brands:
        type: string
      creator:
        type: string
      crm_key:
        type: string
      currency:
        type: string
      kind:
        type: string
      layout_id:
        type: string
      location_id:
        type: string
      notes:
        type: string
      options:
        type: string
      title:
        type: string
      valid_from:
        type: string
      valid_to:
        type: string
    type: object
  infra.NewChainZone:
    properties:
      creator:
        type: string
      kind:
        type: string
      layout_id:
        type: string
      notes:
        type: string
      options:
        type: string
      parent_id:
        type: string
      store_id:
        type: string
      title:
        type: string
      valid_from:
        type: string
      valid_to:
        type: string
    type: object
  infra.RentersResponse:
    properties:
      data:
        $ref: '#/definitions/domain.Renters'
        type: object
      result_set:
        $ref: '#/definitions/infra.ResultSet'
        type: object
    type: object
  infra.ReportFilesResponse:
    properties:
      data:
        $ref: '#/definitions/domain.ReportFiles'
        type: object
      result_set:
        $ref: '#/definitions/infra.ResultSet'
        type: object
    type: object
  infra.ResultSet:
    properties:
      count:
        type: integer
      limit:
        type: integer
      offset:
        type: integer
      total:
        type: integer
    type: object
  infra.ScreenshotsResponse:
    properties:
      data:
        $ref: '#/definitions/domain.Screenshots'
        type: object
      result_set:
        $ref: '#/definitions/infra.ResultSet'
        type: object
    type: object
  infra.SuccessResponse:
    properties:
      httpcode:
        description: http response status code
        type: integer
      message:
        description: text of message
        type: string
      status:
        description: user-level status message
        type: string
    type: object
  infra.UpdBindingChainEntranceStore:
    properties:
      direction:
        type: string
      entrance_id:
        type: string
      new_store_id:
        type: string
      no_history:
        type: boolean
      old_store_id:
        type: string
      options:
        type: string
      valid_from:
        type: string
    type: object
  infra.UpdBindingChainEntranceZone:
    properties:
      direction:
        type: string
      entrance_id:
        type: string
      new_zone_id:
        type: string
      no_history:
        type: boolean
      old_zone_id:
        type: string
      options:
        type: string
      valid_from:
        type: string
    type: object
  infra.UpdBindingChainSensorEntrance:
    properties:
      direction:
        type: string
      k_in:
        type: number
      k_out:
        type: number
      modifier:
        type: string
      new_entrance_id:
        type: string
      no_history:
        type: boolean
      old_entrance_id:
        type: string
      options:
        type: string
      sensor_id:
        type: string
      valid_from:
        type: string
    type: object
  infra.UpdBindingChainSensorZone:
    properties:
      new_zone_id:
        type: string
      no_history:
        type: boolean
      old_zone_id:
        type: string
      options:
        type: string
      sensor_id:
        type: string
      valid_from:
        type: string
    type: object
  infra.UpdChain:
    properties:
      brands:
        type: string
      creator:
        type: string
      crm_key:
        type: string
      currency:
        type: string
      languages:
        type: string
      layout_id:
        type: string
      no_history:
        type: boolean
      notes:
        type: string
      options:
        type: string
      title:
        type: string
      valid_from:
        type: string
      valid_to:
        type: string
    type: object
  infra.UpdChainDevice:
    properties:
      dcmode:
        description: 'DCMode data collector mode: active - device transmit data to
          server; passive - server request data from device'
        type: string
      device_id:
        type: string
      ip:
        type: string
      is_active:
        type: boolean
      kind:
        type: string
      login:
        type: string
      master_id:
        type: string
      mode:
        description: 'Mode of people-counting: single/master/slave'
        type: string
      no_history:
        type: boolean
      notes:
        type: string
      options:
        type: string
      password:
        type: string
      port:
        type: string
      sn:
        type: string
      title:
        type: string
      valid_from:
        type: string
    type: object
  infra.UpdChainEntrance:
    properties:
      entrance_id:
        type: string
      kind:
        type: string
      no_history:
        type: boolean
      notes:
        type: string
      options:
        type: string
      title:
        type: string
      valid_from:
        type: string
    type: object
  infra.UpdChainSensor:
    properties:
      external_id:
        type: string
      kind:
        type: string
      no_history:
        type: boolean
      notes:
        type: string
      options:
        type: string
      sensor_id:
        type: string
      title:
        type: string
      valid_from:
        type: string
    type: object
  infra.UpdChainStore:
    properties:
      area:
        type: number
      brands:
        type: string
      crm_key:
        type: string
      currency:
        type: string
      layout_id:
        type: string
      location_id:
        type: string
      no_history:
        type: boolean
      notes:
        type: string
      options:
        type: string
      store_id:
        type: string
      title:
        type: string
      valid_from:
        type: string
    type: object
  infra.UpdChainZone:
    properties:
      kind:
        type: string
      no_history:
        type: boolean
      notes:
        type: string
      options:
        type: string
      parent_id:
        type: string
      title:
        type: string
      valid_from:
        type: string
      zone_id:
        type: string
    type: object
  infra.Version:
    properties:
      api_version:
        type: string
      build:
        type: string
      db_version:
        type: string
      git_hash:
        type: string
      version:
        type: string
    type: object
  reference.RefCategories:
    items:
      $ref: '#/definitions/reference.RefCategory'
    type: array
  reference.RefCategory:
    properties:
      id:
        type: string
      kind:
        type: string
      title:
        type: string
    type: object
  reference.RefPrice:
    properties:
      id:
        type: string
      kind:
        type: string
      title:
        type: string
    type: object
  reference.RefPrices:
    items:
      $ref: '#/definitions/reference.RefPrice'
    type: array
info:
  contact:
    email: 1020@watcom.ru
    name: API Support
    url: https://helpdesk.watcom.ru
  description: |-
    This is a general service for interacting with layout configuration.
    Общий сервис для взаимодействия с конфигурацией схем размещения.
  license: {}
  title: LayoutConfig API
  version: 2.0/1.1.21
paths:
  /health:
    get:
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/infra.SuccessResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Healthcheck service eq repository connected
      tags:
      - health
  /v2/chains:
    get:
      description: |-
        get slice of chains with loc (location), date, offset, limit, fields, include parameters
        layout_id (recommended parameter), if not pass datasource may be not correct
        fields - comma separated values of field names, can be layout_id,kind,title,languages... all of them described at the model
        include - comma separated list of entities, embedded in current, for chain it can be stores
      parameters:
      - description: default=*
        in: query
        name: layout_id
        type: string
      - description: default=0
        in: query
        name: offset
        type: integer
      - description: default=20
        in: query
        name: limit
        type: integer
      - description: default=ru
        in: query
        name: loc
        type: string
      - description: ISO8601 YYYY-MM-DD, default=today
        in: query
        name: date
        type: string
      - description: layout_id,title...default=all
        in: query
        name: fields
        type: string
      - description: stores default=none
        in: query
        name: include
        type: string
      produces:
      - application/json
      - text/xml
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/infra.ChainsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Get all chains in the retail schema
      tags:
      - chains
    post:
      consumes:
      - application/json
      description: |-
        create new chain in the retail schema
        layout_id (recommended parameter), if not pass datasource may be not correct
        example new chain:
        {
        "brands": "{\\"ru\\":[\\"Брэнд1\\",\\"Брэнд2\\"], \\"en\\":[\\"Brand1\\",\\"Brand2\\"]}",
        "creator": "username of creator",
        "crm_key": "code 1C",
        "currency": "rub/usd/eur...",
        "kind": "chain",
        "languages": "[\\"ru\\",\\"en\\"]",
        "notes": "{\\"ru\\":\\"описание/комментарии на русском языке\\",\\"en\\":\\"Comments/notes in English\\"}",
        "options": "{}",
        "read_only": false,
        "title": "{\\"ru\\":\\"Наименование сети на русском языке\\",\\"en\\":\\"Chain name in English\\"}",
        "valid_from": "2020-04-01T00:00:00+03:00"
        }
        valid_to можно указать когда заранее известна дата изменения состояния сети и ее атрибутов
      parameters:
      - description: default=*
        in: query
        name: layout_id
        type: string
      - description: chain properties
        in: body
        name: chain
        required: true
        schema:
          $ref: '#/definitions/infra.NewChain'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/infra.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Create new chain in the retail schema
      tags:
      - chains
    put:
      consumes:
      - application/json
      description: |-
        updates a chain with upd_chain parameter
        layout_id (recommended parameter), if not pass datasource may be not correct
        no_history can be true/false; if true = without save history, if false = save history of changes
        valid_from set if need save history for specified date
        example upd_chain:
        {
        "layout_id": "970195a2-e722-4222-94b9-c5266d37b1b8",
        "crm_key": "code 1C",
        "notes": "{\\"ru\\":\\"описание/комментарии на русском языке\\",\\"en\\":\\"Comments/notes in English\\"}",
        "title": "{\\"ru\\":\\"Новое наименование сети на русском языке\\",\\"en\\":\\"New chain name in English\\"}",
        "valid_from": "2020-06-19T00:00:00+03:00",
        "no_history":false
        }
      parameters:
      - description: uuid format, default=*
        in: path
        name: layout_id
        required: true
        type: string
      - description: chain properties
        in: body
        name: chain
        required: true
        schema:
          $ref: '#/definitions/infra.UpdChain'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/infra.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Update exists chain in the retail schema
      tags:
      - chains
  /v2/chains/{layout_id}:
    delete:
      description: delete chain by layout_id parameter
      parameters:
      - description: uuid format, default=*
        in: path
        name: layout_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/infra.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Delete specified chain in the retail schema
      tags:
      - chains
    get:
      description: |-
        get chain with loc(ation), date, layout_id, fields, include parameters
        layout_id (recommended parameter), if not pass datasource may be not correct
        fields - comma separated values of field names, can be layout_id,kind,title,languages...
        include - comma separated list of entities, embedded in current, for chain it can be stores
      parameters:
      - description: uuid format
        in: path
        name: layout_id
        required: true
        type: string
      - description: default=ru
        in: query
        name: loc
        type: string
      - description: ISO8601 YYYY-MM-DD date
        in: query
        name: date
        type: string
      - description: layout_id,title...default=all
        in: query
        name: fields
        type: string
      - description: stores default=none
        in: query
        name: include
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Chain'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Get specified chain in the retail schema
      tags:
      - chains
  /v2/chains/devices:
    get:
      description: |-
        get slice of devices with loc, date, layout_id, store_id, kind, is_active, dc_mode, mode, sn, offset, limit, fields parameters
        layout_id (recommended parameter), if not pass datasource may be not correct
        fields - comma separated values of field names, can be device_id,layout_id,store_id,master_id,kind,title... all of them described at the model
        include - comma separated list of entities, embedded in current, for devices it can be sensors,delay
      parameters:
      - description: default=*
        in: query
        name: layout_id
        type: string
      - description: default=*
        in: query
        name: store_id
        type: string
      - description: default=*
        in: query
        name: kind
        type: string
      - description: default=*
        in: query
        name: is_active
        type: string
      - description: default=*
        in: query
        name: dc_mode
        type: string
      - description: default=*
        in: query
        name: mode
        type: string
      - description: default=*
        in: query
        name: sn
        type: string
      - description: default=ru
        in: query
        name: loc
        type: string
      - description: ISO8601 YYYY-MM-DD date
        in: query
        name: date
        type: string
      - description: default=0
        in: query
        name: offset
        type: integer
      - description: default=20
        in: query
        name: limit
        type: integer
      - description: device_id,kind,title... default=all
        in: query
        name: fields
        type: string
      - description: sensors,delay default=none
        in: query
        name: include
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/infra.ChainDevicesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Get all chains devices in the retail schema
      tags:
      - chains/devices
    post:
      consumes:
      - application/json
      description: |-
        create new device in the retail schema
        example new device, layout_id and store_id must exists in the database:
        {
        "creator": "username",
        "dcmode": "active",
        "ip": "98.99.100.101",
        "is_active": true,
        "kind": "device.3dv",
        "layout_id": "8056fa1e-b63e-4d37-b014-744c4246621b",
        "login": "admin",
        "mode": "single",
        "notes": "{\\"ru\\":\\"описание/комментарии на русском языке\\",\\"en\\":\\"Comments/notes in English\\"}",
        "options": "{\\"localIP\\":\\"192.168.0.10\\", \\"localPort\\": 80}",
        "password": "passW0rd",
        "port": "8080",
        "sn": "00:00:00:00:11:22",
        "store_id": "29587d9a-05d3-4d2c-a974-f2c11fcb30fa",
        "title": "{\\"ru\\":\\"Наименование Устройства на русском языке\\",\\"en\\":\\"Device name in English\\"}",
        "valid_from": "2020-04-01T00:00:00+03:00"
        }
      parameters:
      - description: device properties
        in: body
        name: device
        required: true
        schema:
          $ref: '#/definitions/infra.NewChainDevice'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/infra.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Create new device in the retail schema
      tags:
      - chains/devices
    put:
      consumes:
      - application/json
      description: |-
        update exists device in the retail schema
        valid_from set if need save history for specified date
        layout_id (recommended parameter), if not pass datasource may be not correct
        example upd device, device_id must to be pass in parameters:
        {
        "device_id": "8056fa1e-b63e-4d37-b014-744c4246621b",
        "dcmode": "active",
        "ip": "98.99.100.101",
        "is_active": true,
        "kind": "device.3dv",
        "login": "admin",
        "mode": "single",
        "notes": "{\\"ru\\":\\"описание/комментарии на русском языке\\",\\"en\\":\\"Comments/notes in English\\"}",
        "options": "{\\"localIP\\":\\"192.168.0.10\\", \\"localPort\\": 80}",
        "password": "passW0rd",
        "port": "8080",
        "sn": "00:00:00:00:11:22",
        "title": "{\\"ru\\":\\"Наименование Устройства на русском языке\\",\\"en\\":\\"Device name in English\\"}",
        "valid_from": "2020-04-01T00:00:00+03:00",
        "no_history":true
        }
      parameters:
      - description: default=*
        in: query
        name: layout_id
        type: string
      - description: device properties
        in: body
        name: device
        required: true
        schema:
          $ref: '#/definitions/infra.UpdChainDevice'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/infra.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Update device in the retail schema
      tags:
      - chains/devices
  /v2/chains/devices/{device_id}:
    delete:
      description: |-
        delete specified device in the retail schema by device_id parameter
        layout_id (recommended parameter), if not pass datasource may be not correct
      parameters:
      - description: default=*
        in: query
        name: layout_id
        type: string
      - description: uuid format
        in: path
        name: device_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/infra.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Delete specified device in the retail schema
      tags:
      - chains/devices
    get:
      description: |-
        get device with loc, date, device_id, fields parameters from retail schema
        layout_id (recommended parameter), if not pass datasource may be not correct
        fields - comma separated values of field names, can be device_id,layout_id...
        all of them described at the model
        include - comma separated list of entities, embedded in current, for devices it can be sensors
      parameters:
      - description: default=*
        in: query
        name: layout_id
        type: string
      - description: uuid format
        in: path
        name: device_id
        required: true
        type: string
      - description: location, default=ru
        in: query
        name: loc
        type: string
      - description: ISO8601 YYYY-MM-DD date
        in: query
        name: date
        type: string
      - description: device_id,kind,title... default=all
        in: query
        name: fields
        type: string
      - description: sensors default=none
        in: query
        name: include
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.ChainDevice'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Get specified device in the retail schema
      tags:
      - chains/devices
  /v2/chains/devices/tracks:
    get:
      description: |-
        get device customer tracks in the retail schema
        layout_id (recommended parameter), if not pass datasource may be not correct
      parameters:
      - description: digit/uuid format
        in: query
        name: layout_id
        type: string
      - description: digit/uuid format
        in: query
        name: store_id
        type: string
      - description: digit/uuid format
        in: query
        name: device_id
        type: string
      - description: ISO8601 YYYY-MM-DD HH:mm:SS timestamp default=start today
        in: query
        name: from
        type: string
      - description: ISO8601 YYYY-MM-DD HH:mm:SS timestamp default=current time
        in: query
        name: to
        type: string
      - description: default=0
        in: query
        name: offset
        type: integer
      - description: default=20
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/infra.ChainDeviceTracksResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Get device customer tracks
      tags:
      - chains/devices
  /v2/chains/devices/tracks/attime:
    get:
      description: |-
        get device customer tracks at time moment with specified accuracy in the retail schema
        layout_id (recommended parameter), if not pass datasource may be not correct
      parameters:
      - description: digit/uuid format
        in: query
        name: layout_id
        type: string
      - description: digit/uuid format
        in: query
        name: store_id
        type: string
      - description: digit/uuid format
        in: query
        name: device_id
        type: string
      - description: 1s,5s,15s golang time.Duration format, default=1s
        in: query
        name: accuracy
        type: string
      - description: ISO8601 timestamp default=current moment
        in: query
        name: at
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Tracks'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Get device customer tracks at time moment
      tags:
      - chains/devices
  /v2/chains/entrances:
    get:
      description: |-
        get slice of entrances with loc, date, layout_id, store_id, offset, limit, fields parameters
        layout_id (recommended parameter), if not pass datasource may be not correct
        entrance_ids comma separated list entrance ids
        fields - comma separated values of field names, can be entrance_id,layout_id,store_id,kind,title
      parameters:
      - description: default=*
        in: query
        name: layout_id
        type: string
      - description: default=*
        in: query
        name: store_id
        type: string
      - description: comma separated list ids, default=*
        in: query
        name: entrance_ids
        type: string
      - description: default=entrance
        in: query
        name: kind
        type: string
      - description: location, default=ru
        in: query
        name: loc
        type: string
      - description: ISO8601 YYYY-MM-DD date
        in: query
        name: date
        type: string
      - description: default=0
        in: query
        name: offset
        type: integer
      - description: default=20
        in: query
        name: limit
        type: integer
      - description: entrance_id,store_id,title... default=all
        in: query
        name: fields
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/infra.ChainEntrancesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Get all entrances in the retail schema
      tags:
      - chains/entrances
    post:
      consumes:
      - application/json
      description: |-
        creates new entrance
        example new entrance, layout_id and store_id must exists in the database:
        {
        "creator": "username",
        "kind": "entrance",
        "layout_id": "8056fa1e-b63e-4d37-b014-744c4246621b",
        "notes": "{\\"ru\\":\\"описание/комментарии на русском языке\\",\\"en\\":\\"Comments/notes in English\\"}",
        "options": "{}",
        "store_id": "29587d9a-05d3-4d2c-a974-f2c11fcb30fa",
        "title": "{\\"ru\\":\\"Наименование Входа на русском языке\\",\\"en\\":\\"Entrance name in English\\"}",
        "valid_from": "2020-04-01T00:00:00+03:00"
        }
      parameters:
      - description: entrance properties
        in: body
        name: store
        required: true
        schema:
          $ref: '#/definitions/infra.NewChainEntrance'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/infra.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Create new entrance in the retail schema
      tags:
      - chains/entrances
    put:
      consumes:
      - application/json
      description: |-
        update exists entrance in the retail schema
        no_history can be true/false; if true = without save history, if false = save history of changes, default = false
        valid_from set if need save history for specified date
        layout_id (recommended parameter), if not pass datasource may be not correct
        example upd entrance, entrance_id must to be pass in parameters:
        {
        "entrance_id": "29587d9a-05d3-4d2c-a974-f2c11fcb30fa",
        "kind": "entrance",
        "notes": "{\\"ru\\":\\"описание/комментарии на русском языке\\",\\"en\\":\\"Comments/notes in English\\"}",
        "options": "{}",
        "title": "{\\"ru\\":\\"Наименование Входа на русском языке\\",\\"en\\":\\"Entrance name in English\\"}",
        "valid_from": "2020-06-09T00:00:00+03:00",
        "no_history":true
        }
      parameters:
      - description: default=*
        in: query
        name: layout_id
        type: string
      - description: upd_entrance properties
        in: body
        name: upd_entrance
        required: true
        schema:
          $ref: '#/definitions/infra.UpdChainEntrance'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/infra.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Update entrance
      tags:
      - chains/entrances
  /v2/chains/entrances/{entrance_id}:
    delete:
      description: |-
        layout_id (recommended parameter), if not pass datasource may be not correct
        delete entrance by entrance_id parameter
      parameters:
      - description: default=*
        in: query
        name: layout_id
        type: string
      - description: uuid format
        in: path
        name: entrance_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/infra.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Delete specified entrance in the retail schema
      tags:
      - chains/entrances
    get:
      description: |-
        get specified entrance with specified, loc, date, fields parameters
        layout_id (recommended parameter), if not pass datasource may be not correct
        fields - comma separated values of field names, can be entrance_id,layout_id,store_id,kind,title
      parameters:
      - description: default=*
        in: query
        name: layout_id
        type: string
      - description: uuid format
        in: path
        name: entrance_id
        required: true
        type: string
      - description: location, default=ru
        in: query
        name: loc
        type: string
      - description: ISO8601 YYYY-MM-DD date
        in: query
        name: date
        type: string
      - description: entrance_id,store_id,title... default=all
        in: query
        name: fields
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.ChainEntrance'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Get specified entrance in the retail schema
      tags:
      - chains/entrances
  /v2/chains/entrances/bindto/store:
    delete:
      consumes:
      - application/json
      description: |-
        delete binding entrance to store in the retail schema
        layout_id (recommended parameter), if not pass datasource may be not correct
      parameters:
      - description: default=*
        in: query
        name: layout_id
        type: string
      - description: uuid format
        in: path
        name: entrance_id
        required: true
        type: string
      - description: uuid format
        in: path
        name: store_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/infra.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Delete binding entrance to store in the retail schema
      tags:
      - chains/entrances
    post:
      consumes:
      - application/json
      description: |-
        create new binding entrance to store in the retail schema
        layout_id (recommended parameter), if not pass datasource may be not correct
        example new binding entrance entrance_id and store_id must exists in the database:
        {
        "creator": "username",
        "direction": "forward",
        "entrance_id": "6fce2865-4b81-45ae-bdb6-9130a365b2b5",
        "kind_store": "store",
        "store_id": "29587d9a-05d3-4d2c-a974-f2c11fcb30fa",
        "valid_from": "2020-04-01T00:00:00+03:00",
        "options": "{}"
        }
      parameters:
      - description: default=*
        in: query
        name: layout_id
        type: string
      - description: sensor bind entrance properties
        in: body
        name: params
        required: true
        schema:
          $ref: '#/definitions/domain.BindingChainEntranceStore'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/infra.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Create new binding entrance to store in the retail schema
      tags:
      - chains/entrances
    put:
      consumes:
      - application/json
      description: |-
        update binding entrance to store in the retail schema
        valid_from set if need save history for specified date
        layout_id (recommended parameter), if not pass datasource may be not correct
        example upd binding old_store_id is exists binding store, new_store_id is target store
        and entrance_id must to be pass in parameters:
        {
        "entrance_id": "3595c9ad-8116-408e-a007-ec31d48f9669",
        "old_store_id": "3595c9ad-8116-408e-a007-ec31d48f9669",
        "new_store_id": "3595c9ad-8116-408e-a007-ec31d48f9667",
        "direction": "forward",
        "options": "{}",
        "valid_from": "2020-04-01T00:00:00+03:00",
        "no_history":true
        }
      parameters:
      - description: default=*
        in: query
        name: layout_id
        type: string
      - description: entrance bind to store parameters
        in: body
        name: params
        required: true
        schema:
          $ref: '#/definitions/infra.UpdBindingChainEntranceStore'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/infra.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Update binding entrance to store in the retail schema
      tags:
      - chains/entrances
  /v2/chains/entrances/bindto/zone:
    delete:
      consumes:
      - application/json
      description: |-
        layout_id (recommended parameter), if not pass datasource may be not correct
        delete binding entrance to zone in the retail schema
      parameters:
      - description: default=*
        in: query
        name: layout_id
        type: string
      - description: uuid format
        in: path
        name: entrance_id
        required: true
        type: string
      - description: uuid format
        in: path
        name: zone_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/infra.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Delete binding entrance to zone in the retail schema
      tags:
      - chains/entrances
    post:
      consumes:
      - application/json
      description: |-
        create new binding entrance to zone in the retail schema
        layout_id (recommended parameter), if not pass datasource may be not correct
        example new binding entrance, entrance_id and zone_id must exists in the database:
        {
        "creator": "username",
        "direction": "forward",
        "entrance_id": "6fce2865-4b81-45ae-bdb6-9130a365b2b5",
        "kind_zone": "zone",
        "options": "{}",
        "valid_from": "2020-04-01T00:00:00+03:00",
        "zone_id": "9ea85f05-f02f-4b70-a464-ab85273471b7"
        }
      parameters:
      - description: default=*
        in: query
        name: layout_id
        type: string
      - description: entrance bind to zone parameters
        in: body
        name: params
        required: true
        schema:
          $ref: '#/definitions/domain.BindingChainEntranceZone'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/infra.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Create new binding entrance to zone in the retail schema
      tags:
      - chains/entrances
    put:
      consumes:
      - application/json
      description: |-
        update binding entrance to zone in the retail schema
        layout_id (recommended parameter), if not pass datasource may be not correct
        valid_from set if need save history for specified date
        example upd binding old_zone_id is exists binding zone, new_zone_id is target zone
        and entrance_id must to be pass in parameters:
        {
        "entrance_id": "3595c9ad-8116-408e-a007-ec31d48f9669",
        "old_zone_id": "3595c9ad-8116-408e-a007-ec31d48f9669",
        "new_zone_id": "3595c9ad-8116-408e-a007-ec31d48f9667",
        "direction": "forward",
        "options": "{}",
        "valid_from": "2020-04-01T00:00:00+03:00",
        "no_history":true
        }
      parameters:
      - description: default=*
        in: query
        name: layout_id
        type: string
      - description: entrance bind to zone parameters
        in: body
        name: params
        required: true
        schema:
          $ref: '#/definitions/infra.UpdBindingChainEntranceZone'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/infra.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Update binding entrance to zone in the retail schema
      tags:
      - chains/entrances
  /v2/chains/events:
    get:
      description: |-
        get slice of events with layout_id, store_id, key, kind, severity; from - to datetime range and offset, limit parameters
        key can be: queue.threshold.exceeded, ...
        kind can be: business, system, user
        severity can be: info, warn, alarm
        from/to can be: YYYY-MM-DDTHH:mm:ss+07:00 or naive YYYY-MM-DD HH:mm:ss then the server's local timezone is applied
        fields - comma separated values of field names, can be id,key,event_time,kind,message,severity,layout_id,store_id,source,creator,created_at... all of them described at the model
      parameters:
      - description: default=*
        in: query
        name: layout_id
        type: string
      - description: default=*
        in: query
        name: store_id
        type: string
      - description: default=*
        in: query
        name: key
        type: string
      - description: default=*
        in: query
        name: kind
        type: string
      - description: default=*
        in: query
        name: severity
        type: string
      - description: ISO8601 datetime, default begin of day
        in: query
        name: from
        type: string
      - description: ISO8601 datetime, dafault current time
        in: query
        name: to
        type: string
      - description: default=0
        in: query
        name: offset
        type: integer
      - description: default=20
        in: query
        name: limit
        type: integer
      - description: id,key,event_time,kind... default=id,key,event_time,message,layout_id,store_id
        in: query
        name: fields
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/infra.ChainEventsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Get all events for the retail schema
      tags:
      - chains/events
  /v2/chains/sensors:
    get:
      description: |-
        get slice of sensors with loc, date, layout_id, store_id, device_id, kind, offset, limit, fields parameters
        layout_id (recommended parameter), if not pass datasource may be not correct
        fields - comma separated values of field names, can be sensor_id,device_id,layout_id,store_id,external_id,kind,title... all of them described at the model
      parameters:
      - description: uuid format, default=*
        in: query
        name: layout_id
        type: string
      - description: uuid format, default=*
        in: query
        name: store_id
        type: string
      - description: uuid format, default=*
        in: query
        name: device_id
        type: string
      - description: default=*
        in: query
        name: kind
        type: string
      - description: default=ru
        in: query
        name: loc
        type: string
      - description: ISO8601 YYYY-MM-DD date
        in: query
        name: date
        type: string
      - description: default=0
        in: query
        name: offset
        type: integer
      - description: default=20
        in: query
        name: limit
        type: integer
      - description: sensor_id,external_id,kind... default=all
        in: query
        name: fields
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/infra.ChainSensorsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Get all sensors in the retail schema
      tags:
      - chains/sensors
    post:
      consumes:
      - application/json
      description: |-
        create new sensor in the retail schema
        layout_id (recommended parameter), if not pass datasource may be not correct
        example new sensor, layout_id, device_id and store_id must exists in the database:
        {
        "creator": "username",
        "device_id": "47cbe28b-5370-4721-986e-468a2a0c9b87",
        "external_id": "Rule-1",
        "kind": "sensor.people_count",
        "layout_id": "8056fa1e-b63e-4d37-b014-744c4246621b",
        "notes": "{\\"ru\\":\\"описание/комментарии на русском языке\\",\\"en\\":\\"Comments/notes in English\\"}",
        "store_id": "29587d9a-05d3-4d2c-a974-f2c11fcb30fa",
        "title": "{\\"ru\\":\\"Наименование Сенсора на русском языке\\",\\"en\\":\\"Sensor name in English\\"}",
        "valid_from": "2020-04-01T00:00:00+03:00",
        "options": "{}"
        }
      parameters:
      - description: default=*
        in: query
        name: layout_id
        type: string
      - description: sensor properties
        in: body
        name: sensor
        required: true
        schema:
          $ref: '#/definitions/infra.NewChainSensor'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/infra.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Create new sensor in the retail schema
      tags:
      - chains/sensors
    put:
      consumes:
      - application/json
      description: |-
        update exists sensor
        layout_id (recommended parameter), if not pass datasource may be not correct
        valid_from set if need save history for specified date
        example upd sensor, sensor_id must to be pass in parameters:
        {
        "sensor_id": "8056fa1e-b63e-4d37-b014-744c4246621b",
        "external_id":"Rule-2",
        "kind": "sensor.people_count",
        "notes": "{\\"ru\\":\\"описание/комментарии на русском языке\\",\\"en\\":\\"Comments/notes in English\\"}",
        "options": "{\\"localIP\\":\\"192.168.0.10\\", \\"localPort\\": 80}",
        "title": "{\\"ru\\":\\"Наименование сенсора на русском языке\\",\\"en\\":\\"Sensor name in English\\"}",
        "valid_from": "2020-04-01T00:00:00+03:00",
        "no_history":true
        }
      parameters:
      - description: uuid format, default=*
        in: query
        name: layout_id
        type: string
      - description: sensor properties
        in: body
        name: sensor
        required: true
        schema:
          $ref: '#/definitions/infra.UpdChainSensor'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/infra.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Update sensor in the retail schema
      tags:
      - chains/sensors
  /v2/chains/sensors/{sensor_id}:
    delete:
      description: |-
        delete specified sensor by sensor_id parameter in the retail schema
        layout_id (recommended parameter), if not pass datasource may be not correct
      parameters:
      - description: uuid format, default=*
        in: query
        name: layout_id
        type: string
      - description: uuid format
        in: path
        name: sensor_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/infra.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Delete specified sensor in the retail schema
      tags:
      - chains/sensors
    get:
      description: |-
        get sensor with loc, date, sensor_id parameters from retail schema
        layout_id (recommended parameter), if not pass datasource may be not correct
        fields - comma separated values of field names, can be sensor_id,device_id,layout_id,store_id,external_id,kind,title... all of them described at the model
      parameters:
      - description: uuid format, default=*
        in: query
        name: layout_id
        type: string
      - description: uuid format
        in: path
        name: sensor_id
        required: true
        type: string
      - description: default=ru
        in: query
        name: loc
        type: string
      - description: ISO8601 YYYY-MM-DD date
        in: query
        name: date
        type: string
      - description: sensor_id,external_id,kind... default=all
        in: query
        name: fields
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.ChainSensor'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Get specified sensor in the retail schema
      tags:
      - chains/sensors
  /v2/chains/sensors/bindto/entrance:
    delete:
      consumes:
      - application/json
      description: |-
        delete binding sensor to entrance in the retail schema
        layout_id (recommended parameter), if not pass datasource may be not correct
      parameters:
      - description: uuid format, default=*
        in: query
        name: layout_id
        type: string
      - description: uuid format
        in: path
        name: sensor_id
        required: true
        type: string
      - description: uuid format
        in: path
        name: entrance_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/infra.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Delete binding sensor to entrance in the retail schema
      tags:
      - chains/sensors
    post:
      consumes:
      - application/json
      description: |-
        create new binding sensor to entrance in the retail schema
        layout_id (recommended parameter), if not pass datasource may be not correct
        example new binding sensor, entrance_id and sensor_id must exists in the database:
        {
        "creator": "username",
        "direction": "forward",
        "entrance_id": "3595c9ad-8116-408e-a007-ec31d48f9669",
        "k_in": 1.0,
        "k_out": 1.0,
        "kind_entrance": "entrance",
        "options": "{}",
        "sensor_id": "9070be58-b4bf-467a-be64-6077edbd9867",
        "valid_from": "2020-04-01T00:00:00+03:00"
        }
      parameters:
      - description: uuid format, default=*
        in: query
        name: layout_id
        type: string
      - description: sensor bind entrance properties
        in: body
        name: params
        required: true
        schema:
          $ref: '#/definitions/domain.BindingChainSensorEntrance'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/infra.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Create new binding sensor to entrance in the retail schema
      tags:
      - chains/sensors
    put:
      consumes:
      - application/json
      description: |-
        update exists binding sensor to new entrance in retail schema
        layout_id (recommended parameter), if not pass datasource may be not correct
        example upd binding old_entrance_id is exists binding entrance, new_entrance_id is target entrance
        valid_from set if need save history for specified date
        and sensor_id must to be pass in parameters:
        {
        "sensor_id": "3595c9ad-8116-408e-a007-ec31d48f9669",
        "old_entrance_id": "3595c9ad-8116-408e-a007-ec31d48f9669",
        "new_entrance_id": "3595c9ad-8116-408e-a007-ec31d48f9667",
        "direction": "forward",
        "k_in": 1.0,
        "k_out": 1.0,
        "options": "{}",
        "valid_from": "2020-04-01T00:00:00+03:00",
        "no_history":true
        }
      parameters:
      - description: uuid format, default=*
        in: query
        name: layout_id
        type: string
      - description: sensor upd bind entrance properties
        in: body
        name: params
        required: true
        schema:
          $ref: '#/definitions/infra.UpdBindingChainSensorEntrance'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/infra.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Update binding sensor to entrance in the retail schema
      tags:
      - chains/sensors
  /v2/chains/sensors/bindto/zone:
    delete:
      consumes:
      - application/json
      description: |-
        delete binding sensor to zone in the retail schema
        layout_id (recommended parameter), if not pass datasource may be not correct
      parameters:
      - description: uuid format, default=*
        in: query
        name: layout_id
        type: string
      - description: uuid format
        in: path
        name: sensor_id
        required: true
        type: string
      - description: uuid format
        in: path
        name: zone_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/infra.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Delete binding sensor to zone in the retail schema
      tags:
      - chains/sensors
    get:
      description: |-
        get binding sensors to zones in the retail schema
        layout_id (recommended parameter), if not pass datasource may be not correct
      parameters:
      - description: uuid format, default=*
        in: query
        name: layout_id
        type: string
      - description: uuid/digits format
        in: query
        name: zone_id
        type: string
      - description: uuid/digits format
        in: query
        name: sensor_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/infra.ChainBindSensorZoneResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Get binding sensors to zones in the retail schema
      tags:
      - chains/sensors
    post:
      consumes:
      - application/json
      description: |-
        create new binding sensor to zone in the retail schema
        layout_id (recommended parameter), if not pass datasource may be not correct
        example new binding sensor, zone_id and sensor_id must exists in the database:
        {
        "creator": "username",
        "kind_zone": "zone",
        "options": "{}",
        "sensor_id": "9070be58-b4bf-467a-be64-6077edbd9867",
        "zone_id": "2b076f28-c5d1-4fba-8b3b-2f58cba07c07",
        "valid_from": "2020-04-01T00:00:00+03:00"
        }
      parameters:
      - description: uuid format, default=*
        in: query
        name: layout_id
        type: string
      - description: sensor bind zone properties
        in: body
        name: params
        required: true
        schema:
          $ref: '#/definitions/domain.BindingChainSensorZone'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/infra.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Create new binding sensor to zone in the retail schema
      tags:
      - chains/sensors
    put:
      consumes:
      - application/json
      description: |-
        update exists binding sensor to new zone in retail schema
        layout_id (recommended parameter), if not pass datasource may be not correct
        example upd binding old_zone_id is exists binding zone, new_zone_id is target zone
        valid_from set if need save history for specified date
        and sensor_id must to be pass in parameters:
        {
        "sensor_id": "3595c9ad-8116-408e-a007-ec31d48f9669",
        "old_zone_id": "3595c9ad-8116-408e-a007-ec31d48f9669",
        "new_zone_id": "3595c9ad-8116-408e-a007-ec31d48f9667",
        "options": "{}",
        "valid_from": "2020-04-01T00:00:00+03:00",
        "no_history":true
        }
      parameters:
      - description: uuid format, default=*
        in: query
        name: layout_id
        type: string
      - description: sensor upd bind entrance properties
        in: body
        name: params
        required: true
        schema:
          $ref: '#/definitions/infra.UpdBindingChainSensorZone'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/infra.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Update binding sensor to zone in the retail schema
      tags:
      - chains/sensors
  /v2/chains/stores:
    get:
      description: |-
        get slice of stores with loc, date, layout_id, crm_key, offset, limit, fields, include parameters
        layout_id (recommended parameter), if not pass datasource may be not correct
        store_ids - comma separated list of the store's ids, default *
        fields - comma separated values of field names, can be store_id,layout_id,kind,title...
        all of them described at the model
        include - comma separated list of entities, embedded in current,
        for store it can be entrances,zones,devices
      parameters:
      - description: default=*
        in: query
        name: layout_id
        type: string
      - description: default=*
        in: query
        name: store_ids
        type: string
      - description: default=*
        in: query
        name: crm_key
        type: string
      - description: default=ru
        in: query
        name: loc
        type: string
      - description: ISO8601 YYYY-MM-DD date
        in: query
        name: date
        type: string
      - description: default=0
        in: query
        name: offset
        type: integer
      - description: default=20
        in: query
        name: limit
        type: integer
      - description: store_id,title... default=all
        in: query
        name: fields
        type: string
      - description: entrances,zones,devices default=none
        in: query
        name: include
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/infra.ChainStoresResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Get all stores in the retail schema
      tags:
      - chains/stores
    post:
      consumes:
      - application/json
      description: |-
        create new store in the retail schema
        layout_id (recommended parameter), if not pass datasource may be not correct
        example, use layout_id for exists layout
        {
        "area": 109.94,
        "brands": "{\\"ru\\":[\\"Брэнд1\\"], \\"en\\":[\\"Brand1\\"]}",
        "creator": "username",
        "crm_key": "code1s for store",
        "currency": "rub",
        "kind": "store",
        "layout_id": "8056fa1e-b63e-4d37-b014-744c4246621b",
        "notes": "{\\"ru\\":\\"описание/комментарии на русском языке\\",\\"en\\":\\"Comments/notes in English\\"}",
        "options": "{\\"tz\\":3}",
        "title": "{\\"ru\\":\\"Наименование Магазина на русском языке\\",\\"en\\":\\"Store name in English\\"}",
        "valid_from": "2020-04-01T00:00:00+03:00"
        }
      parameters:
      - description: uuid format, default=*
        in: query
        name: layout_id
        type: string
      - description: store properties
        in: body
        name: store
        required: true
        schema:
          $ref: '#/definitions/infra.NewChainStore'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/infra.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Create new store in the retail schema
      tags:
      - chains/stores
    put:
      consumes:
      - application/json
      description: |-
        update a store with upd_store parameter
        layout_id (recommended parameter), if not pass datasource may be not correct
        no_history can be true/false; if true = without save history, if false = save history of changes
        valid_from set if need save history for specified date
        example, store_id must to exists
        {
        "store_id": "29587d9a-05d3-4d2c-a974-f2c11fcb30fa",
        "area": 109.94,
        "crm_key": "code1s for store",
        "options": "{\\"tz\\":3}",
        "title": "{\\"ru\\":\\"Наименование Магазина на русском языке\\",\\"en\\":\\"Store name in English\\"}",
        "valid_from": "2020-04-01T00:00:00+03:00",
        "no_history": true
        }
      parameters:
      - description: default=*
        in: query
        name: layout_id
        type: string
      - description: upd_store properties
        in: body
        name: store
        required: true
        schema:
          $ref: '#/definitions/infra.UpdChainStore'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/infra.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Update store in the retail schema
      tags:
      - chains/stores
  /v2/chains/stores/{store_id}:
    delete:
      description: |-
        delete store by store_id parameter
        layout_id (recommended parameter), if not pass datasource may be not correct
      parameters:
      - description: default=*
        in: query
        name: layout_id
        type: string
      - description: uuid format
        in: path
        name: store_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/infra.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Delete specified store in the retail schema
      tags:
      - chains/stores
    get:
      description: |-
        get store with loc(ation), date, store_id, fields parameters
        layout_id (recommended parameter), if not pass datasource may be not correct
        fields - comma separated values of field names,
        can be store_id,layout_id,kind,title... all of them described at the model
        include - comma separated list of entities,
        embedded in current, for store it can be entrances,zones,devices
      parameters:
      - description: default=*
        in: query
        name: layout_id
        type: string
      - description: uuid format
        in: path
        name: store_id
        required: true
        type: string
      - description: default=ru
        in: query
        name: loc
        type: string
      - description: ISO8601 YYYY-MM-DD date
        in: query
        name: date
        type: string
      - description: store_id,title... default=all
        in: query
        name: fields
        type: string
      - description: entrances,zones,devices default=none
        in: query
        name: include
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.ChainStore'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Get specified store in the retail schema
      tags:
      - chains/stores
  /v2/chains/zones:
    get:
      description: |-
        get slice of zones with loc, date, layout_id, store_id, is_online, is_active, offset, limit, fields parameters
        layout_id (recommended parameter), if not pass datasource may be not correct
        fields - comma separated values of field zone_id,parent_id,layout_id,store_id,kind,title... all of them described at the model
      parameters:
      - description: default=*
        in: query
        name: layout_id
        type: string
      - description: default=*
        in: query
        name: store_id
        type: string
      - description: default=*
        in: query
        name: kind
        type: string
      - description: default=*
        in: query
        name: parent_id
        type: string
      - description: location, default=ru
        in: query
        name: loc
        type: string
      - description: ISO8601 YYYY-MM-DD date
        in: query
        name: date
        type: string
      - description: default=*
        in: query
        name: is_online
        type: string
      - description: default=*
        in: query
        name: is_active
        type: string
      - description: default=0
        in: query
        name: offset
        type: integer
      - description: default=20
        in: query
        name: limit
        type: integer
      - description: zone_id,kind,title... default=all
        in: query
        name: fields
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/infra.ChainZonesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Get all zones in the retail schema
      tags:
      - chains/zones
    post:
      consumes:
      - application/json
      description: |-
        creates new zone in the retail schema
        layout_id (recommended parameter), if not pass datasource may be not correct
        example new zone, layout_id and store_id must exists in the database:
        {
        "creator": "username",
        "kind": "zone",
        "layout_id": "8056fa1e-b63e-4d37-b014-744c4246621b",
        "notes": "{\\"ru\\":\\"описание/комментарии на русском языке\\",\\"en\\":\\"Comments/notes in English\\"}",
        "options": "{\\"is_online\\":1,\\"borders\\":[{\\"title\\":\\"lowlevel\\",\\"low\\":0,\\"high\\":37,\\"color\\":\\"#008000\\"},{\\"title\\":\\"middle\\",\\"low\\":37,\\"high\\":52,\\"color\\":\\"#FFFF80\\"},{\\"title\\":\\"high\\",\\"low\\":52,\\"high\\":70,\\"color\\":\\"#FF0000\\"}]}",
        "store_id": "29587d9a-05d3-4d2c-a974-f2c11fcb30fa",
        "title": "{\\"ru\\":\\"Наименование Зоны на русском языке\\",\\"en\\":\\"Zone name in English\\"}",
        "valid_from": "2020-04-01T00:00:00+03:00"
        }
      parameters:
      - description: default=*
        in: query
        name: layout_id
        required: true
        type: string
      - description: zone properties
        in: body
        name: zone
        required: true
        schema:
          $ref: '#/definitions/infra.NewChainZone'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/infra.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Create new zone in the retail schema
      tags:
      - chains/zones
    put:
      consumes:
      - application/json
      description: |-
        update exists zone in the retail schema
        layout_id (recommended parameter), if not pass datasource may be not correct
        no_history can be true/false; if true = without save history, if false = save history of changes, default = false
        valid_from set if need save history for specified date
        example upd zone, zone_id must to be pass in parameters:
        {
        "zone_id": "29587d9a-05d3-4d2c-a974-f2c11fcb30fa",
        "kind": "zone",
        "notes": "{\\"ru\\":\\"описание/комментарии на русском языке\\",\\"en\\":\\"Comments/notes in English\\"}",
        "options": "{}",
        "title": "{\\"ru\\":\\"Наименование Зоны на русском языке\\",\\"en\\":\\"Zone name in English\\"}",
        "valid_from": "2020-06-09T00:00:00+03:00",
        "no_history":true
        }
      parameters:
      - description: default=*
        in: query
        name: layout_id
        type: string
      - description: zone properties
        in: body
        name: zone
        required: true
        schema:
          $ref: '#/definitions/infra.UpdChainZone'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/infra.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Update zone in the retail schema
      tags:
      - chains/zones
  /v2/chains/zones/{zone_id}:
    delete:
      description: |-
        delete zone by zone_id parameter
        layout_id (recommended parameter), if not pass datasource may be not correct
      parameters:
      - description: default=*
        in: query
        name: layout_id
        type: string
      - description: uuid format
        in: path
        name: zone_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/infra.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Delete specified zone in the retail schema
      tags:
      - chains/zones
    get:
      description: |-
        get zone with loc, date, zone_id, fields parameters
        layout_id (recommended parameter), if not pass datasource may be not correct
        fields - comma separated values of field zone_id,parent_id,layout_id,store_id,kind,title... all of them described at the model
      parameters:
      - description: default=*
        in: query
        name: layout_id
        type: string
      - description: uuid format
        in: path
        name: zone_id
        required: true
        type: string
      - description: default=ru
        in: query
        name: loc
        type: string
      - description: ISO8601 YYYY-MM-DD date
        in: query
        name: date
        type: string
      - description: zone_id,kind,title... default=all
        in: query
        name: fields
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.ChainZone'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Get specified zone in the retail schema
      tags:
      - chains/zones
  /v2/chains/zones/states:
    get:
      description: |-
        get the zones states changes for zones with kind=service_channel, returns states online/offline
        layout_id (recommended parameter), if not pass datasource may be not correct
      parameters:
      - description: default=*
        in: query
        name: layout_id
        type: string
      - description: default=*
        in: query
        name: store_id
        type: string
      - description: default=*
        in: query
        name: zone_id
        type: string
      - description: default=0
        in: query
        name: offset
        type: integer
      - description: default=20
        in: query
        name: limit
        type: integer
      - description: ISO8601 datetime, default begin of day
        in: query
        name: from
        type: string
      - description: ISO8601 datetime, dafault current time
        in: query
        name: to
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/infra.ChainZonesStatesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Get zones (service_channel) states
      tags:
      - chains/zones
  /v2/chains/zones/states/attime:
    get:
      description: |-
        get the zones last states for zones with kind=service_channel, returns states online/offline
        layout_id (recommended parameter), if not pass datasource may be not correct
      parameters:
      - description: default=*
        in: query
        name: layout_id
        required: true
        type: string
      - description: uuid format
        in: query
        name: zone_id
        required: true
        type: string
      - description: ISO8601 datetime, default=current moment
        in: query
        name: at
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.ZoneState'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Get zones (service_channel) last states
      tags:
      - chains/zones
  /v2/chains/zones/states/last:
    get:
      description: |-
        get the zones last states for zones with kind=service_channel, returns states online/offline
        layout_id (recommended parameter), if not pass datasource may be not correct
      parameters:
      - description: default=*
        in: query
        name: layout_id
        type: string
      - description: default=*
        in: query
        name: store_id
        type: string
      - description: default=*
        in: query
        name: zone_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.ZoneStates'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Get zones (service_channel) last states
      tags:
      - chains/zones
  /v2/data/attendance/malls/entrances:
    get:
      description: |-
        get data enters and exits in/out the entrances of the mall by group_by intervals,
        layout_id (recommended parameter), if not pass datasource may be not correct
        can be filtered by list entrance_id as comma separated list (12345,12344567,8488...)
        and daterange parameters from and to.
        intervals can be: interval, hour, day, week, month, quarter, year
        use_rawdata for request data by sensors, can be: true/false/1/0; default false
      parameters:
      - description: default=*
        in: query
        name: entrance_ids
        type: string
      - description: default=*
        in: query
        name: layout_id
        type: string
      - description: default=interval
        in: query
        name: group_by
        type: string
      - description: default=false
        in: query
        name: use_rawdata
        type: string
      - description: ISO8601 YYYY-MM-DD HH:mm:SS timestamp default=start today
        in: query
        name: from
        type: string
      - description: ISO8601 YYYY-MM-DD HH:mm:SS timestamp default=current time
        in: query
        name: to
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.EntrancesAttendance'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "413":
          description: Request Entity Too Large
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Get data attendance for entrances of the mall
      tags:
      - data/attendance
  /v2/data/attendance/malls/renters:
    get:
      description: |-
        get data enters and exits in/out the entrances of the mall's renters by group_by intervals,
        can be filtered by list renter_ids as comma separated list (12345,12344567,8488...) and layout_id
        and daterange parameters from and to.
        layout_id (recommended parameter), if not pass datasource may be not correct
        intervals can be: interval, hour, day, week, month, quarter, year
        use_rawdata for request data by sensors, can be: true/false/1/0; default false
      parameters:
      - description: default=*
        in: query
        name: renter_ids
        type: string
      - description: default=*
        in: query
        name: layout_id
        type: string
      - description: default=interval
        in: query
        name: group_by
        type: string
      - description: default=false
        in: query
        name: use_rawdata
        type: string
      - description: ISO8601 YYYY-MM-DD HH:mm:SS timestamp default=start today
        in: query
        name: from
        type: string
      - description: ISO8601 YYYY-MM-DD HH:mm:SS timestamp default=current time
        in: query
        name: to
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.RentersAttendance'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "413":
          description: Request Entity Too Large
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Get data attendance for renters of the mall
      tags:
      - data/attendance
  /v2/data/attendance/malls/zones:
    get:
      description: |-
        get data enters and exits in/out the zones of the mall by group_by intervals,
        layout_id (recommended parameter), if not pass datasource may be not correct
        can be filtered by list zone_id as comma separated list (12345,12344567,8488...)
        and daterange parameters from and to.
        intervals can be: interval, hour, day, week, month, quarter, year
        use_rawdata for request data by sensors, can be: true/false/1/0; default false
      parameters:
      - description: default=*
        in: query
        name: zone_ids
        type: string
      - description: default=*
        in: query
        name: layout_id
        type: string
      - description: default=interval
        in: query
        name: group_by
        type: string
      - description: default=false
        in: query
        name: use_rawdata
        type: string
      - description: ISO8601 YYYY-MM-DD HH:mm:SS timestamp default=start today
        in: query
        name: from
        type: string
      - description: ISO8601 YYYY-MM-DD HH:mm:SS timestamp default=current time
        in: query
        name: to
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.ZonesAttendance'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "413":
          description: Request Entity Too Large
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Get data attendance for zones of the mall
      tags:
      - data/attendance
  /v2/data/attendance/stores:
    get:
      description: |-
        get data enters and exits in/out the stores by group_by intervals,
        can be filtered by list store_id as comma separated list (12345,12344567,8488...)
        and daterange parameters from and to.
        intervals can be: interval, 1m, hour, day, week, month, quarter, year
        use_rawdata for request data by sensors, can be: true/false/1/0; default false
        layout_id (recommended parameter), if not pass datasource may be not correct
      parameters:
      - description: default=*
        in: query
        name: layout_id
        type: string
      - description: comma separated list store_id
        in: query
        name: store_ids
        type: string
      - description: default=interval
        in: query
        name: group_by
        type: string
      - description: default=false
        in: query
        name: use_rawdata
        type: string
      - description: ISO8601 YYYY-MM-DD HH:mm:SS timestamp default=start today
        in: query
        name: from
        type: string
      - description: ISO8601 YYYY-MM-DD HH:mm:SS timestamp default=current time
        in: query
        name: to
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.StoresAttendance'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "413":
          description: Request Entity Too Large
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Get data attendance for stores
      tags:
      - data/attendance
  /v2/data/attendance/stores/entrances:
    get:
      description: |-
        get data enters and exits in/out the entrances of the stores by group_by intervals,
        entrance_ids - can be filtered by list entrance_id as comma separated list (12345,12344567,8488...)
        and daterange parameters from and to.
        intervals can be: interval, hour, day, week, month, quarter, year
        use_rawdata for request data by sensors, can be: true/false/1/0; default false
        layout_id (recommended parameter), if not pass datasource may be not correct
      parameters:
      - description: default=*
        in: query
        name: layout_id
        type: string
      - description: default=*
        in: query
        name: entrance_ids
        type: string
      - description: default=interval
        in: query
        name: group_by
        type: string
      - description: default=false
        in: query
        name: use_rawdata
        type: string
      - description: ISO8601 YYYY-MM-DD HH:mm:SS timestamp default=start today
        in: query
        name: from
        type: string
      - description: ISO8601 YYYY-MM-DD HH:mm:SS timestamp default=current time
        in: query
        name: to
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.EntrancesAttendance'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "413":
          description: Request Entity Too Large
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Get data attendance for entrances of the stores
      tags:
      - data/attendance
  /v2/data/attendance/stores/zones:
    get:
      description: |-
        get data enters and exits in/out the zones of the stores by group_by intervals,
        can be filtered by list zone_id as comma separated list (12345,12344567,8488...)
        and daterange parameters from and to.
        intervals can be: interval, hour, day, week, month, quarter, year
        use_rawdata for request data by sensors, can be: true/false/1/0; default false
        layout_id (recommended parameter), if not pass datasource may be not correct
      parameters:
      - description: default=*
        in: query
        name: layout_id
        type: string
      - description: default=*
        in: query
        name: zone_ids
        type: string
      - description: default=interval
        in: query
        name: group_by
        type: string
      - description: default=false
        in: query
        name: use_rawdata
        type: string
      - description: ISO8601 YYYY-MM-DD HH:mm:SS timestamp default=start today
        in: query
        name: from
        type: string
      - description: ISO8601 YYYY-MM-DD HH:mm:SS timestamp default=current time
        in: query
        name: to
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.ZonesAttendance'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "413":
          description: Request Entity Too Large
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Get data attendance for zones of the stores
      tags:
      - data/attendance
  /v2/data/inside:
    get:
      description: |-
        get data on the number of people inside the zone at now, can be filtered by zone_id parameter
        layout_id (recommended parameter), if not pass datasource may be not correct
      parameters:
      - description: uuid format, default=*
        in: path
        name: layout_id
        required: true
        type: string
      - description: default=*
        in: query
        name: zone_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.DatasInside'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Get data inside at now
      tags:
      - data/inside
  /v2/data/inside/days:
    get:
      description: |-
        get data on the number of people inside the zone at intervals by cumulative total, can be filtered by zone_id and day parameter
        layout_id (recommended parameter), if not pass datasource may be not correct
      parameters:
      - description: uuid format, default=*
        in: path
        name: layout_id
        required: true
        type: string
      - description: default=*
        in: query
        name: zone_id
        type: string
      - description: YYYY-MM-DD default=today
        in: query
        name: day
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.DatasInside'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Get data inside at daily intervals by cumulative total
      tags:
      - data/inside
  /v2/data/inside/days/range:
    get:
      description: |-
        get data on the number of people inside the zone by range intervals,  can be filtered by the zone_id parameter and the day parameter.
        layout_id (recommended parameter), if not pass datasource may be not correct
        from, to and day must be at same day
        from/to can be: YYYY-MM-DDTHH:mm:ss+07:00 or naive YYYY-MM-DD HH:mm:ss then the server's local timezone is applied
      parameters:
      - description: uuid format, default=*
        in: path
        name: layout_id
        required: true
        type: string
      - description: default=*
        in: query
        name: zone_id
        type: string
      - description: ISO8601 datetime, default begin of day
        in: query
        name: from
        type: string
      - description: ISO8601 datetime, dafault current time
        in: query
        name: to
        type: string
      - description: YYYY-MM-DD default=today
        in: query
        name: day
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.DatasInside'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Get data inside by range interval of the day
      tags:
      - data/inside
  /v2/data/queue/evaluations:
    get:
      description: |-
        get zone data evaluation for serviceChannel blocks by intervals
        layout_id (recommended parameter), if not pass datasource may be not correct
        can be filtered by layout_id, store_id, parent_zone_id and daterange parameters from and to.
        service_channel_block_id is serviceChannel block identifier
        from/to can be: YYYY-MM-DDTHH:mm:ss+07:00 or naive YYYY-MM-DD HH:mm:ss then the server's local timezone is applied
      parameters:
      - description: uuid format, default=*
        in: path
        name: layout_id
        required: true
        type: string
      - description: default=*
        in: query
        name: store_id
        type: string
      - description: default=*
        in: query
        name: service_channel_block_id
        type: string
      - description: default=*
        in: query
        name: is_full
        type: string
      - description: ISO8601 datetime, default begin of day
        in: query
        name: from
        type: string
      - description: ISO8601 datetime, dafault current time
        in: query
        name: to
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.ZoneDataEvaluations'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "413":
          description: Request Entity Too Large
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Get zone data evaluation for serviceChannel blocks
      tags:
      - data/queue
  /v2/data/queue/length/stores:
    get:
      description: |-
        get data on the number of people inside the queue in the stores by group intervals,
        group can be interval means rawdata, 1m means group by minutes
        agg_func applies to raw data for calculate rawdata, can be max, min, avg
        layout_id (recommended parameter), if not pass datasource may be not correct
        can be filtered by store_id and daterange parameters from and to.
        from/to can be: YYYY-MM-DDTHH:mm:ss+07:00
        or naive YYYY-MM-DD HH:mm:ss then the server's local timezone is applied
      parameters:
      - description: default=*
        in: query
        name: layout_id
        type: string
      - description: default=*
        in: query
        name: store_id
        type: string
      - description: default=interval
        in: query
        name: group_by
        type: string
      - description: default=max
        in: query
        name: agg_func
        type: string
      - description: ISO8601 datetime, default begin of day
        in: query
        name: from
        type: string
      - description: ISO8601 datetime, dafault current time
        in: query
        name: to
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.StoresDataQueue'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "413":
          description: Request Entity Too Large
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Get data queue length for stores
      tags:
      - data/queue
  /v2/data/queue/length/stores/live:
    get:
      description: |-
        get data on the number of people inside the queue in the stores in current moment,
        layout_id (recommended parameter), if not pass datasource may be not correct
        can be filtered by store_id
      parameters:
      - description: default=*
        in: query
        name: layout_id
        type: string
      - description: default=*
        in: query
        name: store_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.StoresDataQueue'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Get data queue length for stores in current moment
      tags:
      - data/queue
  /v2/data/queue/length/zones:
    get:
      description: |-
        get data on the number of people inside the queue in the zones of stores by intervals,
        can be filtered by zone_id, store_id and daterange parameters from and to
        layout_id (recommended parameter), if not pass datasource may be not correct
        from/to can be: YYYY-MM-DDTHH:mm:ss+07:00 or naive YYYY-MM-DD HH:mm:ss
        then the server's local timezone is applied
      parameters:
      - description: default=*
        in: query
        name: layout_id
        type: string
      - description: default=*
        in: query
        name: store_id
        type: string
      - description: default=*
        in: query
        name: zone_id
        type: string
      - description: ISO8601 datetime, default begin of day
        in: query
        name: from
        type: string
      - description: ISO8601 datetime, dafault current time
        in: query
        name: to
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.ZonesDataQueue'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "413":
          description: Request Entity Too Large
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Get data queue length for zones of stores by intervals
      tags:
      - data/queue
  /v2/data/queue/length/zones/live:
    get:
      description: |-
        get data on the number of people inside the queue in the zones of stores in current moment,
        layout_id (recommended parameter), if not pass datasource may be not correct
        can be filtered by zone_id
      parameters:
      - description: default=*
        in: query
        name: layout_id
        type: string
      - description: default=*
        in: query
        name: zone_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.ZonesDataQueue'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Get data queue length for zones of stores in current moment
      tags:
      - data/queue
  /v2/data/queue/recommendations:
    get:
      description: |-
        get data recommendations on the need to open service channels
        to prevent queuing by time range and timerange
        can be filtered by store_id, split_interval can fill intervals between original points
        layout_id (recommended parameter), if not pass datasource may be not correct
        from/to can be: YYYY-MM-DDTHH:mm:ss+07:00 or naive YYYY-MM-DD HH:mm:ss
        then the server's local timezone is applied to is the upper bound,
        but the recommendations have points in the future, usually up to 10 minutes ahead
      parameters:
      - description: default=*
        in: query
        name: layout_id
        type: string
      - description: default=*
        in: query
        name: store_id
        type: string
      - description: default=60s
        in: query
        name: split_interval
        type: string
      - description: ISO8601 datetime, default begin of day
        in: query
        name: from
        type: string
      - description: ISO8601 datetime, dafault current time
        in: query
        name: to
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.PredictionsQueue'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Get data recommendations
      tags:
      - data/queue
  /v2/devices/{device_id}/info:
    get:
      description: |-
        get device info: serialNumber, sensors with parameter device_id=id
        layout_id (recommended parameter), if not pass datasource may be not correct
      parameters:
      - description: uuid format, default=*
        in: path
        name: layout_id
        required: true
        type: string
      - description: uuid format
        in: path
        name: device_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.DevConfig'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Get specified device info
      tags:
      - common
  /v2/devices/info:
    get:
      description: |-
        get device info about serialNumber, sensors
        parameters:
        kind: device.3dh, device.3dv, device.3d, device.bdv, device.3dx...
        timeout in seconds. Attention 3dv little big latency, recommended 60 sec
      parameters:
      - description: device kind, default=device.3dv
        in: query
        name: kind
        type: string
      - description: ip/fqdn access to device, default=192.168.0.1
        in: query
        name: ip
        type: string
      - description: tcp port access to device, default=80
        in: query
        name: port
        type: string
      - description: login, default=admin
        in: query
        name: login
        type: string
      - description: password, default=passw0rd
        in: query
        name: password
        type: string
      - description: timeout in seconds, default=30
        in: query
        name: timeout
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.DevConfig'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Get some device info
      tags:
      - common
  /v2/entities:
    get:
      consumes:
      - application/json
      description: |-
        get slice of entities with loc, entity_key, parent_key, kind, offset, limit parameters
        layout_id (recommended parameter), if not pass datasource may be not correct
      parameters:
      - description: uuid format, default=*
        in: path
        name: layout_id
        required: true
        type: string
      - description: default=*
        in: query
        name: entity_key
        type: string
      - description: default=*
        in: query
        name: parent_key
        type: string
      - description: default=*
        in: query
        name: kind
        type: string
      - description: location, default=ru
        in: query
        name: loc
        type: string
      - description: default=0
        in: query
        name: offset
        type: integer
      - description: default=20
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/infra.EntitiesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Get all entities
      tags:
      - common
  /v2/layouts:
    get:
      description: get slice of layouts/projects configuration with location, date,
        offset, limit parameters
      parameters:
      - description: default=ru
        in: query
        name: loc
        type: string
      - description: YYYY-MM-DD, default=today
        in: query
        name: date
        type: string
      - description: default=0
        in: query
        name: offset
        type: integer
      - description: default=20
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      - text/xml
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/infra.LayoutResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Get all layouts
      tags:
      - common
  /v2/layouts/{layout_id}:
    get:
      description: get layout with location, date and layout_id parameters
      parameters:
      - description: digit/uuid format
        in: path
        name: layout_id
        required: true
        type: string
      - description: default=ru
        in: query
        name: loc
        type: string
      - description: YYYY-MM-DD, default=today
        in: query
        name: date
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Layout'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Get specified layout
      tags:
      - common
  /v2/layouts/{layout_id}/behaviors:
    get:
      description: get behaviors for for specified layout_id
      parameters:
      - description: digit/uuid format
        in: path
        name: layout_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Behavior'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Get behavior for specified layout
      tags:
      - common
    put:
      consumes:
      - application/json
      description: |-
        Updates behavior for specified layout
        example upd behavior, layout_id must exists in the database:
        {
        "Open": "10:00:00",
        "Close": "23:00:00",
        "time_zone": "Europe/Moscow",
        "behavior_config": {
        "queue": {
        "layouts": [
        {
        "layout_id": "89884907",
        "title": "retail name",
        "threshold": 99.99,
        "service_channel": {
        "indexes": [
        {
        "kind": "work_time",
        "weight": 1,
        "op": "*"
        },
        {
        "kind": "queue_length",
        "weight": 40,
        "op": "+"
        },
        {
        "kind": "cashiers_activities",
        "weight": 100,
        "op": "+"
        }
        ]
        }
        }
        ],
        "stores": [
        {
        "store_id": null,
        "title": "store name",
        "threshold": 99.99,
        "service_channel": {
        "indexes": [
        {
        "kind": "work_time",
        "weight": 1,
        "op": "*"
        },
        {
        "kind": "queue_length",
        "weight": 40,
        "op": "+"
        },
        {
        "kind": "cashiers_activities",
        "weight": 90,
        "op": "+"
        }
        ]
        }
        }
        ],
        "service_channels": [
        {
        "service_channel_id": "131928214",
        "title": "Касса №10",
        "threshold": 99.99,
        "service_channel": {
        "indexes": [
        {
        "kind": "work_time",
        "weight": 1,
        "op": "*"
        },
        {
        "kind": "queue_length",
        "weight": 100,
        "op": "+"
        },
        {
        "kind": "cashiers_activities",
        "weight": 100,
        "op": "+"
        }
        ]
        }
        },
        {
        "service_channel_id": "66932267",
        "title": "Касса №2",
        "threshold": 99.99,
        "service_channel": {
        "indexes": [
        {
        "kind": "work_time",
        "weight": 1,
        "op": "*"
        },
        {
        "kind": "queue_length",
        "weight": 100,
        "op": "+"
        },
        {
        "kind": "cashiers_activities",
        "weight": 100,
        "op": "+"
        }
        ]
        }
        },
        {
        "service_channel_id": "73500176",
        "title": "Касса №5",
        "threshold": 99.99,
        "service_channel": {
        "indexes": [
        {
        "kind": "work_time",
        "weight": 1,
        "op": "*"
        },
        {
        "kind": "queue_length",
        "weight": 100,
        "op": "+"
        },
        {
        "kind": "cashiers_activities",
        "weight": 100,
        "op": "+"
        }
        ]
        }
        },
        {
        "service_channel_id": "80541959",
        "title": "Касса №7",
        "threshold": 99.99,
        "service_channel": {
        "indexes": [
        {
        "kind": "work_time",
        "weight": 1,
        "op": "*"
        },
        {
        "kind": "queue_length",
        "weight": 100,
        "op": "+"
        },
        {
        "kind": "cashiers_activities",
        "weight": 100,
        "op": "+"
        }
        ]
        }
        }
        ]
        },
        "recommendations": {
        "layouts": [
        {
        "layout_id": "123124324",
        "title": "retail name",
        "std_coef": 0.3,
        "queue_multiplier": 0.6,
        "pred_minutes": 10,
        "hist_minutes": 30,
        "checkout_productivity": 0.8
        }
        ],
        "stores": [
        {
        "store_id": "234534545",
        "title": "store name",
        "std_coef": 0.3,
        "queue_multiplier": 0.6,
        "pred_minutes": 10,
        "hist_minutes": 30,
        "checkout_productivity": 0.8
        },
        {
        "store_id": "234556487545",
        "title": "store name another",
        "std_coef": 0.3,
        "queue_multiplier": 0.6,
        "pred_minutes": 10,
        "hist_minutes": 30,
        "checkout_productivity": 0.8
        }
        ]
        },
        "queue_thresholds": {
        "layouts": [
        {
        "layout_id": "89884907",
        "title": "retail name",
        "threshold": 3,
        "sequence_length": 2
        }
        ],
        "stores": [
        {
        "store_id": "242342343",
        "title": "store name",
        "threshold": 2.99,
        "sequence_length": 2
        }
        ],
        "blocks_service_channels": [
        {
        "block_service_chanels_id": "2343245",
        "title": "cash block name",
        "threshold": 2.89,
        "sequence_length": 2
        }
        ]
        }
        }
        }
      parameters:
      - description: digit/uuid format
        in: path
        name: layout_id
        required: true
        type: string
      - description: behavior properties
        in: body
        name: behavior
        required: true
        schema:
          $ref: '#/definitions/domain.Behavior'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/infra.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Updates behavior for specified layout
      tags:
      - common
  /v2/layouts/behaviors:
    get:
      description: get behaviors for layouts
      parameters:
      - description: default=0
        in: query
        name: offset
        type: integer
      - description: default=20
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/infra.BehaviorsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Get behaviors
      tags:
      - common
  /v2/malls:
    get:
      description: |-
        get slice of malls with loc (location), date, offset, limit, fields parameters
        layout_id (recommended parameter), if not pass datasource may be not correct
        fields - comma separated values of field names, can be layout_id,kind,title,languages...
      parameters:
      - description: default=*
        in: query
        name: layout_id
        type: string
      - description: default=0
        in: query
        name: offset
        type: integer
      - description: default=20
        in: query
        name: limit
        type: integer
      - description: default=ru
        in: query
        name: loc
        type: string
      - description: ISO8601 YYYY-MM-DD, default=today
        in: query
        name: date
        type: string
      - description: layout_id,title...default=all
        in: query
        name: fields
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/infra.MallsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Get all malls in the mall schema
      tags:
      - malls
  /v2/malls/{layout_id}:
    get:
      description: |-
        get mall with loc(ation), date, layout_id, fields parameters
        layout_id (recommended parameter), if not pass datasource may be not correct
        fields - comma separated values of field names, can be layout_id,kind,title,languages...
      parameters:
      - description: uuid format
        in: path
        name: layout_id
        required: true
        type: string
      - description: default=ru
        in: query
        name: loc
        type: string
      - description: ISO8601 YYYY-MM-DD date
        in: query
        name: date
        type: string
      - description: layout_id,title...default=all
        in: query
        name: fields
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Mall'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Get specified mall in the mall schema
      tags:
      - malls
  /v2/malls/devices:
    get:
      description: |-
        get slice of devices with loc, date, layout_id, kind, is_active, dc_mode, mode, sn, offset, limit, fields parameters
        layout_id (recommended parameter), if not pass datasource may be not correct
        fields - comma separated values of field names, can be device_id,layout_id,master_id,kind,title... all of them described at the model
        include - comma separated list of entities, embedded in current, for devices it can be sensors,delay
      parameters:
      - description: default=*
        in: query
        name: layout_id
        type: string
      - description: default=*
        in: query
        name: kind
        type: string
      - description: default=*
        in: query
        name: is_active
        type: string
      - description: default=*
        in: query
        name: dc_mode
        type: string
      - description: default=*
        in: query
        name: mode
        type: string
      - description: default=*
        in: query
        name: sn
        type: string
      - description: default=ru
        in: query
        name: loc
        type: string
      - description: ISO8601 YYYY-MM-DD date
        in: query
        name: date
        type: string
      - description: default=0
        in: query
        name: offset
        type: integer
      - description: default=20
        in: query
        name: limit
        type: integer
      - description: device_id,kind,title... default=all
        in: query
        name: fields
        type: string
      - description: sensors,delay default=none
        in: query
        name: include
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/infra.MallDevicesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Get all mall devices in the mall schema
      tags:
      - malls/devices
  /v2/malls/devices/{device_id}:
    get:
      description: |-
        get device with loc, date, device_id, fields parameters from mall schema
        layout_id (recommended parameter), if not pass datasource may be not correct
        fields - comma separated values of field names, can be device_id,layout_id...
        all of them described at the model
        include - comma separated list of entities, embedded in current, for devices it can be sensors
      parameters:
      - description: default=*
        in: query
        name: layout_id
        type: string
      - description: uuid format
        in: path
        name: device_id
        required: true
        type: string
      - description: location, default=ru
        in: query
        name: loc
        type: string
      - description: ISO8601 YYYY-MM-DD date
        in: query
        name: date
        type: string
      - description: device_id,kind,title... default=all
        in: query
        name: fields
        type: string
      - description: sensors default=none
        in: query
        name: include
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.ChainDevice'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Get specified device in the mall schema
      tags:
      - malls/devices
  /v2/malls/entrances:
    get:
      description: |-
        get slice of entrances with loc, date, layout_id, floor_id, offset, limit, fields parameters
        layout_id (recommended parameter), if not pass datasource may be not correct
        fields - comma separated values of field names, can be entrance_id,layout_id,floor_id,kind,title...
      parameters:
      - description: uuid/digit format, default=*
        in: query
        name: layout_id
        type: string
      - description: default=*
        in: query
        name: floor_id
        type: string
      - description: default=entrance
        in: query
        name: kind
        type: string
      - description: location, default=ru
        in: query
        name: loc
        type: string
      - description: ISO8601 YYYY-MM-DD date
        in: query
        name: date
        type: string
      - description: comma separated list ids, default=*
        in: query
        name: entrance_ids
        type: string
      - description: default=0
        in: query
        name: offset
        type: integer
      - description: default=20
        in: query
        name: limit
        type: integer
      - description: entrance_id,floor_id,title... default=all
        in: query
        name: fields
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/infra.MallEntrancesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Get all entrances in the mall schema
      tags:
      - malls/entrances
  /v2/malls/entrances/{entrance_id}:
    get:
      description: |-
        get specified entrance with specified, loc, date, fields parameters
        layout_id (recommended parameter), if not pass datasource may be not correct
        fields - comma separated values of field names, can be entrance_id,layout_id,floor_id,kind,title...
      parameters:
      - description: uuid/digit format, default=*
        in: query
        name: layout_id
        type: string
      - description: uuid format
        in: path
        name: entrance_id
        required: true
        type: string
      - description: location, default=ru
        in: query
        name: loc
        type: string
      - description: ISO8601 YYYY-MM-DD date
        in: query
        name: date
        type: string
      - description: entrance_id,floor_id,title... default=all
        in: query
        name: fields
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.MallEntrance'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Get specified entrance in the retail schema
      tags:
      - malls/entrances
  /v2/malls/renters:
    get:
      description: |-
        get slice of renters with loc, date, layout_id, category_id, price_segment_id, contract, offset, limit, fields parameters
        layout_id (recommended parameter), if not pass datasource may be not correct
        fields - comma separated values of field renter_id,title,layout_id,price_segment_id...
      parameters:
      - description: uuid format, default=*
        in: query
        name: layout_id
        required: true
        type: string
      - description: default=*
        in: query
        name: categor_id
        type: string
      - description: default=*
        in: query
        name: price_segment_id
        type: string
      - description: default=*
        in: query
        name: contract
        type: string
      - description: location, default=ru
        in: query
        name: loc
        type: string
      - description: default=0
        in: query
        name: offset
        type: integer
      - description: default=20
        in: query
        name: limit
        type: integer
      - description: renter_id,title,layout_id... default=all
        in: query
        name: fields
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/infra.RentersResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Get all renters in the mall schema
      tags:
      - malls/renters
  /v2/malls/renters/{renter_id}:
    get:
      description: |-
        get renter with loc, date, renter_id, fields parameters
        layout_id (recommended parameter), if not pass datasource may be not correct
        fields - comma separated values of field renter_id,title,layout_id,price_segment_id...
        include - comma separated list of entities, embedded in current, for renters it can be only zones
      parameters:
      - description: uuid format, default=*
        in: query
        name: layout_id
        required: true
        type: string
      - description: uuid/digits format
        in: path
        name: renter_id
        required: true
        type: string
      - description: default=ru
        in: query
        name: loc
        type: string
      - description: ISO8601 YYYY-MM-DD date
        in: query
        name: date
        type: string
      - description: renter_id,title,layout_id... default=all
        in: query
        name: fields
        type: string
      - description: zones default=none
        in: query
        name: include
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Renter'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Get specified renter in the mall schema
      tags:
      - malls/renters
  /v2/malls/zones:
    get:
      description: |-
        get slice of zones with loc, date, layout_id, is_online, is_active, offset, limit, fields parameters
        layout_id (recommended parameter), if not pass datasource may be not correct
        fields - comma separated values of field zone_id,parent_id,layout_id,kind,title...
      parameters:
      - description: default=*
        in: query
        name: layout_id
        type: string
      - description: default=*
        in: query
        name: kind
        type: string
      - description: default=*
        in: query
        name: parent_id
        type: string
      - description: location, default=ru
        in: query
        name: loc
        type: string
      - description: ISO8601 YYYY-MM-DD date
        in: query
        name: date
        type: string
      - description: default=*
        in: query
        name: is_online
        type: string
      - description: default=*
        in: query
        name: is_active
        type: string
      - description: default=0
        in: query
        name: offset
        type: integer
      - description: default=20
        in: query
        name: limit
        type: integer
      - description: zone_id,kind,title... default=all
        in: query
        name: fields
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/infra.MallZonesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Get all zones in the mall schema
      tags:
      - malls/zones
  /v2/malls/zones/{zone_id}:
    get:
      description: |-
        get zone with loc, date, zone_id, fields parameters
        layout_id (recommended parameter), if not pass datasource may be not correct
        fields - comma separated values of field zone_id,parent_id,layout_id,kind,title...
        include - comma separated list of entities, embedded in current, for zone it can be only entrances
      parameters:
      - description: default=*
        in: query
        name: layout_id
        type: string
      - description: uuid/digits format
        in: path
        name: zone_id
        required: true
        type: string
      - description: default=ru
        in: query
        name: loc
        type: string
      - description: ISO8601 YYYY-MM-DD date
        in: query
        name: date
        type: string
      - description: zone_id,kind,title... default=all
        in: query
        name: fields
        type: string
      - description: entrances default=none
        in: query
        name: include
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.MallZone'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Get specified zone in the mall schema
      tags:
      - malls/zones
  /v2/references:
    get:
      consumes:
      - application/json
      description: |-
        get slice of references
        layout_id (recommended parameter), if not pass datasource may be not correct
      parameters:
      - description: uuid format, default=*
        in: path
        name: layout_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Get all references
      tags:
      - reference
  /v2/references/categories:
    get:
      consumes:
      - application/json
      description: |-
        get renter category reference
        layout_id (recommended parameter), if not pass datasource may be not correct
      parameters:
      - description: uuid format, default=*
        in: path
        name: layout_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/reference.RefCategories'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Get renter category reference
      tags:
      - reference
  /v2/references/kindenter:
    get:
      consumes:
      - application/json
      description: |-
        get kind enter reference
        layout_id (recommended parameter), if not pass datasource may be not correct
      parameters:
      - description: uuid format, default=*
        in: path
        name: layout_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/reference.RefPrices'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Get kind enter reference
      tags:
      - reference
  /v2/references/kindzone:
    get:
      consumes:
      - application/json
      description: |-
        get kind zone reference
        layout_id (recommended parameter), if not pass datasource may be not correct
      parameters:
      - description: uuid format, default=*
        in: path
        name: layout_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/reference.RefPrices'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Get kind zone reference
      tags:
      - reference
  /v2/references/prices:
    get:
      consumes:
      - application/json
      description: |-
        get renter price segments reference
        layout_id (recommended parameter), if not pass datasource may be not correct
      parameters:
      - description: uuid format, default=*
        in: path
        name: layout_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/reference.RefPrices'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Get renter price segments reference
      tags:
      - reference
  /v2/reports:
    get:
      description: |-
        Gets early created pdf/xlsx reports
        layout_id (recommended parameter), if not pass datasource may be not correct
        is_sent filter for reports, 1/true = report has been sent
      parameters:
      - description: digit/uuid format
        in: query
        name: layout_id
        type: string
      - description: boolean format false/true/0/1
        in: query
        name: is_sent
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Reports'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Gets early created reports
      tags:
      - reports
  /v2/reports/{report_id}/files:
    get:
      description: |-
        gets early created reports files/items
        layout_id (recommended parameter), if not pass datasource may be not correct
        is_sent filter for reports, 1/true = report has been sent
      parameters:
      - description: digit/uuid format
        in: query
        name: layout_id
        type: string
      - description: digit format
        in: path
        name: report_id
        required: true
        type: string
      - description: boolean format false/true/0/1
        in: query
        name: is_sent
        type: string
      - description: default=0
        in: query
        name: offset
        type: integer
      - description: default=20
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/infra.ReportFilesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Gets early created reports files/items
      tags:
      - reports
  /v2/reports/{report_id}/files/{file_id}:
    get:
      description: |-
        gets report file content
        layout_id (recommended parameter), if not pass datasource may be not correct
      parameters:
      - description: digit/uuid format
        in: query
        name: layout_id
        type: string
      - description: digit format
        in: path
        name: report_id
        required: true
        type: string
      - description: digit format
        in: path
        name: file_id
        required: true
        type: string
      responses:
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Gets report file content
      tags:
      - reports
  /v2/screenshots:
    get:
      description: |-
        get slice of screenshots with layout_id, store_id, zone_id, device_id, status, offset, limit parameters
        fields - comma separated values of field names, can be layout_id,store_id,device_id,url,notes... all of them described in the model
        screenshot_status can be new - default processed - blocked for changes, to_delete - marked for delete, archived - marked for all time store
        from/to can be: YYYY-MM-DDTHH:mm:ss+07:00 or naive YYYY-MM-DD HH:mm:ss then the server's local timezone is applied
      parameters:
      - description: default=*
        in: query
        name: layout_id
        type: string
      - description: default=*
        in: query
        name: store_id
        type: string
      - description: default=*
        in: query
        name: zone_id
        type: string
      - description: default=*
        in: query
        name: device_id
        type: string
      - description: default=*
        in: query
        name: screenshot_status
        type: string
      - description: default=0
        in: query
        name: offset
        type: integer
      - description: default=20
        in: query
        name: limit
        type: integer
      - description: ISO8601 datetime, default begin of day
        in: query
        name: from
        type: string
      - description: ISO8601 datetime, dafault current time
        in: query
        name: to
        type: string
      - description: layout_id,store_id,device_id..default=all
        in: query
        name: fields
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/infra.ScreenshotsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Get screenshots from the storage
      tags:
      - screenshots
    put:
      consumes:
      - application/json
      description: |-
        Updates screenshots status
        example upd screenshots statuses:
        [{
        "device_id": "1234567",
        "screenshot_time": "2020-09-01T00:15:15+03:00",
        "screenshot_status": "to_delete"
        },
        {
        "device_id": "1234568",
        "screenshot_time": "2020-09-01T00:15:15+03:00",
        "screenshot_status": "to_delete"
        }]
      parameters:
      - description: screenshots update status properties
        in: body
        name: params
        required: true
        schema:
          $ref: '#/definitions/domain.ParamsScreenUpd'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/infra.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Updates screenshots status
      tags:
      - screenshots
  /v2/screenshots/attime:
    get:
      description: |-
        get slice of screenshots with layout_id, store_id, zone_id, device_id, at time momen parameters
        fields - comma separated values of field names, can be layout_id,store_id,device_id,url,notes... all of them described in the model
        at can be: YYYY-MM-DDTHH:mm:ss+07:00 or naive YYYY-MM-DD HH:mm:ss then the server's local timezone is applied
      parameters:
      - description: default=*
        in: query
        name: layout_id
        type: string
      - description: default=*
        in: query
        name: store_id
        type: string
      - description: default=*
        in: query
        name: zone_id
        type: string
      - description: default=*
        in: query
        name: device_id
        type: string
      - description: ISO8601 datetime, default=currentMoment-1min accuracy 15s
        in: query
        name: at
        type: string
      - description: layout_id,store_id,device_id..default=all
        in: query
        name: fields
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Screenshots'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/infra.ErrResponse'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/infra.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/infra.ErrResponse'
      summary: Get all screenshots from the storage on the specified time
      tags:
      - screenshots
  /v2/version:
    get:
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/infra.Version'
      summary: Get version info
      tags:
      - health
swagger: "2.0"

// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag at
// 2021-07-26 17:29:56.008128 +0300 MSK m=+0.375308587

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "API Support",
            "url": "https://helpdesk.watcom.ru",
            "email": "1020@watcom.ru"
        },
        "license": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/health": {
            "get": {
                "tags": [
                    "health"
                ],
                "summary": "Healthcheck service eq repository connected",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/infra.SuccessResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            }
        },
        "/v2/chains": {
            "get": {
                "description": "get slice of chains with loc (location), date, offset, limit, fields, include parameters\nlayout_id (recommended parameter), if not pass datasource may be not correct\nfields - comma separated values of field names, can be layout_id,kind,title,languages... all of them described at the model\ninclude - comma separated list of entities, embedded in current, for chain it can be stores",
                "produces": [
                    "application/json",
                    "text/xml"
                ],
                "tags": [
                    "chains"
                ],
                "summary": "Get all chains in the retail schema",
                "parameters": [
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "layout_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "default=0",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "default=20",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=ru",
                        "name": "loc",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ISO8601 YYYY-MM-DD, default=today",
                        "name": "date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "layout_id,title...default=all",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "stores default=none",
                        "name": "include",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/infra.ChainsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "updates a chain with upd_chain parameter\nlayout_id (recommended parameter), if not pass datasource may be not correct\nno_history can be true/false; if true = without save history, if false = save history of changes\nvalid_from set if need save history for specified date\nexample upd_chain:\n{\n\"layout_id\": \"970195a2-e722-4222-94b9-c5266d37b1b8\",\n\"crm_key\": \"code 1C\",\n\"notes\": \"{\\\\\"ru\\\\\":\\\\\"описание/комментарии на русском языке\\\\\",\\\\\"en\\\\\":\\\\\"Comments/notes in English\\\\\"}\",\n\"title\": \"{\\\\\"ru\\\\\":\\\\\"Новое наименование сети на русском языке\\\\\",\\\\\"en\\\\\":\\\\\"New chain name in English\\\\\"}\",\n\"valid_from\": \"2020-06-19T00:00:00+03:00\",\n\"no_history\":false\n}",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chains"
                ],
                "summary": "Update exists chain in the retail schema",
                "parameters": [
                    {
                        "type": "string",
                        "description": "uuid format, default=*",
                        "name": "layout_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "chain properties",
                        "name": "chain",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/infra.UpdChain"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/infra.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "create new chain in the retail schema\nlayout_id (recommended parameter), if not pass datasource may be not correct\nexample new chain:\n{\n\"brands\": \"{\\\\\"ru\\\\\":[\\\\\"Брэнд1\\\\\",\\\\\"Брэнд2\\\\\"], \\\\\"en\\\\\":[\\\\\"Brand1\\\\\",\\\\\"Brand2\\\\\"]}\",\n\"creator\": \"username of creator\",\n\"crm_key\": \"code 1C\",\n\"currency\": \"rub/usd/eur...\",\n\"kind\": \"chain\",\n\"languages\": \"[\\\\\"ru\\\\\",\\\\\"en\\\\\"]\",\n\"notes\": \"{\\\\\"ru\\\\\":\\\\\"описание/комментарии на русском языке\\\\\",\\\\\"en\\\\\":\\\\\"Comments/notes in English\\\\\"}\",\n\"options\": \"{}\",\n\"read_only\": false,\n\"title\": \"{\\\\\"ru\\\\\":\\\\\"Наименование сети на русском языке\\\\\",\\\\\"en\\\\\":\\\\\"Chain name in English\\\\\"}\",\n\"valid_from\": \"2020-04-01T00:00:00+03:00\"\n}\nvalid_to можно указать когда заранее известна дата изменения состояния сети и ее атрибутов",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chains"
                ],
                "summary": "Create new chain in the retail schema",
                "parameters": [
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "layout_id",
                        "in": "query"
                    },
                    {
                        "description": "chain properties",
                        "name": "chain",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/infra.NewChain"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/infra.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            }
        },
        "/v2/chains/devices": {
            "get": {
                "description": "get slice of devices with loc, date, layout_id, store_id, kind, is_active, dc_mode, mode, sn, offset, limit, fields parameters\nlayout_id (recommended parameter), if not pass datasource may be not correct\nfields - comma separated values of field names, can be device_id,layout_id,store_id,master_id,kind,title... all of them described at the model\ninclude - comma separated list of entities, embedded in current, for devices it can be sensors,delay",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chains/devices"
                ],
                "summary": "Get all chains devices in the retail schema",
                "parameters": [
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "layout_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "store_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "kind",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "is_active",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "dc_mode",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "mode",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "sn",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=ru",
                        "name": "loc",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ISO8601 YYYY-MM-DD date",
                        "name": "date",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "default=0",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "default=20",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "device_id,kind,title... default=all",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "sensors,delay default=none",
                        "name": "include",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/infra.ChainDevicesResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "update exists device in the retail schema\nvalid_from set if need save history for specified date\nlayout_id (recommended parameter), if not pass datasource may be not correct\nexample upd device, device_id must to be pass in parameters:\n{\n\"device_id\": \"8056fa1e-b63e-4d37-b014-744c4246621b\",\n\"dcmode\": \"active\",\n\"ip\": \"98.99.100.101\",\n\"is_active\": true,\n\"kind\": \"device.3dv\",\n\"login\": \"admin\",\n\"mode\": \"single\",\n\"notes\": \"{\\\\\"ru\\\\\":\\\\\"описание/комментарии на русском языке\\\\\",\\\\\"en\\\\\":\\\\\"Comments/notes in English\\\\\"}\",\n\"options\": \"{\\\\\"localIP\\\\\":\\\\\"192.168.0.10\\\\\", \\\\\"localPort\\\\\": 80}\",\n\"password\": \"passW0rd\",\n\"port\": \"8080\",\n\"sn\": \"00:00:00:00:11:22\",\n\"title\": \"{\\\\\"ru\\\\\":\\\\\"Наименование Устройства на русском языке\\\\\",\\\\\"en\\\\\":\\\\\"Device name in English\\\\\"}\",\n\"valid_from\": \"2020-04-01T00:00:00+03:00\",\n\"no_history\":true\n}",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chains/devices"
                ],
                "summary": "Update device in the retail schema",
                "parameters": [
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "layout_id",
                        "in": "query"
                    },
                    {
                        "description": "device properties",
                        "name": "device",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/infra.UpdChainDevice"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/infra.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "create new device in the retail schema\nexample new device, layout_id and store_id must exists in the database:\n{\n\"creator\": \"username\",\n\"dcmode\": \"active\",\n\"ip\": \"98.99.100.101\",\n\"is_active\": true,\n\"kind\": \"device.3dv\",\n\"layout_id\": \"8056fa1e-b63e-4d37-b014-744c4246621b\",\n\"login\": \"admin\",\n\"mode\": \"single\",\n\"notes\": \"{\\\\\"ru\\\\\":\\\\\"описание/комментарии на русском языке\\\\\",\\\\\"en\\\\\":\\\\\"Comments/notes in English\\\\\"}\",\n\"options\": \"{\\\\\"localIP\\\\\":\\\\\"192.168.0.10\\\\\", \\\\\"localPort\\\\\": 80}\",\n\"password\": \"passW0rd\",\n\"port\": \"8080\",\n\"sn\": \"00:00:00:00:11:22\",\n\"store_id\": \"29587d9a-05d3-4d2c-a974-f2c11fcb30fa\",\n\"title\": \"{\\\\\"ru\\\\\":\\\\\"Наименование Устройства на русском языке\\\\\",\\\\\"en\\\\\":\\\\\"Device name in English\\\\\"}\",\n\"valid_from\": \"2020-04-01T00:00:00+03:00\"\n}",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chains/devices"
                ],
                "summary": "Create new device in the retail schema",
                "parameters": [
                    {
                        "description": "device properties",
                        "name": "device",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/infra.NewChainDevice"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/infra.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            }
        },
        "/v2/chains/devices/tracks": {
            "get": {
                "description": "get device customer tracks in the retail schema\nlayout_id (recommended parameter), if not pass datasource may be not correct",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chains/devices"
                ],
                "summary": "Get device customer tracks",
                "parameters": [
                    {
                        "type": "string",
                        "description": "digit/uuid format",
                        "name": "layout_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "digit/uuid format",
                        "name": "store_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "digit/uuid format",
                        "name": "device_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ISO8601 YYYY-MM-DD HH:mm:SS timestamp default=start today",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ISO8601 YYYY-MM-DD HH:mm:SS timestamp default=current time",
                        "name": "to",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "default=0",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "default=20",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/infra.ChainDeviceTracksResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            }
        },
        "/v2/chains/devices/tracks/attime": {
            "get": {
                "description": "get device customer tracks at time moment with specified accuracy in the retail schema\nlayout_id (recommended parameter), if not pass datasource may be not correct",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chains/devices"
                ],
                "summary": "Get device customer tracks at time moment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "digit/uuid format",
                        "name": "layout_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "digit/uuid format",
                        "name": "store_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "digit/uuid format",
                        "name": "device_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "1s,5s,15s golang time.Duration format, default=1s",
                        "name": "accuracy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ISO8601 timestamp default=current moment",
                        "name": "at",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.Tracks"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            }
        },
        "/v2/chains/devices/{device_id}": {
            "get": {
                "description": "get device with loc, date, device_id, fields parameters from retail schema\nlayout_id (recommended parameter), if not pass datasource may be not correct\nfields - comma separated values of field names, can be device_id,layout_id...\nall of them described at the model\ninclude - comma separated list of entities, embedded in current, for devices it can be sensors",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chains/devices"
                ],
                "summary": "Get specified device in the retail schema",
                "parameters": [
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "layout_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "uuid format",
                        "name": "device_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "location, default=ru",
                        "name": "loc",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ISO8601 YYYY-MM-DD date",
                        "name": "date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "device_id,kind,title... default=all",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "sensors default=none",
                        "name": "include",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.ChainDevice"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete specified device in the retail schema by device_id parameter\nlayout_id (recommended parameter), if not pass datasource may be not correct",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chains/devices"
                ],
                "summary": "Delete specified device in the retail schema",
                "parameters": [
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "layout_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "uuid format",
                        "name": "device_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/infra.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            }
        },
        "/v2/chains/entrances": {
            "get": {
                "description": "get slice of entrances with loc, date, layout_id, store_id, offset, limit, fields parameters\nlayout_id (recommended parameter), if not pass datasource may be not correct\nentrance_ids comma separated list entrance ids\nfields - comma separated values of field names, can be entrance_id,layout_id,store_id,kind,title",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chains/entrances"
                ],
                "summary": "Get all entrances in the retail schema",
                "parameters": [
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "layout_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "store_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "comma separated list ids, default=*",
                        "name": "entrance_ids",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=entrance",
                        "name": "kind",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "location, default=ru",
                        "name": "loc",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ISO8601 YYYY-MM-DD date",
                        "name": "date",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "default=0",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "default=20",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "entrance_id,store_id,title... default=all",
                        "name": "fields",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/infra.ChainEntrancesResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "update exists entrance in the retail schema\nno_history can be true/false; if true = without save history, if false = save history of changes, default = false\nvalid_from set if need save history for specified date\nlayout_id (recommended parameter), if not pass datasource may be not correct\nexample upd entrance, entrance_id must to be pass in parameters:\n{\n\"entrance_id\": \"29587d9a-05d3-4d2c-a974-f2c11fcb30fa\",\n\"kind\": \"entrance\",\n\"notes\": \"{\\\\\"ru\\\\\":\\\\\"описание/комментарии на русском языке\\\\\",\\\\\"en\\\\\":\\\\\"Comments/notes in English\\\\\"}\",\n\"options\": \"{}\",\n\"title\": \"{\\\\\"ru\\\\\":\\\\\"Наименование Входа на русском языке\\\\\",\\\\\"en\\\\\":\\\\\"Entrance name in English\\\\\"}\",\n\"valid_from\": \"2020-06-09T00:00:00+03:00\",\n\"no_history\":true\n}",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chains/entrances"
                ],
                "summary": "Update entrance",
                "parameters": [
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "layout_id",
                        "in": "query"
                    },
                    {
                        "description": "upd_entrance properties",
                        "name": "upd_entrance",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/infra.UpdChainEntrance"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/infra.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "creates new entrance\nexample new entrance, layout_id and store_id must exists in the database:\n{\n\"creator\": \"username\",\n\"kind\": \"entrance\",\n\"layout_id\": \"8056fa1e-b63e-4d37-b014-744c4246621b\",\n\"notes\": \"{\\\\\"ru\\\\\":\\\\\"описание/комментарии на русском языке\\\\\",\\\\\"en\\\\\":\\\\\"Comments/notes in English\\\\\"}\",\n\"options\": \"{}\",\n\"store_id\": \"29587d9a-05d3-4d2c-a974-f2c11fcb30fa\",\n\"title\": \"{\\\\\"ru\\\\\":\\\\\"Наименование Входа на русском языке\\\\\",\\\\\"en\\\\\":\\\\\"Entrance name in English\\\\\"}\",\n\"valid_from\": \"2020-04-01T00:00:00+03:00\"\n}",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chains/entrances"
                ],
                "summary": "Create new entrance in the retail schema",
                "parameters": [
                    {
                        "description": "entrance properties",
                        "name": "store",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/infra.NewChainEntrance"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/infra.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            }
        },
        "/v2/chains/entrances/bindto/store": {
            "put": {
                "description": "update binding entrance to store in the retail schema\nvalid_from set if need save history for specified date\nlayout_id (recommended parameter), if not pass datasource may be not correct\nexample upd binding old_store_id is exists binding store, new_store_id is target store\nand entrance_id must to be pass in parameters:\n{\n\"entrance_id\": \"3595c9ad-8116-408e-a007-ec31d48f9669\",\n\"old_store_id\": \"3595c9ad-8116-408e-a007-ec31d48f9669\",\n\"new_store_id\": \"3595c9ad-8116-408e-a007-ec31d48f9667\",\n\"direction\": \"forward\",\n\"options\": \"{}\",\n\"valid_from\": \"2020-04-01T00:00:00+03:00\",\n\"no_history\":true\n}",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chains/entrances"
                ],
                "summary": "Update binding entrance to store in the retail schema",
                "parameters": [
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "layout_id",
                        "in": "query"
                    },
                    {
                        "description": "entrance bind to store parameters",
                        "name": "params",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/infra.UpdBindingChainEntranceStore"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/infra.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "create new binding entrance to store in the retail schema\nlayout_id (recommended parameter), if not pass datasource may be not correct\nexample new binding entrance entrance_id and store_id must exists in the database:\n{\n\"creator\": \"username\",\n\"direction\": \"forward\",\n\"entrance_id\": \"6fce2865-4b81-45ae-bdb6-9130a365b2b5\",\n\"kind_store\": \"store\",\n\"store_id\": \"29587d9a-05d3-4d2c-a974-f2c11fcb30fa\",\n\"valid_from\": \"2020-04-01T00:00:00+03:00\",\n\"options\": \"{}\"\n}",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chains/entrances"
                ],
                "summary": "Create new binding entrance to store in the retail schema",
                "parameters": [
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "layout_id",
                        "in": "query"
                    },
                    {
                        "description": "sensor bind entrance properties",
                        "name": "params",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.BindingChainEntranceStore"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/infra.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete binding entrance to store in the retail schema\nlayout_id (recommended parameter), if not pass datasource may be not correct",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chains/entrances"
                ],
                "summary": "Delete binding entrance to store in the retail schema",
                "parameters": [
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "layout_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "uuid format",
                        "name": "entrance_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "uuid format",
                        "name": "store_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/infra.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            }
        },
        "/v2/chains/entrances/bindto/zone": {
            "put": {
                "description": "update binding entrance to zone in the retail schema\nlayout_id (recommended parameter), if not pass datasource may be not correct\nvalid_from set if need save history for specified date\nexample upd binding old_zone_id is exists binding zone, new_zone_id is target zone\nand entrance_id must to be pass in parameters:\n{\n\"entrance_id\": \"3595c9ad-8116-408e-a007-ec31d48f9669\",\n\"old_zone_id\": \"3595c9ad-8116-408e-a007-ec31d48f9669\",\n\"new_zone_id\": \"3595c9ad-8116-408e-a007-ec31d48f9667\",\n\"direction\": \"forward\",\n\"options\": \"{}\",\n\"valid_from\": \"2020-04-01T00:00:00+03:00\",\n\"no_history\":true\n}",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chains/entrances"
                ],
                "summary": "Update binding entrance to zone in the retail schema",
                "parameters": [
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "layout_id",
                        "in": "query"
                    },
                    {
                        "description": "entrance bind to zone parameters",
                        "name": "params",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/infra.UpdBindingChainEntranceZone"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/infra.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "create new binding entrance to zone in the retail schema\nlayout_id (recommended parameter), if not pass datasource may be not correct\nexample new binding entrance, entrance_id and zone_id must exists in the database:\n{\n\"creator\": \"username\",\n\"direction\": \"forward\",\n\"entrance_id\": \"6fce2865-4b81-45ae-bdb6-9130a365b2b5\",\n\"kind_zone\": \"zone\",\n\"options\": \"{}\",\n\"valid_from\": \"2020-04-01T00:00:00+03:00\",\n\"zone_id\": \"9ea85f05-f02f-4b70-a464-ab85273471b7\"\n}",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chains/entrances"
                ],
                "summary": "Create new binding entrance to zone in the retail schema",
                "parameters": [
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "layout_id",
                        "in": "query"
                    },
                    {
                        "description": "entrance bind to zone parameters",
                        "name": "params",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.BindingChainEntranceZone"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/infra.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "layout_id (recommended parameter), if not pass datasource may be not correct\ndelete binding entrance to zone in the retail schema",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chains/entrances"
                ],
                "summary": "Delete binding entrance to zone in the retail schema",
                "parameters": [
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "layout_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "uuid format",
                        "name": "entrance_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "uuid format",
                        "name": "zone_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/infra.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            }
        },
        "/v2/chains/entrances/{entrance_id}": {
            "get": {
                "description": "get specified entrance with specified, loc, date, fields parameters\nlayout_id (recommended parameter), if not pass datasource may be not correct\nfields - comma separated values of field names, can be entrance_id,layout_id,store_id,kind,title",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chains/entrances"
                ],
                "summary": "Get specified entrance in the retail schema",
                "parameters": [
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "layout_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "uuid format",
                        "name": "entrance_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "location, default=ru",
                        "name": "loc",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ISO8601 YYYY-MM-DD date",
                        "name": "date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "entrance_id,store_id,title... default=all",
                        "name": "fields",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.ChainEntrance"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "layout_id (recommended parameter), if not pass datasource may be not correct\ndelete entrance by entrance_id parameter",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chains/entrances"
                ],
                "summary": "Delete specified entrance in the retail schema",
                "parameters": [
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "layout_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "uuid format",
                        "name": "entrance_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/infra.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            }
        },
        "/v2/chains/events": {
            "get": {
                "description": "get slice of events with layout_id, store_id, key, kind, severity; from - to datetime range and offset, limit parameters\nkey can be: queue.threshold.exceeded, ...\nkind can be: business, system, user\nseverity can be: info, warn, alarm\nfrom/to can be: YYYY-MM-DDTHH:mm:ss+07:00 or naive YYYY-MM-DD HH:mm:ss then the server's local timezone is applied\nfields - comma separated values of field names, can be id,key,event_time,kind,message,severity,layout_id,store_id,source,creator,created_at... all of them described at the model",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chains/events"
                ],
                "summary": "Get all events for the retail schema",
                "parameters": [
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "layout_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "store_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "key",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "kind",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "severity",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ISO8601 datetime, default begin of day",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ISO8601 datetime, dafault current time",
                        "name": "to",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "default=0",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "default=20",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "id,key,event_time,kind... default=id,key,event_time,message,layout_id,store_id",
                        "name": "fields",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/infra.ChainEventsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            }
        },
        "/v2/chains/sensors": {
            "get": {
                "description": "get slice of sensors with loc, date, layout_id, store_id, device_id, kind, offset, limit, fields parameters\nlayout_id (recommended parameter), if not pass datasource may be not correct\nfields - comma separated values of field names, can be sensor_id,device_id,layout_id,store_id,external_id,kind,title... all of them described at the model",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chains/sensors"
                ],
                "summary": "Get all sensors in the retail schema",
                "parameters": [
                    {
                        "type": "string",
                        "description": "uuid format, default=*",
                        "name": "layout_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "uuid format, default=*",
                        "name": "store_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "uuid format, default=*",
                        "name": "device_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "kind",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=ru",
                        "name": "loc",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ISO8601 YYYY-MM-DD date",
                        "name": "date",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "default=0",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "default=20",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "sensor_id,external_id,kind... default=all",
                        "name": "fields",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/infra.ChainSensorsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "update exists sensor\nlayout_id (recommended parameter), if not pass datasource may be not correct\nvalid_from set if need save history for specified date\nexample upd sensor, sensor_id must to be pass in parameters:\n{\n\"sensor_id\": \"8056fa1e-b63e-4d37-b014-744c4246621b\",\n\"external_id\":\"Rule-2\",\n\"kind\": \"sensor.people_count\",\n\"notes\": \"{\\\\\"ru\\\\\":\\\\\"описание/комментарии на русском языке\\\\\",\\\\\"en\\\\\":\\\\\"Comments/notes in English\\\\\"}\",\n\"options\": \"{\\\\\"localIP\\\\\":\\\\\"192.168.0.10\\\\\", \\\\\"localPort\\\\\": 80}\",\n\"title\": \"{\\\\\"ru\\\\\":\\\\\"Наименование сенсора на русском языке\\\\\",\\\\\"en\\\\\":\\\\\"Sensor name in English\\\\\"}\",\n\"valid_from\": \"2020-04-01T00:00:00+03:00\",\n\"no_history\":true\n}",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chains/sensors"
                ],
                "summary": "Update sensor in the retail schema",
                "parameters": [
                    {
                        "type": "string",
                        "description": "uuid format, default=*",
                        "name": "layout_id",
                        "in": "query"
                    },
                    {
                        "description": "sensor properties",
                        "name": "sensor",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/infra.UpdChainSensor"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/infra.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "create new sensor in the retail schema\nlayout_id (recommended parameter), if not pass datasource may be not correct\nexample new sensor, layout_id, device_id and store_id must exists in the database:\n{\n\"creator\": \"username\",\n\"device_id\": \"47cbe28b-5370-4721-986e-468a2a0c9b87\",\n\"external_id\": \"Rule-1\",\n\"kind\": \"sensor.people_count\",\n\"layout_id\": \"8056fa1e-b63e-4d37-b014-744c4246621b\",\n\"notes\": \"{\\\\\"ru\\\\\":\\\\\"описание/комментарии на русском языке\\\\\",\\\\\"en\\\\\":\\\\\"Comments/notes in English\\\\\"}\",\n\"store_id\": \"29587d9a-05d3-4d2c-a974-f2c11fcb30fa\",\n\"title\": \"{\\\\\"ru\\\\\":\\\\\"Наименование Сенсора на русском языке\\\\\",\\\\\"en\\\\\":\\\\\"Sensor name in English\\\\\"}\",\n\"valid_from\": \"2020-04-01T00:00:00+03:00\",\n\"options\": \"{}\"\n}",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chains/sensors"
                ],
                "summary": "Create new sensor in the retail schema",
                "parameters": [
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "layout_id",
                        "in": "query"
                    },
                    {
                        "description": "sensor properties",
                        "name": "sensor",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/infra.NewChainSensor"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/infra.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            }
        },
        "/v2/chains/sensors/bindto/entrance": {
            "put": {
                "description": "update exists binding sensor to new entrance in retail schema\nlayout_id (recommended parameter), if not pass datasource may be not correct\nexample upd binding old_entrance_id is exists binding entrance, new_entrance_id is target entrance\nvalid_from set if need save history for specified date\nand sensor_id must to be pass in parameters:\n{\n\"sensor_id\": \"3595c9ad-8116-408e-a007-ec31d48f9669\",\n\"old_entrance_id\": \"3595c9ad-8116-408e-a007-ec31d48f9669\",\n\"new_entrance_id\": \"3595c9ad-8116-408e-a007-ec31d48f9667\",\n\"direction\": \"forward\",\n\"k_in\": 1.0,\n\"k_out\": 1.0,\n\"options\": \"{}\",\n\"valid_from\": \"2020-04-01T00:00:00+03:00\",\n\"no_history\":true\n}",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chains/sensors"
                ],
                "summary": "Update binding sensor to entrance in the retail schema",
                "parameters": [
                    {
                        "type": "string",
                        "description": "uuid format, default=*",
                        "name": "layout_id",
                        "in": "query"
                    },
                    {
                        "description": "sensor upd bind entrance properties",
                        "name": "params",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/infra.UpdBindingChainSensorEntrance"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/infra.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "create new binding sensor to entrance in the retail schema\nlayout_id (recommended parameter), if not pass datasource may be not correct\nexample new binding sensor, entrance_id and sensor_id must exists in the database:\n{\n\"creator\": \"username\",\n\"direction\": \"forward\",\n\"entrance_id\": \"3595c9ad-8116-408e-a007-ec31d48f9669\",\n\"k_in\": 1.0,\n\"k_out\": 1.0,\n\"kind_entrance\": \"entrance\",\n\"options\": \"{}\",\n\"sensor_id\": \"9070be58-b4bf-467a-be64-6077edbd9867\",\n\"valid_from\": \"2020-04-01T00:00:00+03:00\"\n}",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chains/sensors"
                ],
                "summary": "Create new binding sensor to entrance in the retail schema",
                "parameters": [
                    {
                        "type": "string",
                        "description": "uuid format, default=*",
                        "name": "layout_id",
                        "in": "query"
                    },
                    {
                        "description": "sensor bind entrance properties",
                        "name": "params",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.BindingChainSensorEntrance"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/infra.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete binding sensor to entrance in the retail schema\nlayout_id (recommended parameter), if not pass datasource may be not correct",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chains/sensors"
                ],
                "summary": "Delete binding sensor to entrance in the retail schema",
                "parameters": [
                    {
                        "type": "string",
                        "description": "uuid format, default=*",
                        "name": "layout_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "uuid format",
                        "name": "sensor_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "uuid format",
                        "name": "entrance_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/infra.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            }
        },
        "/v2/chains/sensors/bindto/zone": {
            "get": {
                "description": "get binding sensors to zones in the retail schema\nlayout_id (recommended parameter), if not pass datasource may be not correct",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chains/sensors"
                ],
                "summary": "Get binding sensors to zones in the retail schema",
                "parameters": [
                    {
                        "type": "string",
                        "description": "uuid format, default=*",
                        "name": "layout_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "uuid/digits format",
                        "name": "zone_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "uuid/digits format",
                        "name": "sensor_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/infra.ChainBindSensorZoneResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "update exists binding sensor to new zone in retail schema\nlayout_id (recommended parameter), if not pass datasource may be not correct\nexample upd binding old_zone_id is exists binding zone, new_zone_id is target zone\nvalid_from set if need save history for specified date\nand sensor_id must to be pass in parameters:\n{\n\"sensor_id\": \"3595c9ad-8116-408e-a007-ec31d48f9669\",\n\"old_zone_id\": \"3595c9ad-8116-408e-a007-ec31d48f9669\",\n\"new_zone_id\": \"3595c9ad-8116-408e-a007-ec31d48f9667\",\n\"options\": \"{}\",\n\"valid_from\": \"2020-04-01T00:00:00+03:00\",\n\"no_history\":true\n}",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chains/sensors"
                ],
                "summary": "Update binding sensor to zone in the retail schema",
                "parameters": [
                    {
                        "type": "string",
                        "description": "uuid format, default=*",
                        "name": "layout_id",
                        "in": "query"
                    },
                    {
                        "description": "sensor upd bind entrance properties",
                        "name": "params",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/infra.UpdBindingChainSensorZone"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/infra.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "create new binding sensor to zone in the retail schema\nlayout_id (recommended parameter), if not pass datasource may be not correct\nexample new binding sensor, zone_id and sensor_id must exists in the database:\n{\n\"creator\": \"username\",\n\"kind_zone\": \"zone\",\n\"options\": \"{}\",\n\"sensor_id\": \"9070be58-b4bf-467a-be64-6077edbd9867\",\n\"zone_id\": \"2b076f28-c5d1-4fba-8b3b-2f58cba07c07\",\n\"valid_from\": \"2020-04-01T00:00:00+03:00\"\n}",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chains/sensors"
                ],
                "summary": "Create new binding sensor to zone in the retail schema",
                "parameters": [
                    {
                        "type": "string",
                        "description": "uuid format, default=*",
                        "name": "layout_id",
                        "in": "query"
                    },
                    {
                        "description": "sensor bind zone properties",
                        "name": "params",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.BindingChainSensorZone"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/infra.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete binding sensor to zone in the retail schema\nlayout_id (recommended parameter), if not pass datasource may be not correct",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chains/sensors"
                ],
                "summary": "Delete binding sensor to zone in the retail schema",
                "parameters": [
                    {
                        "type": "string",
                        "description": "uuid format, default=*",
                        "name": "layout_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "uuid format",
                        "name": "sensor_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "uuid format",
                        "name": "zone_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/infra.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            }
        },
        "/v2/chains/sensors/{sensor_id}": {
            "get": {
                "description": "get sensor with loc, date, sensor_id parameters from retail schema\nlayout_id (recommended parameter), if not pass datasource may be not correct\nfields - comma separated values of field names, can be sensor_id,device_id,layout_id,store_id,external_id,kind,title... all of them described at the model",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chains/sensors"
                ],
                "summary": "Get specified sensor in the retail schema",
                "parameters": [
                    {
                        "type": "string",
                        "description": "uuid format, default=*",
                        "name": "layout_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "uuid format",
                        "name": "sensor_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "default=ru",
                        "name": "loc",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ISO8601 YYYY-MM-DD date",
                        "name": "date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "sensor_id,external_id,kind... default=all",
                        "name": "fields",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.ChainSensor"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete specified sensor by sensor_id parameter in the retail schema\nlayout_id (recommended parameter), if not pass datasource may be not correct",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chains/sensors"
                ],
                "summary": "Delete specified sensor in the retail schema",
                "parameters": [
                    {
                        "type": "string",
                        "description": "uuid format, default=*",
                        "name": "layout_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "uuid format",
                        "name": "sensor_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/infra.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            }
        },
        "/v2/chains/stores": {
            "get": {
                "description": "get slice of stores with loc, date, layout_id, crm_key, offset, limit, fields, include parameters\nlayout_id (recommended parameter), if not pass datasource may be not correct\nstore_ids - comma separated list of the store's ids, default *\nfields - comma separated values of field names, can be store_id,layout_id,kind,title...\nall of them described at the model\ninclude - comma separated list of entities, embedded in current,\nfor store it can be entrances,zones,devices",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chains/stores"
                ],
                "summary": "Get all stores in the retail schema",
                "parameters": [
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "layout_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "store_ids",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "crm_key",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=ru",
                        "name": "loc",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ISO8601 YYYY-MM-DD date",
                        "name": "date",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "default=0",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "default=20",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "store_id,title... default=all",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "entrances,zones,devices default=none",
                        "name": "include",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/infra.ChainStoresResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "update a store with upd_store parameter\nlayout_id (recommended parameter), if not pass datasource may be not correct\nno_history can be true/false; if true = without save history, if false = save history of changes\nvalid_from set if need save history for specified date\nexample, store_id must to exists\n{\n\"store_id\": \"29587d9a-05d3-4d2c-a974-f2c11fcb30fa\",\n\"area\": 109.94,\n\"crm_key\": \"code1s for store\",\n\"options\": \"{\\\\\"tz\\\\\":3}\",\n\"title\": \"{\\\\\"ru\\\\\":\\\\\"Наименование Магазина на русском языке\\\\\",\\\\\"en\\\\\":\\\\\"Store name in English\\\\\"}\",\n\"valid_from\": \"2020-04-01T00:00:00+03:00\",\n\"no_history\": true\n}",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chains/stores"
                ],
                "summary": "Update store in the retail schema",
                "parameters": [
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "layout_id",
                        "in": "query"
                    },
                    {
                        "description": "upd_store properties",
                        "name": "store",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/infra.UpdChainStore"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/infra.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "create new store in the retail schema\nlayout_id (recommended parameter), if not pass datasource may be not correct\nexample, use layout_id for exists layout\n{\n\"area\": 109.94,\n\"brands\": \"{\\\\\"ru\\\\\":[\\\\\"Брэнд1\\\\\"], \\\\\"en\\\\\":[\\\\\"Brand1\\\\\"]}\",\n\"creator\": \"username\",\n\"crm_key\": \"code1s for store\",\n\"currency\": \"rub\",\n\"kind\": \"store\",\n\"layout_id\": \"8056fa1e-b63e-4d37-b014-744c4246621b\",\n\"notes\": \"{\\\\\"ru\\\\\":\\\\\"описание/комментарии на русском языке\\\\\",\\\\\"en\\\\\":\\\\\"Comments/notes in English\\\\\"}\",\n\"options\": \"{\\\\\"tz\\\\\":3}\",\n\"title\": \"{\\\\\"ru\\\\\":\\\\\"Наименование Магазина на русском языке\\\\\",\\\\\"en\\\\\":\\\\\"Store name in English\\\\\"}\",\n\"valid_from\": \"2020-04-01T00:00:00+03:00\"\n}",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chains/stores"
                ],
                "summary": "Create new store in the retail schema",
                "parameters": [
                    {
                        "type": "string",
                        "description": "uuid format, default=*",
                        "name": "layout_id",
                        "in": "query"
                    },
                    {
                        "description": "store properties",
                        "name": "store",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/infra.NewChainStore"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/infra.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            }
        },
        "/v2/chains/stores/{store_id}": {
            "get": {
                "description": "get store with loc(ation), date, store_id, fields parameters\nlayout_id (recommended parameter), if not pass datasource may be not correct\nfields - comma separated values of field names,\ncan be store_id,layout_id,kind,title... all of them described at the model\ninclude - comma separated list of entities,\nembedded in current, for store it can be entrances,zones,devices",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chains/stores"
                ],
                "summary": "Get specified store in the retail schema",
                "parameters": [
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "layout_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "uuid format",
                        "name": "store_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "default=ru",
                        "name": "loc",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ISO8601 YYYY-MM-DD date",
                        "name": "date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "store_id,title... default=all",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "entrances,zones,devices default=none",
                        "name": "include",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.ChainStore"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete store by store_id parameter\nlayout_id (recommended parameter), if not pass datasource may be not correct",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chains/stores"
                ],
                "summary": "Delete specified store in the retail schema",
                "parameters": [
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "layout_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "uuid format",
                        "name": "store_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/infra.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            }
        },
        "/v2/chains/zones": {
            "get": {
                "description": "get slice of zones with loc, date, layout_id, store_id, is_online, is_active, offset, limit, fields parameters\nlayout_id (recommended parameter), if not pass datasource may be not correct\nfields - comma separated values of field zone_id,parent_id,layout_id,store_id,kind,title... all of them described at the model",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chains/zones"
                ],
                "summary": "Get all zones in the retail schema",
                "parameters": [
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "layout_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "store_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "kind",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "location, default=ru",
                        "name": "loc",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ISO8601 YYYY-MM-DD date",
                        "name": "date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "is_online",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "is_active",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "default=0",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "default=20",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "zone_id,kind,title... default=all",
                        "name": "fields",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/infra.ChainZonesResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "update exists zone in the retail schema\nlayout_id (recommended parameter), if not pass datasource may be not correct\nno_history can be true/false; if true = without save history, if false = save history of changes, default = false\nvalid_from set if need save history for specified date\nexample upd zone, zone_id must to be pass in parameters:\n{\n\"zone_id\": \"29587d9a-05d3-4d2c-a974-f2c11fcb30fa\",\n\"kind\": \"zone\",\n\"notes\": \"{\\\\\"ru\\\\\":\\\\\"описание/комментарии на русском языке\\\\\",\\\\\"en\\\\\":\\\\\"Comments/notes in English\\\\\"}\",\n\"options\": \"{}\",\n\"title\": \"{\\\\\"ru\\\\\":\\\\\"Наименование Зоны на русском языке\\\\\",\\\\\"en\\\\\":\\\\\"Zone name in English\\\\\"}\",\n\"valid_from\": \"2020-06-09T00:00:00+03:00\",\n\"no_history\":true\n}",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chains/zones"
                ],
                "summary": "Update zone in the retail schema",
                "parameters": [
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "layout_id",
                        "in": "query"
                    },
                    {
                        "description": "zone properties",
                        "name": "zone",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/infra.UpdChainZone"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/infra.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "creates new zone in the retail schema\nlayout_id (recommended parameter), if not pass datasource may be not correct\nexample new zone, layout_id and store_id must exists in the database:\n{\n\"creator\": \"username\",\n\"kind\": \"zone\",\n\"layout_id\": \"8056fa1e-b63e-4d37-b014-744c4246621b\",\n\"notes\": \"{\\\\\"ru\\\\\":\\\\\"описание/комментарии на русском языке\\\\\",\\\\\"en\\\\\":\\\\\"Comments/notes in English\\\\\"}\",\n\"options\": \"{\\\\\"is_online\\\\\":1,\\\\\"borders\\\\\":[{\\\\\"title\\\\\":\\\\\"lowlevel\\\\\",\\\\\"low\\\\\":0,\\\\\"high\\\\\":37,\\\\\"color\\\\\":\\\\\"#008000\\\\\"},{\\\\\"title\\\\\":\\\\\"middle\\\\\",\\\\\"low\\\\\":37,\\\\\"high\\\\\":52,\\\\\"color\\\\\":\\\\\"#FFFF80\\\\\"},{\\\\\"title\\\\\":\\\\\"high\\\\\",\\\\\"low\\\\\":52,\\\\\"high\\\\\":70,\\\\\"color\\\\\":\\\\\"#FF0000\\\\\"}]}\",\n\"store_id\": \"29587d9a-05d3-4d2c-a974-f2c11fcb30fa\",\n\"title\": \"{\\\\\"ru\\\\\":\\\\\"Наименование Зоны на русском языке\\\\\",\\\\\"en\\\\\":\\\\\"Zone name in English\\\\\"}\",\n\"valid_from\": \"2020-04-01T00:00:00+03:00\"\n}",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chains/zones"
                ],
                "summary": "Create new zone in the retail schema",
                "parameters": [
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "layout_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "zone properties",
                        "name": "zone",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/infra.NewChainZone"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/infra.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            }
        },
        "/v2/chains/zones/states": {
            "get": {
                "description": "get the zones states changes for zones with kind=service_channel, returns states online/offline\nlayout_id (recommended parameter), if not pass datasource may be not correct",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chains/zones"
                ],
                "summary": "Get zones (service_channel) states",
                "parameters": [
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "layout_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "store_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "zone_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "default=0",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "default=20",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ISO8601 datetime, default begin of day",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ISO8601 datetime, dafault current time",
                        "name": "to",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/infra.ChainZonesStatesResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            }
        },
        "/v2/chains/zones/states/attime": {
            "get": {
                "description": "get the zones last states for zones with kind=service_channel, returns states online/offline\nlayout_id (recommended parameter), if not pass datasource may be not correct",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chains/zones"
                ],
                "summary": "Get zones (service_channel) last states",
                "parameters": [
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "layout_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "uuid format",
                        "name": "zone_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "ISO8601 datetime, default=current moment",
                        "name": "at",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.ZoneState"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            }
        },
        "/v2/chains/zones/states/last": {
            "get": {
                "description": "get the zones last states for zones with kind=service_channel, returns states online/offline\nlayout_id (recommended parameter), if not pass datasource may be not correct",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chains/zones"
                ],
                "summary": "Get zones (service_channel) last states",
                "parameters": [
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "layout_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "store_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "zone_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.ZoneStates"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            }
        },
        "/v2/chains/zones/{zone_id}": {
            "get": {
                "description": "get zone with loc, date, zone_id, fields parameters\nlayout_id (recommended parameter), if not pass datasource may be not correct\nfields - comma separated values of field zone_id,parent_id,layout_id,store_id,kind,title... all of them described at the model",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chains/zones"
                ],
                "summary": "Get specified zone in the retail schema",
                "parameters": [
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "layout_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "uuid format",
                        "name": "zone_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "default=ru",
                        "name": "loc",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ISO8601 YYYY-MM-DD date",
                        "name": "date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "zone_id,kind,title... default=all",
                        "name": "fields",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.ChainZone"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete zone by zone_id parameter\nlayout_id (recommended parameter), if not pass datasource may be not correct",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chains/zones"
                ],
                "summary": "Delete specified zone in the retail schema",
                "parameters": [
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "layout_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "uuid format",
                        "name": "zone_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/infra.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            }
        },
        "/v2/chains/{layout_id}": {
            "get": {
                "description": "get chain with loc(ation), date, layout_id, fields, include parameters\nlayout_id (recommended parameter), if not pass datasource may be not correct\nfields - comma separated values of field names, can be layout_id,kind,title,languages...\ninclude - comma separated list of entities, embedded in current, for chain it can be stores",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chains"
                ],
                "summary": "Get specified chain in the retail schema",
                "parameters": [
                    {
                        "type": "string",
                        "description": "uuid format",
                        "name": "layout_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "default=ru",
                        "name": "loc",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ISO8601 YYYY-MM-DD date",
                        "name": "date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "layout_id,title...default=all",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "stores default=none",
                        "name": "include",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.Chain"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete chain by layout_id parameter",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "chains"
                ],
                "summary": "Delete specified chain in the retail schema",
                "parameters": [
                    {
                        "type": "string",
                        "description": "uuid format, default=*",
                        "name": "layout_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/infra.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            }
        },
        "/v2/data/attendance/malls/entrances": {
            "get": {
                "description": "get data enters and exits in/out the entrances of the mall by group_by intervals,\nlayout_id (recommended parameter), if not pass datasource may be not correct\ncan be filtered by list entrance_id as comma separated list (12345,12344567,8488...)\nand daterange parameters from and to.\nintervals can be: interval, hour, day, week, month, quarter, year\nuse_rawdata for request data by sensors, can be: true/false/1/0; default false",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "data/attendance"
                ],
                "summary": "Get data attendance for entrances of the mall",
                "parameters": [
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "entrance_ids",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "layout_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=interval",
                        "name": "group_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=false",
                        "name": "use_rawdata",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ISO8601 YYYY-MM-DD HH:mm:SS timestamp default=start today",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ISO8601 YYYY-MM-DD HH:mm:SS timestamp default=current time",
                        "name": "to",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.EntrancesAttendance"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            }
        },
        "/v2/data/attendance/malls/renters": {
            "get": {
                "description": "get data enters and exits in/out the entrances of the mall's renters by group_by intervals,\ncan be filtered by list renter_ids as comma separated list (12345,12344567,8488...) and layout_id\nand daterange parameters from and to.\nlayout_id (recommended parameter), if not pass datasource may be not correct\nintervals can be: interval, hour, day, week, month, quarter, year\nuse_rawdata for request data by sensors, can be: true/false/1/0; default false",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "data/attendance"
                ],
                "summary": "Get data attendance for renters of the mall",
                "parameters": [
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "renter_ids",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "layout_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=interval",
                        "name": "group_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=false",
                        "name": "use_rawdata",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ISO8601 YYYY-MM-DD HH:mm:SS timestamp default=start today",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ISO8601 YYYY-MM-DD HH:mm:SS timestamp default=current time",
                        "name": "to",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.RentersAttendance"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            }
        },
        "/v2/data/attendance/malls/zones": {
            "get": {
                "description": "get data enters and exits in/out the zones of the mall by group_by intervals,\nlayout_id (recommended parameter), if not pass datasource may be not correct\ncan be filtered by list zone_id as comma separated list (12345,12344567,8488...)\nand daterange parameters from and to.\nintervals can be: interval, hour, day, week, month, quarter, year\nuse_rawdata for request data by sensors, can be: true/false/1/0; default false",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "data/attendance"
                ],
                "summary": "Get data attendance for zones of the mall",
                "parameters": [
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "zone_ids",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "layout_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=interval",
                        "name": "group_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=false",
                        "name": "use_rawdata",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ISO8601 YYYY-MM-DD HH:mm:SS timestamp default=start today",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ISO8601 YYYY-MM-DD HH:mm:SS timestamp default=current time",
                        "name": "to",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.ZonesAttendance"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            }
        },
        "/v2/data/attendance/stores": {
            "get": {
                "description": "get data enters and exits in/out the stores by group_by intervals,\ncan be filtered by list store_id as comma separated list (12345,12344567,8488...)\nand daterange parameters from and to.\nintervals can be: interval, 1m, hour, day, week, month, quarter, year\nuse_rawdata for request data by sensors, can be: true/false/1/0; default false\nlayout_id (recommended parameter), if not pass datasource may be not correct",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "data/attendance"
                ],
                "summary": "Get data attendance for stores",
                "parameters": [
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "layout_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "comma separated list store_id",
                        "name": "store_ids",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=interval",
                        "name": "group_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=false",
                        "name": "use_rawdata",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ISO8601 YYYY-MM-DD HH:mm:SS timestamp default=start today",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ISO8601 YYYY-MM-DD HH:mm:SS timestamp default=current time",
                        "name": "to",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.StoresAttendance"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            }
        },
        "/v2/data/attendance/stores/entrances": {
            "get": {
                "description": "get data enters and exits in/out the entrances of the stores by group_by intervals,\nentrance_ids - can be filtered by list entrance_id as comma separated list (12345,12344567,8488...)\nand daterange parameters from and to.\nintervals can be: interval, hour, day, week, month, quarter, year\nuse_rawdata for request data by sensors, can be: true/false/1/0; default false\nlayout_id (recommended parameter), if not pass datasource may be not correct",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "data/attendance"
                ],
                "summary": "Get data attendance for entrances of the stores",
                "parameters": [
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "layout_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "entrance_ids",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=interval",
                        "name": "group_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=false",
                        "name": "use_rawdata",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ISO8601 YYYY-MM-DD HH:mm:SS timestamp default=start today",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ISO8601 YYYY-MM-DD HH:mm:SS timestamp default=current time",
                        "name": "to",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.EntrancesAttendance"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            }
        },
        "/v2/data/attendance/stores/zones": {
            "get": {
                "description": "get data enters and exits in/out the zones of the stores by group_by intervals,\ncan be filtered by list zone_id as comma separated list (12345,12344567,8488...)\nand daterange parameters from and to.\nintervals can be: interval, hour, day, week, month, quarter, year\nuse_rawdata for request data by sensors, can be: true/false/1/0; default false\nlayout_id (recommended parameter), if not pass datasource may be not correct",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "data/attendance"
                ],
                "summary": "Get data attendance for zones of the stores",
                "parameters": [
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "layout_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "zone_ids",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=interval",
                        "name": "group_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=false",
                        "name": "use_rawdata",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ISO8601 YYYY-MM-DD HH:mm:SS timestamp default=start today",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ISO8601 YYYY-MM-DD HH:mm:SS timestamp default=current time",
                        "name": "to",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.ZonesAttendance"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            }
        },
        "/v2/data/inside": {
            "get": {
                "description": "get data on the number of people inside the zone at now, can be filtered by zone_id parameter\nlayout_id (recommended parameter), if not pass datasource may be not correct",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "data/inside"
                ],
                "summary": "Get data inside at now",
                "parameters": [
                    {
                        "type": "string",
                        "description": "uuid format, default=*",
                        "name": "layout_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "zone_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.DatasInside"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            }
        },
        "/v2/data/inside/days": {
            "get": {
                "description": "get data on the number of people inside the zone at intervals by cumulative total, can be filtered by zone_id and day parameter\nlayout_id (recommended parameter), if not pass datasource may be not correct",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "data/inside"
                ],
                "summary": "Get data inside at daily intervals by cumulative total",
                "parameters": [
                    {
                        "type": "string",
                        "description": "uuid format, default=*",
                        "name": "layout_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "zone_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "YYYY-MM-DD default=today",
                        "name": "day",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.DatasInside"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            }
        },
        "/v2/data/inside/days/range": {
            "get": {
                "description": "get data on the number of people inside the zone by range intervals,  can be filtered by the zone_id parameter and the day parameter.\nlayout_id (recommended parameter), if not pass datasource may be not correct\nfrom, to and day must be at same day\nfrom/to can be: YYYY-MM-DDTHH:mm:ss+07:00 or naive YYYY-MM-DD HH:mm:ss then the server's local timezone is applied",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "data/inside"
                ],
                "summary": "Get data inside by range interval of the day",
                "parameters": [
                    {
                        "type": "string",
                        "description": "uuid format, default=*",
                        "name": "layout_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "zone_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ISO8601 datetime, default begin of day",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ISO8601 datetime, dafault current time",
                        "name": "to",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "YYYY-MM-DD default=today",
                        "name": "day",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.DatasInside"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            }
        },
        "/v2/data/queue/evaluations": {
            "get": {
                "description": "get zone data evaluation for serviceChannel blocks by intervals\nlayout_id (recommended parameter), if not pass datasource may be not correct\ncan be filtered by layout_id, store_id, parent_zone_id and daterange parameters from and to.\nservice_channel_block_id is serviceChannel block identifier\nfrom/to can be: YYYY-MM-DDTHH:mm:ss+07:00 or naive YYYY-MM-DD HH:mm:ss then the server's local timezone is applied",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "data/queue"
                ],
                "summary": "Get zone data evaluation for serviceChannel blocks",
                "parameters": [
                    {
                        "type": "string",
                        "description": "uuid format, default=*",
                        "name": "layout_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "store_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "service_channel_block_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "is_full",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ISO8601 datetime, default begin of day",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ISO8601 datetime, dafault current time",
                        "name": "to",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.ZoneDataEvaluations"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            }
        },
        "/v2/data/queue/length/stores": {
            "get": {
                "description": "get data on the number of people inside the queue in the stores by group intervals,\ngroup can be interval means rawdata, 1m means group by minutes\nagg_func applies to raw data for calculate rawdata, can be max, min, avg\nlayout_id (recommended parameter), if not pass datasource may be not correct\ncan be filtered by store_id and daterange parameters from and to.\nfrom/to can be: YYYY-MM-DDTHH:mm:ss+07:00\nor naive YYYY-MM-DD HH:mm:ss then the server's local timezone is applied",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "data/queue"
                ],
                "summary": "Get data queue length for stores",
                "parameters": [
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "layout_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "store_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=interval",
                        "name": "group_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=max",
                        "name": "agg_func",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ISO8601 datetime, default begin of day",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ISO8601 datetime, dafault current time",
                        "name": "to",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.StoresDataQueue"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            }
        },
        "/v2/data/queue/length/stores/live": {
            "get": {
                "description": "get data on the number of people inside the queue in the stores in current moment,\nlayout_id (recommended parameter), if not pass datasource may be not correct\ncan be filtered by store_id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "data/queue"
                ],
                "summary": "Get data queue length for stores in current moment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "layout_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "store_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.StoresDataQueue"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            }
        },
        "/v2/data/queue/length/zones": {
            "get": {
                "description": "get data on the number of people inside the queue in the zones of stores by intervals,\ncan be filtered by zone_id, store_id and daterange parameters from and to\nlayout_id (recommended parameter), if not pass datasource may be not correct\nfrom/to can be: YYYY-MM-DDTHH:mm:ss+07:00 or naive YYYY-MM-DD HH:mm:ss\nthen the server's local timezone is applied",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "data/queue"
                ],
                "summary": "Get data queue length for zones of stores by intervals",
                "parameters": [
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "layout_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "store_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "zone_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ISO8601 datetime, default begin of day",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ISO8601 datetime, dafault current time",
                        "name": "to",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.ZonesDataQueue"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            }
        },
        "/v2/data/queue/length/zones/live": {
            "get": {
                "description": "get data on the number of people inside the queue in the zones of stores in current moment,\nlayout_id (recommended parameter), if not pass datasource may be not correct\ncan be filtered by zone_id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "data/queue"
                ],
                "summary": "Get data queue length for zones of stores in current moment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "layout_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "zone_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.ZonesDataQueue"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            }
        },
        "/v2/data/queue/recommendations": {
            "get": {
                "description": "get data recommendations on the need to open service channels\nto prevent queuing by time range and timerange\ncan be filtered by store_id, split_interval can fill intervals between original points\nlayout_id (recommended parameter), if not pass datasource may be not correct\nfrom/to can be: YYYY-MM-DDTHH:mm:ss+07:00 or naive YYYY-MM-DD HH:mm:ss\nthen the server's local timezone is applied to is the upper bound,\nbut the recommendations have points in the future, usually up to 10 minutes ahead",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "data/queue"
                ],
                "summary": "Get data recommendations",
                "parameters": [
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "layout_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "store_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=60s",
                        "name": "split_interval",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ISO8601 datetime, default begin of day",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ISO8601 datetime, dafault current time",
                        "name": "to",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.PredictionsQueue"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            }
        },
        "/v2/devices/info": {
            "get": {
                "description": "get device info about serialNumber, sensors\nparameters:\nkind: device.3dh, device.3dv, device.3d, device.bdv, device.3dx...\ntimeout in seconds. Attention 3dv little big latency, recommended 60 sec",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "common"
                ],
                "summary": "Get some device info",
                "parameters": [
                    {
                        "type": "string",
                        "description": "device kind, default=device.3dv",
                        "name": "kind",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ip/fqdn access to device, default=192.168.0.1",
                        "name": "ip",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "tcp port access to device, default=80",
                        "name": "port",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "login, default=admin",
                        "name": "login",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "password, default=passw0rd",
                        "name": "password",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "timeout in seconds, default=30",
                        "name": "timeout",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.DevConfig"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            }
        },
        "/v2/devices/{device_id}/info": {
            "get": {
                "description": "get device info: serialNumber, sensors with parameter device_id=id\nlayout_id (recommended parameter), if not pass datasource may be not correct",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "common"
                ],
                "summary": "Get specified device info",
                "parameters": [
                    {
                        "type": "string",
                        "description": "uuid format, default=*",
                        "name": "layout_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "uuid format",
                        "name": "device_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.DevConfig"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            }
        },
        "/v2/entities": {
            "get": {
                "description": "get slice of entities with loc, entity_key, parent_key, kind, offset, limit parameters\nlayout_id (recommended parameter), if not pass datasource may be not correct",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "common"
                ],
                "summary": "Get all entities",
                "parameters": [
                    {
                        "type": "string",
                        "description": "uuid format, default=*",
                        "name": "layout_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "entity_key",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "parent_key",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "kind",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "location, default=ru",
                        "name": "loc",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "default=0",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "default=20",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/infra.EntitiesResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            }
        },
        "/v2/layouts": {
            "get": {
                "description": "get slice of layouts/projects configuration with location, date, offset, limit parameters",
                "produces": [
                    "application/json",
                    "text/xml"
                ],
                "tags": [
                    "common"
                ],
                "summary": "Get all layouts",
                "parameters": [
                    {
                        "type": "string",
                        "description": "default=ru",
                        "name": "loc",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "YYYY-MM-DD, default=today",
                        "name": "date",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "default=0",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "default=20",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/infra.LayoutResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            }
        },
        "/v2/layouts/behaviors": {
            "get": {
                "description": "get behaviors for layouts",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "common"
                ],
                "summary": "Get behaviors",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "default=0",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "default=20",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/infra.BehaviorsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            }
        },
        "/v2/layouts/{layout_id}": {
            "get": {
                "description": "get layout with location, date and layout_id parameters",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "common"
                ],
                "summary": "Get specified layout",
                "parameters": [
                    {
                        "type": "string",
                        "description": "digit/uuid format",
                        "name": "layout_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "default=ru",
                        "name": "loc",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "YYYY-MM-DD, default=today",
                        "name": "date",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.Layout"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            }
        },
        "/v2/layouts/{layout_id}/behaviors": {
            "get": {
                "description": "get behaviors for for specified layout_id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "common"
                ],
                "summary": "Get behavior for specified layout",
                "parameters": [
                    {
                        "type": "string",
                        "description": "digit/uuid format",
                        "name": "layout_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.Behavior"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates behavior for specified layout\nexample upd behavior, layout_id must exists in the database:\n{\n\"Open\": \"10:00:00\",\n\"Close\": \"23:00:00\",\n\"time_zone\": \"Europe/Moscow\",\n\"behavior_config\": {\n\"queue\": {\n\"layouts\": [\n{\n\"layout_id\": \"89884907\",\n\"title\": \"retail name\",\n\"threshold\": 99.99,\n\"service_channel\": {\n\"indexes\": [\n{\n\"kind\": \"work_time\",\n\"weight\": 1,\n\"op\": \"*\"\n},\n{\n\"kind\": \"queue_length\",\n\"weight\": 40,\n\"op\": \"+\"\n},\n{\n\"kind\": \"cashiers_activities\",\n\"weight\": 100,\n\"op\": \"+\"\n}\n]\n}\n}\n],\n\"stores\": [\n{\n\"store_id\": null,\n\"title\": \"store name\",\n\"threshold\": 99.99,\n\"service_channel\": {\n\"indexes\": [\n{\n\"kind\": \"work_time\",\n\"weight\": 1,\n\"op\": \"*\"\n},\n{\n\"kind\": \"queue_length\",\n\"weight\": 40,\n\"op\": \"+\"\n},\n{\n\"kind\": \"cashiers_activities\",\n\"weight\": 90,\n\"op\": \"+\"\n}\n]\n}\n}\n],\n\"service_channels\": [\n{\n\"service_channel_id\": \"131928214\",\n\"title\": \"Касса №10\",\n\"threshold\": 99.99,\n\"service_channel\": {\n\"indexes\": [\n{\n\"kind\": \"work_time\",\n\"weight\": 1,\n\"op\": \"*\"\n},\n{\n\"kind\": \"queue_length\",\n\"weight\": 100,\n\"op\": \"+\"\n},\n{\n\"kind\": \"cashiers_activities\",\n\"weight\": 100,\n\"op\": \"+\"\n}\n]\n}\n},\n{\n\"service_channel_id\": \"66932267\",\n\"title\": \"Касса №2\",\n\"threshold\": 99.99,\n\"service_channel\": {\n\"indexes\": [\n{\n\"kind\": \"work_time\",\n\"weight\": 1,\n\"op\": \"*\"\n},\n{\n\"kind\": \"queue_length\",\n\"weight\": 100,\n\"op\": \"+\"\n},\n{\n\"kind\": \"cashiers_activities\",\n\"weight\": 100,\n\"op\": \"+\"\n}\n]\n}\n},\n{\n\"service_channel_id\": \"73500176\",\n\"title\": \"Касса №5\",\n\"threshold\": 99.99,\n\"service_channel\": {\n\"indexes\": [\n{\n\"kind\": \"work_time\",\n\"weight\": 1,\n\"op\": \"*\"\n},\n{\n\"kind\": \"queue_length\",\n\"weight\": 100,\n\"op\": \"+\"\n},\n{\n\"kind\": \"cashiers_activities\",\n\"weight\": 100,\n\"op\": \"+\"\n}\n]\n}\n},\n{\n\"service_channel_id\": \"80541959\",\n\"title\": \"Касса №7\",\n\"threshold\": 99.99,\n\"service_channel\": {\n\"indexes\": [\n{\n\"kind\": \"work_time\",\n\"weight\": 1,\n\"op\": \"*\"\n},\n{\n\"kind\": \"queue_length\",\n\"weight\": 100,\n\"op\": \"+\"\n},\n{\n\"kind\": \"cashiers_activities\",\n\"weight\": 100,\n\"op\": \"+\"\n}\n]\n}\n}\n]\n},\n\"recommendations\": {\n\"layouts\": [\n{\n\"layout_id\": \"123124324\",\n\"title\": \"retail name\",\n\"std_coef\": 0.3,\n\"queue_multiplier\": 0.6,\n\"pred_minutes\": 10,\n\"hist_minutes\": 30,\n\"checkout_productivity\": 0.8\n}\n],\n\"stores\": [\n{\n\"store_id\": \"234534545\",\n\"title\": \"store name\",\n\"std_coef\": 0.3,\n\"queue_multiplier\": 0.6,\n\"pred_minutes\": 10,\n\"hist_minutes\": 30,\n\"checkout_productivity\": 0.8\n},\n{\n\"store_id\": \"234556487545\",\n\"title\": \"store name another\",\n\"std_coef\": 0.3,\n\"queue_multiplier\": 0.6,\n\"pred_minutes\": 10,\n\"hist_minutes\": 30,\n\"checkout_productivity\": 0.8\n}\n]\n},\n\"queue_thresholds\": {\n\"layouts\": [\n{\n\"layout_id\": \"89884907\",\n\"title\": \"retail name\",\n\"threshold\": 3,\n\"sequence_length\": 2\n}\n],\n\"stores\": [\n{\n\"store_id\": \"242342343\",\n\"title\": \"store name\",\n\"threshold\": 2.99,\n\"sequence_length\": 2\n}\n],\n\"blocks_service_channels\": [\n{\n\"block_service_chanels_id\": \"2343245\",\n\"title\": \"cash block name\",\n\"threshold\": 2.89,\n\"sequence_length\": 2\n}\n]\n}\n}\n}",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "common"
                ],
                "summary": "Updates behavior for specified layout",
                "parameters": [
                    {
                        "type": "string",
                        "description": "digit/uuid format",
                        "name": "layout_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "behavior properties",
                        "name": "behavior",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.Behavior"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/infra.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            }
        },
        "/v2/malls": {
            "get": {
                "description": "get slice of malls with loc (location), date, offset, limit, fields parameters\nlayout_id (recommended parameter), if not pass datasource may be not correct\nfields - comma separated values of field names, can be layout_id,kind,title,languages...",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "malls"
                ],
                "summary": "Get all malls in the mall schema",
                "parameters": [
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "layout_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "default=0",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "default=20",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=ru",
                        "name": "loc",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ISO8601 YYYY-MM-DD, default=today",
                        "name": "date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "layout_id,title...default=all",
                        "name": "fields",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/infra.MallsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            }
        },
        "/v2/malls/devices": {
            "get": {
                "description": "get slice of devices with loc, date, layout_id, kind, is_active, dc_mode, mode, sn, offset, limit, fields parameters\nlayout_id (recommended parameter), if not pass datasource may be not correct\nfields - comma separated values of field names, can be device_id,layout_id,master_id,kind,title... all of them described at the model\ninclude - comma separated list of entities, embedded in current, for devices it can be sensors,delay",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "malls/devices"
                ],
                "summary": "Get all mall devices in the mall schema",
                "parameters": [
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "layout_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "kind",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "is_active",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "dc_mode",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "mode",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "sn",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=ru",
                        "name": "loc",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ISO8601 YYYY-MM-DD date",
                        "name": "date",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "default=0",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "default=20",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "device_id,kind,title... default=all",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "sensors,delay default=none",
                        "name": "include",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/infra.MallDevicesResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            }
        },
        "/v2/malls/devices/{device_id}": {
            "get": {
                "description": "get device with loc, date, device_id, fields parameters from mall schema\nlayout_id (recommended parameter), if not pass datasource may be not correct\nfields - comma separated values of field names, can be device_id,layout_id...\nall of them described at the model\ninclude - comma separated list of entities, embedded in current, for devices it can be sensors",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "malls/devices"
                ],
                "summary": "Get specified device in the mall schema",
                "parameters": [
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "layout_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "uuid format",
                        "name": "device_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "location, default=ru",
                        "name": "loc",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ISO8601 YYYY-MM-DD date",
                        "name": "date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "device_id,kind,title... default=all",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "sensors default=none",
                        "name": "include",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.ChainDevice"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            }
        },
        "/v2/malls/entrances": {
            "get": {
                "description": "get slice of entrances with loc, date, layout_id, floor_id, offset, limit, fields parameters\nlayout_id (recommended parameter), if not pass datasource may be not correct\nfields - comma separated values of field names, can be entrance_id,layout_id,floor_id,kind,title...",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "malls/entrances"
                ],
                "summary": "Get all entrances in the mall schema",
                "parameters": [
                    {
                        "type": "string",
                        "description": "uuid/digit format, default=*",
                        "name": "layout_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "floor_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=entrance",
                        "name": "kind",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "location, default=ru",
                        "name": "loc",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ISO8601 YYYY-MM-DD date",
                        "name": "date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "comma separated list ids, default=*",
                        "name": "entrance_ids",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "default=0",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "default=20",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "entrance_id,floor_id,title... default=all",
                        "name": "fields",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/infra.MallEntrancesResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            }
        },
        "/v2/malls/entrances/{entrance_id}": {
            "get": {
                "description": "get specified entrance with specified, loc, date, fields parameters\nlayout_id (recommended parameter), if not pass datasource may be not correct\nfields - comma separated values of field names, can be entrance_id,layout_id,floor_id,kind,title...",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "malls/entrances"
                ],
                "summary": "Get specified entrance in the retail schema",
                "parameters": [
                    {
                        "type": "string",
                        "description": "uuid/digit format, default=*",
                        "name": "layout_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "uuid format",
                        "name": "entrance_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "location, default=ru",
                        "name": "loc",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ISO8601 YYYY-MM-DD date",
                        "name": "date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "entrance_id,floor_id,title... default=all",
                        "name": "fields",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.MallEntrance"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            }
        },
        "/v2/malls/renters": {
            "get": {
                "description": "get slice of renters with loc, date, layout_id, category_id, price_segment_id, contract, offset, limit, fields parameters\nlayout_id (recommended parameter), if not pass datasource may be not correct\nfields - comma separated values of field renter_id,title,layout_id,price_segment_id...",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "malls/renters"
                ],
                "summary": "Get all renters in the mall schema",
                "parameters": [
                    {
                        "type": "string",
                        "description": "uuid format, default=*",
                        "name": "layout_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "categor_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "price_segment_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "contract",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "location, default=ru",
                        "name": "loc",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "default=0",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "default=20",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "renter_id,title,layout_id... default=all",
                        "name": "fields",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/infra.RentersResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            }
        },
        "/v2/malls/renters/{renter_id}": {
            "get": {
                "description": "get renter with loc, date, renter_id, fields parameters\nlayout_id (recommended parameter), if not pass datasource may be not correct\nfields - comma separated values of field renter_id,title,layout_id,price_segment_id...\ninclude - comma separated list of entities, embedded in current, for renters it can be only zones",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "malls/renters"
                ],
                "summary": "Get specified renter in the mall schema",
                "parameters": [
                    {
                        "type": "string",
                        "description": "uuid format, default=*",
                        "name": "layout_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "uuid/digits format",
                        "name": "renter_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "default=ru",
                        "name": "loc",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ISO8601 YYYY-MM-DD date",
                        "name": "date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "renter_id,title,layout_id... default=all",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "zones default=none",
                        "name": "include",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.Renter"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            }
        },
        "/v2/malls/zones": {
            "get": {
                "description": "get slice of zones with loc, date, layout_id, is_online, is_active, offset, limit, fields parameters\nlayout_id (recommended parameter), if not pass datasource may be not correct\nfields - comma separated values of field zone_id,parent_id,layout_id,kind,title...",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "malls/zones"
                ],
                "summary": "Get all zones in the mall schema",
                "parameters": [
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "layout_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "kind",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "parent_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "location, default=ru",
                        "name": "loc",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ISO8601 YYYY-MM-DD date",
                        "name": "date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "is_online",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "is_active",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "default=0",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "default=20",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "zone_id,kind,title... default=all",
                        "name": "fields",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/infra.MallZonesResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            }
        },
        "/v2/malls/zones/{zone_id}": {
            "get": {
                "description": "get zone with loc, date, zone_id, fields parameters\nlayout_id (recommended parameter), if not pass datasource may be not correct\nfields - comma separated values of field zone_id,parent_id,layout_id,kind,title...\ninclude - comma separated list of entities, embedded in current, for zone it can be only entrances",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "malls/zones"
                ],
                "summary": "Get specified zone in the mall schema",
                "parameters": [
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "layout_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "uuid/digits format",
                        "name": "zone_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "default=ru",
                        "name": "loc",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ISO8601 YYYY-MM-DD date",
                        "name": "date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "zone_id,kind,title... default=all",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "entrances default=none",
                        "name": "include",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.MallZone"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            }
        },
        "/v2/malls/{layout_id}": {
            "get": {
                "description": "get mall with loc(ation), date, layout_id, fields parameters\nlayout_id (recommended parameter), if not pass datasource may be not correct\nfields - comma separated values of field names, can be layout_id,kind,title,languages...",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "malls"
                ],
                "summary": "Get specified mall in the mall schema",
                "parameters": [
                    {
                        "type": "string",
                        "description": "uuid format",
                        "name": "layout_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "default=ru",
                        "name": "loc",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ISO8601 YYYY-MM-DD date",
                        "name": "date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "layout_id,title...default=all",
                        "name": "fields",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.Mall"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            }
        },
        "/v2/references": {
            "get": {
                "description": "get slice of references\nlayout_id (recommended parameter), if not pass datasource may be not correct",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reference"
                ],
                "summary": "Get all references",
                "parameters": [
                    {
                        "type": "string",
                        "description": "uuid format, default=*",
                        "name": "layout_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            }
        },
        "/v2/references/categories": {
            "get": {
                "description": "get renter category reference\nlayout_id (recommended parameter), if not pass datasource may be not correct",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reference"
                ],
                "summary": "Get renter category reference",
                "parameters": [
                    {
                        "type": "string",
                        "description": "uuid format, default=*",
                        "name": "layout_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/reference.RefCategories"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            }
        },
        "/v2/references/kindenter": {
            "get": {
                "description": "get kind enter reference\nlayout_id (recommended parameter), if not pass datasource may be not correct",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reference"
                ],
                "summary": "Get kind enter reference",
                "parameters": [
                    {
                        "type": "string",
                        "description": "uuid format, default=*",
                        "name": "layout_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/reference.RefPrices"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            }
        },
        "/v2/references/kindzone": {
            "get": {
                "description": "get kind zone reference\nlayout_id (recommended parameter), if not pass datasource may be not correct",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reference"
                ],
                "summary": "Get kind zone reference",
                "parameters": [
                    {
                        "type": "string",
                        "description": "uuid format, default=*",
                        "name": "layout_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/reference.RefPrices"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            }
        },
        "/v2/references/prices": {
            "get": {
                "description": "get renter price segments reference\nlayout_id (recommended parameter), if not pass datasource may be not correct",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reference"
                ],
                "summary": "Get renter price segments reference",
                "parameters": [
                    {
                        "type": "string",
                        "description": "uuid format, default=*",
                        "name": "layout_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/reference.RefPrices"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            }
        },
        "/v2/reports": {
            "get": {
                "description": "Gets early created pdf/xlsx reports\nlayout_id (recommended parameter), if not pass datasource may be not correct\nis_sent filter for reports, 1/true = report has been sent",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reports"
                ],
                "summary": "Gets early created reports",
                "parameters": [
                    {
                        "type": "string",
                        "description": "digit/uuid format",
                        "name": "layout_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "boolean format false/true/0/1",
                        "name": "is_sent",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.Reports"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            }
        },
        "/v2/reports/{report_id}/files": {
            "get": {
                "description": "gets early created reports files/items\nlayout_id (recommended parameter), if not pass datasource may be not correct\nis_sent filter for reports, 1/true = report has been sent",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "reports"
                ],
                "summary": "Gets early created reports files/items",
                "parameters": [
                    {
                        "type": "string",
                        "description": "digit/uuid format",
                        "name": "layout_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "digit format",
                        "name": "report_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "boolean format false/true/0/1",
                        "name": "is_sent",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "default=0",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "default=20",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/infra.ReportFilesResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            }
        },
        "/v2/reports/{report_id}/files/{file_id}": {
            "get": {
                "description": "gets report file content\nlayout_id (recommended parameter), if not pass datasource may be not correct",
                "tags": [
                    "reports"
                ],
                "summary": "Gets report file content",
                "parameters": [
                    {
                        "type": "string",
                        "description": "digit/uuid format",
                        "name": "layout_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "digit format",
                        "name": "report_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "digit format",
                        "name": "file_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            }
        },
        "/v2/screenshots": {
            "get": {
                "description": "get slice of screenshots with layout_id, store_id, zone_id, device_id, status, offset, limit parameters\nfields - comma separated values of field names, can be layout_id,store_id,device_id,url,notes... all of them described in the model\nscreenshot_status can be new - default processed - blocked for changes, to_delete - marked for delete, archived - marked for all time store\nfrom/to can be: YYYY-MM-DDTHH:mm:ss+07:00 or naive YYYY-MM-DD HH:mm:ss then the server's local timezone is applied",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "screenshots"
                ],
                "summary": "Get screenshots from the storage",
                "parameters": [
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "layout_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "store_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "zone_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "device_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "screenshot_status",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "default=0",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "default=20",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ISO8601 datetime, default begin of day",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ISO8601 datetime, dafault current time",
                        "name": "to",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "layout_id,store_id,device_id..default=all",
                        "name": "fields",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/infra.ScreenshotsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates screenshots status\nexample upd screenshots statuses:\n[{\n\"device_id\": \"1234567\",\n\"screenshot_time\": \"2020-09-01T00:15:15+03:00\",\n\"screenshot_status\": \"to_delete\"\n},\n{\n\"device_id\": \"1234568\",\n\"screenshot_time\": \"2020-09-01T00:15:15+03:00\",\n\"screenshot_status\": \"to_delete\"\n}]",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "screenshots"
                ],
                "summary": "Updates screenshots status",
                "parameters": [
                    {
                        "description": "screenshots update status properties",
                        "name": "params",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.ParamsScreenUpd"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/infra.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            }
        },
        "/v2/screenshots/attime": {
            "get": {
                "description": "get slice of screenshots with layout_id, store_id, zone_id, device_id, at time momen parameters\nfields - comma separated values of field names, can be layout_id,store_id,device_id,url,notes... all of them described in the model\nat can be: YYYY-MM-DDTHH:mm:ss+07:00 or naive YYYY-MM-DD HH:mm:ss then the server's local timezone is applied",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "screenshots"
                ],
                "summary": "Get all screenshots from the storage on the specified time",
                "parameters": [
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "layout_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "store_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "zone_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "default=*",
                        "name": "device_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ISO8601 datetime, default=currentMoment-1min accuracy 15s",
                        "name": "at",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "layout_id,store_id,device_id..default=all",
                        "name": "fields",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.Screenshots"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed",
                        "schema": {
                            "$ref": "#/definitions/infra.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/infra.ErrResponse"
                        }
                    }
                }
            }
        },
        "/v2/version": {
            "get": {
                "tags": [
                    "health"
                ],
                "summary": "Get version info",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/infra.Version"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "domain.AttendanceDataPoint": {
            "type": "object",
            "properties": {
                "passing_by": {
                    "type": "integer"
                },
                "sum_in": {
                    "type": "integer"
                },
                "sum_out": {
                    "type": "integer"
                },
                "time_end": {
                    "type": "string"
                },
                "time_start": {
                    "type": "string"
                }
            }
        },
        "domain.AttendanceDataPoints": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/domain.AttendanceDataPoint"
            }
        },
        "domain.Behavior": {
            "type": "object",
            "properties": {
                "Close": {
                    "type": "string"
                },
                "Open": {
                    "type": "string"
                },
                "behavior_config": {
                    "type": "object",
                    "$ref": "#/definitions/domain.BehaviorConfig"
                },
                "time_zone": {
                    "type": "string"
                }
            }
        },
        "domain.BehaviorConfig": {
            "type": "object",
            "properties": {
                "queue": {
                    "type": "object",
                    "$ref": "#/definitions/domain.Queue"
                },
                "queue_thresholds": {
                    "type": "object",
                    "$ref": "#/definitions/domain.QueueThresholds"
                },
                "recommendations": {
                    "type": "object",
                    "$ref": "#/definitions/domain.Recommendations"
                }
            }
        },
        "domain.Behaviors": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/domain.Behavior"
            }
        },
        "domain.BindingChainEntranceStore": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "creator": {
                    "type": "string"
                },
                "direction": {
                    "type": "string"
                },
                "entrance_id": {
                    "type": "string"
                },
                "kind_store": {
                    "type": "string"
                },
                "modified_at": {
                    "type": "string"
                },
                "modifier": {
                    "type": "string"
                },
                "options": {
                    "type": "string"
                },
                "store_id": {
                    "type": "string"
                },
                "valid_from": {
                    "type": "string"
                },
                "valid_to": {
                    "type": "string"
                }
            }
        },
        "domain.BindingChainEntranceZone": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "creator": {
                    "type": "string"
                },
                "direction": {
                    "type": "string"
                },
                "entrance_id": {
                    "type": "string"
                },
                "kind_zone": {
                    "type": "string"
                },
                "modified_at": {
                    "type": "string"
                },
                "modifier": {
                    "type": "string"
                },
                "options": {
                    "type": "string"
                },
                "valid_from": {
                    "type": "string"
                },
                "valid_to": {
                    "type": "string"
                },
                "zone_id": {
                    "type": "string"
                }
            }
        },
        "domain.BindingChainSensorEntrance": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "creator": {
                    "type": "string"
                },
                "direction": {
                    "type": "string"
                },
                "entrance_id": {
                    "type": "string"
                },
                "k_in": {
                    "type": "number"
                },
                "k_out": {
                    "type": "number"
                },
                "kind_entrance": {
                    "type": "string"
                },
                "modified_at": {
                    "type": "string"
                },
                "modifier": {
                    "type": "string"
                },
                "options": {
                    "type": "string"
                },
                "sensor_id": {
                    "type": "string"
                },
                "valid_from": {
                    "type": "string"
                },
                "valid_to": {
                    "type": "string"
                }
            }
        },
        "domain.BindingChainSensorZone": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "creator": {
                    "type": "string"
                },
                "kind_zone": {
                    "type": "string"
                },
                "modified_at": {
                    "type": "string"
                },
                "modifier": {
                    "type": "string"
                },
                "options": {
                    "type": "string"
                },
                "sensor_id": {
                    "type": "string"
                },
                "valid_from": {
                    "type": "string"
                },
                "valid_to": {
                    "type": "string"
                },
                "zone_id": {
                    "type": "string"
                }
            }
        },
        "domain.BindingEntranceZone": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "creator": {
                    "type": "string"
                },
                "direction": {
                    "type": "string"
                },
                "entrance_id": {
                    "type": "string"
                },
                "entrance_name": {
                    "type": "string"
                },
                "kind_zone": {
                    "type": "string"
                },
                "modified_at": {
                    "type": "string"
                },
                "modifier": {
                    "type": "string"
                },
                "options": {
                    "type": "string"
                },
                "valid_from": {
                    "type": "string"
                },
                "valid_to": {
                    "type": "string"
                },
                "zone_id": {
                    "type": "string"
                }
            }
        },
        "domain.BindingsChainSensorZone": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/domain.BindingChainSensorZone"
            }
        },
        "domain.BindingsEntranceZone": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/domain.BindingEntranceZone"
            }
        },
        "domain.BlocksServiceChannel": {
            "type": "object",
            "properties": {
                "block_service_channels_id": {
                    "type": "string"
                },
                "sequence_length": {
                    "type": "integer"
                },
                "threshold": {
                    "type": "number"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "domain.CRMCustomer": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "domain.Chain": {
            "type": "object",
            "properties": {
                "brands": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "creator": {
                    "type": "string"
                },
                "crm_key": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "kind": {
                    "type": "string"
                },
                "languages": {
                    "type": "string"
                },
                "layout_id": {
                    "type": "string"
                },
                "modified_at": {
                    "type": "string"
                },
                "modifier": {
                    "type": "string"
                },
                "notes": {
                    "type": "string"
                },
                "options": {
                    "type": "string"
                },
                "read_only": {
                    "type": "boolean"
                },
                "stores": {
                    "type": "object",
                    "$ref": "#/definitions/domain.ChainStores"
                },
                "title": {
                    "type": "string"
                },
                "valid_from": {
                    "type": "string"
                },
                "valid_to": {
                    "type": "string"
                }
            }
        },
        "domain.ChainDevice": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "creator": {
                    "type": "string"
                },
                "dcmode": {
                    "description": "DCMode data collector mode: active - device transmit data to server;\npassive - server request data from device",
                    "type": "string"
                },
                "delay": {
                    "type": "object",
                    "$ref": "#/definitions/domain.DelayPoint"
                },
                "device_id": {
                    "type": "string"
                },
                "ip": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "kind": {
                    "type": "string"
                },
                "layout_id": {
                    "type": "string"
                },
                "login": {
                    "type": "string"
                },
                "master_id": {
                    "type": "string"
                },
                "mode": {
                    "description": "Mode: single/master/slave",
                    "type": "string"
                },
                "modified_at": {
                    "type": "string"
                },
                "modifier": {
                    "type": "string"
                },
                "notes": {
                    "type": "string"
                },
                "options": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "port": {
                    "type": "string"
                },
                "sensors": {
                    "type": "object",
                    "$ref": "#/definitions/domain.ChainSensors"
                },
                "sn": {
                    "type": "string"
                },
                "store_id": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "valid_from": {
                    "type": "string"
                },
                "valid_to": {
                    "type": "string"
                }
            }
        },
        "domain.ChainDevices": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/domain.ChainDevice"
            }
        },
        "domain.ChainEntrance": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "creator": {
                    "type": "string"
                },
                "entrance_id": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "kind": {
                    "type": "string"
                },
                "layout_id": {
                    "type": "string"
                },
                "modified_at": {
                    "type": "string"
                },
                "modifier": {
                    "type": "string"
                },
                "notes": {
                    "type": "string"
                },
                "options": {
                    "type": "string"
                },
                "sensors": {
                    "type": "object",
                    "$ref": "#/definitions/domain.ChainSensors"
                },
                "store_id": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "valid_from": {
                    "type": "string"
                },
                "valid_to": {
                    "type": "string"
                }
            }
        },
        "domain.ChainEntrances": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/domain.ChainEntrance"
            }
        },
        "domain.ChainSensor": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "creator": {
                    "type": "string"
                },
                "device_id": {
                    "type": "string"
                },
                "external_id": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "kind": {
                    "type": "string"
                },
                "layout_id": {
                    "type": "string"
                },
                "modified_at": {
                    "type": "string"
                },
                "modifier": {
                    "type": "string"
                },
                "notes": {
                    "type": "string"
                },
                "options": {
                    "type": "string"
                },
                "sensor_id": {
                    "type": "string"
                },
                "store_id": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "valid_from": {
                    "type": "string"
                },
                "valid_to": {
                    "type": "string"
                }
            }
        },
        "domain.ChainSensors": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/domain.ChainSensor"
            }
        },
        "domain.ChainStore": {
            "type": "object",
            "properties": {
                "area": {
                    "type": "number"
                },
                "brands": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "creator": {
                    "type": "string"
                },
                "crm_key": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "devices": {
                    "type": "object",
                    "$ref": "#/definitions/domain.ChainDevices"
                },
                "entrances": {
                    "type": "object",
                    "$ref": "#/definitions/domain.ChainEntrances"
                },
                "is_active": {
                    "type": "boolean"
                },
                "kind": {
                    "type": "string"
                },
                "layout_id": {
                    "type": "string"
                },
                "location_id": {
                    "type": "string"
                },
                "modified_at": {
                    "type": "string"
                },
                "modifier": {
                    "type": "string"
                },
                "notes": {
                    "type": "string"
                },
                "options": {
                    "type": "string"
                },
                "statistics": {
                    "type": "string"
                },
                "store_id": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "valid_from": {
                    "type": "string"
                },
                "valid_to": {
                    "type": "string"
                },
                "zones": {
                    "type": "object",
                    "$ref": "#/definitions/domain.ChainZones"
                }
            }
        },
        "domain.ChainStores": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/domain.ChainStore"
            }
        },
        "domain.ChainZone": {
            "type": "object",
            "properties": {
                "area": {
                    "type": "number",
                    "x-order": "6"
                },
                "created_at": {
                    "type": "string",
                    "x-order": "12"
                },
                "creator": {
                    "type": "string",
                    "x-order": "11"
                },
                "entrances": {
                    "type": "object",
                    "$ref": "#/definitions/domain.ChainEntrances"
                },
                "is_active": {
                    "type": "boolean"
                },
                "kind": {
                    "type": "string",
                    "x-order": "4"
                },
                "layout_id": {
                    "type": "string",
                    "x-order": "2"
                },
                "modified_at": {
                    "type": "string",
                    "x-order": "14"
                },
                "modifier": {
                    "type": "string",
                    "x-order": "13"
                },
                "notes": {
                    "type": "string",
                    "x-order": "8"
                },
                "options": {
                    "type": "string",
                    "x-order": "7"
                },
                "parent_id": {
                    "type": "string",
                    "x-order": "1"
                },
                "sensors": {
                    "type": "object",
                    "$ref": "#/definitions/domain.ChainSensors"
                },
                "store_id": {
                    "type": "string",
                    "x-order": "3"
                },
                "title": {
                    "type": "string",
                    "x-order": "5"
                },
                "valid_from": {
                    "type": "string",
                    "x-order": "9"
                },
                "valid_to": {
                    "type": "string",
                    "x-order": "10"
                },
                "zone_id": {
                    "type": "string",
                    "x-order": "0"
                }
            }
        },
        "domain.ChainZones": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/domain.ChainZone"
            }
        },
        "domain.Chains": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/domain.Chain"
            }
        },
        "domain.DataInside": {
            "type": "object",
            "properties": {
                "points": {
                    "type": "object",
                    "$ref": "#/definitions/domain.DataPoints"
                },
                "zone_id": {
                    "type": "string"
                }
            }
        },
        "domain.DataPoint": {
            "type": "object",
            "properties": {
                "time": {
                    "type": "string"
                },
                "value": {
                    "type": "integer"
                }
            }
        },
        "domain.DataPoints": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/domain.DataPoint"
            }
        },
        "domain.DatasInside": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/domain.DataInside"
            }
        },
        "domain.DelayPoint": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "integer"
                }
            }
        },
        "domain.DevConfig": {
            "type": "object",
            "properties": {
                "sensors": {
                    "type": "object",
                    "$ref": "#/definitions/domain.DevSensors"
                },
                "sn": {
                    "type": "string"
                }
            }
        },
        "domain.DevSensor": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                }
            }
        },
        "domain.DevSensors": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/domain.DevSensor"
            }
        },
        "domain.Entities": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/domain.Entity"
            }
        },
        "domain.Entity": {
            "type": "object",
            "properties": {
                "entity_key": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "notes": {
                    "type": "string"
                },
                "options": {
                    "type": "string"
                },
                "parent_key": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "domain.EntranceAttendance": {
            "type": "object",
            "properties": {
                "entrance_id": {
                    "type": "string"
                },
                "points": {
                    "type": "object",
                    "$ref": "#/definitions/domain.AttendanceDataPoints"
                }
            }
        },
        "domain.EntrancesAttendance": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/domain.EntranceAttendance"
            }
        },
        "domain.Event": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "creator": {
                    "type": "string"
                },
                "event_time": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "layout_id": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "severity": {
                    "type": "string"
                },
                "source": {
                    "type": "object",
                    "$ref": "#/definitions/domain.Source"
                },
                "store_id": {
                    "type": "string"
                }
            }
        },
        "domain.Events": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/domain.Event"
            }
        },
        "domain.Index": {
            "type": "object",
            "properties": {
                "kind": {
                    "type": "string"
                },
                "op": {
                    "type": "string"
                },
                "weight": {
                    "type": "integer"
                }
            }
        },
        "domain.Layout": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "kind": {
                    "type": "string"
                },
                "owner": {
                    "type": "object",
                    "$ref": "#/definitions/domain.CRMCustomer"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "domain.LayoutInfo": {
            "type": "object",
            "properties": {
                "layout_id": {
                    "type": "string"
                },
                "params": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/domain.Param"
                    }
                }
            }
        },
        "domain.LayoutServiceChannel": {
            "type": "object",
            "properties": {
                "indexes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/domain.Index"
                    }
                }
            }
        },
        "domain.Layouts": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/domain.Layout"
            }
        },
        "domain.ListQueueLength": {
            "type": "array",
            "items": {
                "type": "number"
            }
        },
        "domain.Mall": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "creator": {
                    "type": "string"
                },
                "crm_key": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "kind": {
                    "type": "string"
                },
                "languages": {
                    "type": "string"
                },
                "layout_id": {
                    "type": "string"
                },
                "modified_at": {
                    "type": "string"
                },
                "modifier": {
                    "type": "string"
                },
                "notes": {
                    "type": "string"
                },
                "options": {
                    "type": "string"
                },
                "read_only": {
                    "type": "boolean"
                },
                "title": {
                    "type": "string"
                },
                "valid_from": {
                    "type": "string"
                },
                "valid_to": {
                    "type": "string"
                }
            }
        },
        "domain.MallDevice": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "creator": {
                    "type": "string"
                },
                "dcmode": {
                    "description": "DCMode data collector mode: active - device transmit data to server;\npassive - server request data from device",
                    "type": "string"
                },
                "delay": {
                    "type": "object",
                    "$ref": "#/definitions/domain.DelayPoint"
                },
                "device_id": {
                    "type": "string"
                },
                "floor_id": {
                    "type": "string"
                },
                "ip": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "kind": {
                    "type": "string"
                },
                "layout_id": {
                    "type": "string"
                },
                "login": {
                    "type": "string"
                },
                "master_id": {
                    "type": "string"
                },
                "mode": {
                    "description": "Mode: single/master/slave",
                    "type": "string"
                },
                "modified_at": {
                    "type": "string"
                },
                "modifier": {
                    "type": "string"
                },
                "notes": {
                    "type": "string"
                },
                "options": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "port": {
                    "type": "string"
                },
                "sensors": {
                    "type": "object",
                    "$ref": "#/definitions/domain.MallSensors"
                },
                "sn": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "valid_from": {
                    "type": "string"
                },
                "valid_to": {
                    "type": "string"
                }
            }
        },
        "domain.MallDevices": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/domain.MallDevice"
            }
        },
        "domain.MallEntrance": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "creator": {
                    "type": "string"
                },
                "entrance_id": {
                    "type": "string"
                },
                "floor_id": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "kind": {
                    "type": "string"
                },
                "layout_id": {
                    "type": "string"
                },
                "modified_at": {
                    "type": "string"
                },
                "modifier": {
                    "type": "string"
                },
                "notes": {
                    "type": "string"
                },
                "options": {
                    "type": "string"
                },
                "sensors": {
                    "type": "object",
                    "$ref": "#/definitions/domain.MallSensors"
                },
                "title": {
                    "type": "string"
                },
                "valid_from": {
                    "type": "string"
                },
                "valid_to": {
                    "type": "string"
                }
            }
        },
        "domain.MallEntrances": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/domain.MallEntrance"
            }
        },
        "domain.MallSensor": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "creator": {
                    "type": "string"
                },
                "device_id": {
                    "type": "string"
                },
                "external_id": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "kind": {
                    "type": "string"
                },
                "layout_id": {
                    "type": "string"
                },
                "modified_at": {
                    "type": "string"
                },
                "modifier": {
                    "type": "string"
                },
                "notes": {
                    "type": "string"
                },
                "options": {
                    "type": "string"
                },
                "sensor_id": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "valid_from": {
                    "type": "string"
                },
                "valid_to": {
                    "type": "string"
                }
            }
        },
        "domain.MallSensors": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/domain.MallSensor"
            }
        },
        "domain.MallZone": {
            "type": "object",
            "properties": {
                "area": {
                    "type": "number"
                },
                "created_at": {
                    "type": "string"
                },
                "creator": {
                    "type": "string"
                },
                "entrances": {
                    "type": "object",
                    "$ref": "#/definitions/domain.BindingsEntranceZone"
                },
                "is_active": {
                    "type": "boolean"
                },
                "kind": {
                    "type": "string"
                },
                "layout_id": {
                    "type": "string"
                },
                "modified_at": {
                    "type": "string"
                },
                "modifier": {
                    "type": "string"
                },
                "notes": {
                    "type": "string"
                },
                "options": {
                    "type": "string"
                },
                "parent_id": {
                    "type": "string"
                },
                "sensors": {
                    "type": "object",
                    "$ref": "#/definitions/domain.MallSensors"
                },
                "title": {
                    "type": "string"
                },
                "valid_from": {
                    "type": "string"
                },
                "valid_to": {
                    "type": "string"
                },
                "zone_id": {
                    "type": "string"
                }
            }
        },
        "domain.MallZones": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/domain.MallZone"
            }
        },
        "domain.Malls": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/domain.Mall"
            }
        },
        "domain.Param": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "domain.ParamScreenUpd": {
            "type": "object",
            "properties": {
                "device_id": {
                    "type": "string"
                },
                "screenshot_status": {
                    "type": "string"
                },
                "screenshot_time": {
                    "type": "string"
                }
            }
        },
        "domain.ParamsScreenUpd": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/domain.ParamScreenUpd"
            }
        },
        "domain.PredictionDataPoint": {
            "type": "object",
            "properties": {
                "cash_income_flow": {
                    "type": "number"
                },
                "cash_income_sum": {
                    "type": "number"
                },
                "prediction_queue_length": {
                    "type": "number"
                },
                "queue_length": {
                    "type": "object",
                    "$ref": "#/definitions/domain.ListQueueLength"
                },
                "recommended_checkouts_number": {
                    "type": "integer"
                },
                "time": {
                    "type": "string"
                },
                "total_customer_count": {
                    "type": "number"
                }
            }
        },
        "domain.PredictionDataPoints": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/domain.PredictionDataPoint"
            }
        },
        "domain.PredictionQueue": {
            "type": "object",
            "properties": {
                "points": {
                    "type": "object",
                    "$ref": "#/definitions/domain.PredictionDataPoints"
                },
                "store_id": {
                    "type": "string"
                }
            }
        },
        "domain.PredictionsQueue": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/domain.PredictionQueue"
            }
        },
        "domain.QTLayout": {
            "type": "object",
            "properties": {
                "layout_id": {
                    "type": "string"
                },
                "sequence_length": {
                    "type": "integer"
                },
                "threshold": {
                    "type": "number"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "domain.QTStore": {
            "type": "object",
            "properties": {
                "sequence_length": {
                    "type": "integer"
                },
                "store_id": {
                    "type": "string"
                },
                "threshold": {
                    "type": "number"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "domain.Queue": {
            "type": "object",
            "properties": {
                "layouts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/domain.QueueLayout"
                    }
                },
                "service_channels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/domain.ServiceChannelElement"
                    }
                },
                "stores": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/domain.QueueStore"
                    }
                }
            }
        },
        "domain.QueueDataPoint": {
            "type": "object",
            "properties": {
                "cash_income_flow": {
                    "description": "how many \"people\" income to queue from prev interval",
                    "type": "integer"
                },
                "count_channels": {
                    "description": "number of service channels in the online mode at measurement moment",
                    "type": "integer"
                },
                "count_channels_verified": {
                    "description": "verified number of service channels in the online mode at measurement moment",
                    "type": "integer"
                },
                "has_verified": {
                    "description": "flag existsing verified number of service channels",
                    "type": "boolean"
                },
                "sum_cash_income_flow_by_window": {
                    "description": "summa of the income flow values by window interval",
                    "type": "integer"
                },
                "time": {
                    "description": "datetime of measurement",
                    "type": "string"
                },
                "value": {
                    "description": "count of people in the queue total (include service channels only in the online mode)",
                    "type": "integer"
                },
                "value_total": {
                    "description": "count of people in the queue total (include service channels in the offline and online mode)",
                    "type": "integer"
                }
            }
        },
        "domain.QueueDataPoints": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/domain.QueueDataPoint"
            }
        },
        "domain.QueueLayout": {
            "type": "object",
            "properties": {
                "layout_id": {
                    "type": "string"
                },
                "service_channel": {
                    "type": "object",
                    "$ref": "#/definitions/domain.LayoutServiceChannel"
                },
                "threshold": {
                    "type": "number"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "domain.QueueStore": {
            "type": "object",
            "properties": {
                "service_channel": {
                    "type": "object",
                    "$ref": "#/definitions/domain.LayoutServiceChannel"
                },
                "store_id": {
                    "type": "string"
                },
                "threshold": {
                    "type": "number"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "domain.QueueThresholds": {
            "type": "object",
            "properties": {
                "blocks_service_channels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/domain.BlocksServiceChannel"
                    }
                },
                "layouts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/domain.QTLayout"
                    }
                },
                "stores": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/domain.QTStore"
                    }
                }
            }
        },
        "domain.Recommendations": {
            "type": "object",
            "properties": {
                "layouts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/domain.RecommendationsLayout"
                    }
                },
                "stores": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/domain.Store"
                    }
                }
            }
        },
        "domain.RecommendationsLayout": {
            "type": "object",
            "properties": {
                "checkout_productivity": {
                    "type": "number"
                },
                "hist_minutes": {
                    "type": "integer"
                },
                "layout_id": {
                    "type": "string"
                },
                "pred_minutes": {
                    "type": "integer"
                },
                "queue_multiplier": {
                    "type": "number"
                },
                "std_coef": {
                    "type": "number"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "domain.Renter": {
            "type": "object",
            "properties": {
                "category_id": {
                    "type": "string"
                },
                "contract": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "creator": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "layout_id": {
                    "type": "string"
                },
                "modified_at": {
                    "type": "string"
                },
                "modifier": {
                    "type": "string"
                },
                "notes": {
                    "type": "string"
                },
                "options": {
                    "type": "string"
                },
                "price_segment_id": {
                    "type": "string"
                },
                "renter_id": {
                    "type": "string"
                },
                "time_close": {
                    "type": "string"
                },
                "time_open": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "valid_from": {
                    "type": "string"
                },
                "valid_to": {
                    "type": "string"
                },
                "zones": {
                    "type": "object",
                    "$ref": "#/definitions/domain.MallZones"
                }
            }
        },
        "domain.RenterAttendance": {
            "type": "object",
            "properties": {
                "points": {
                    "type": "object",
                    "$ref": "#/definitions/domain.AttendanceDataPoints"
                },
                "renter_id": {
                    "type": "string"
                }
            }
        },
        "domain.Renters": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/domain.Renter"
            }
        },
        "domain.RentersAttendance": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/domain.RenterAttendance"
            }
        },
        "domain.Report": {
            "type": "object",
            "properties": {
                "extension": {
                    "type": "string"
                },
                "files_count": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "layout_id": {
                    "type": "string"
                },
                "subscribers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "template_kind": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "domain.ReportFile": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "created_at": {
                    "type": "string"
                },
                "file_id": {
                    "type": "string"
                },
                "mime_type": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "sent_at": {
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                }
            }
        },
        "domain.ReportFiles": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/domain.ReportFile"
            }
        },
        "domain.Reports": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/domain.Report"
            }
        },
        "domain.Screenshot": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "timestamptz not null default current_timestamp, -- дата-время создания записи",
                    "type": "string"
                },
                "creator": {
                    "description": "varchar(128) not null default current_user, -- пользователь, создавший запись",
                    "type": "string"
                },
                "device_id": {
                    "description": "text not null, -- идентификатор устройства, с которого получен скриншот",
                    "type": "string"
                },
                "layout_id": {
                    "description": "text null, -- идентификатор схемы размещения, которой принадлежит устройство с которого получен скриншот",
                    "type": "string"
                },
                "layout_info": {
                    "description": "jsonb not null default '{}'::jsonb, -- более детальная проектная информация устройства",
                    "type": "object",
                    "$ref": "#/definitions/domain.LayoutInfo"
                },
                "notes": {
                    "description": "text null, -- заметки",
                    "type": "string"
                },
                "screenshot_status": {
                    "description": "статус скриншота: new-по умолчанию, processed-блокировка от изменений другими пользователями (не более 1 минуты), to_delete-помечен для удаления, archived-запись для вечного хранения",
                    "type": "string"
                },
                "screenshot_time": {
                    "description": "stamptz not null, -- дата-время создания скриншота",
                    "type": "string"
                },
                "store_id": {
                    "description": "text not null, -- идентификатор магазина, в котором находилось устройство с которого получен скриншот",
                    "type": "string"
                },
                "url": {
                    "description": "text not null, -- адрес местонахождения скриншота",
                    "type": "string"
                },
                "url_aliases": {
                    "description": "api layer only, alt links to screenshots",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "domain.Screenshots": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/domain.Screenshot"
            }
        },
        "domain.ServiceChannelElement": {
            "type": "object",
            "properties": {
                "service_channel": {
                    "type": "object",
                    "$ref": "#/definitions/domain.LayoutServiceChannel"
                },
                "service_channel_id": {
                    "type": "string"
                },
                "threshold": {
                    "type": "number"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "domain.Source": {
            "type": "object",
            "properties": {
                "kind": {
                    "type": "string"
                },
                "params": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/domain.Param"
                    }
                }
            }
        },
        "domain.Store": {
            "type": "object",
            "properties": {
                "checkout_productivity": {
                    "type": "number"
                },
                "hist_minutes": {
                    "type": "integer"
                },
                "pred_minutes": {
                    "type": "integer"
                },
                "queue_multiplier": {
                    "type": "number"
                },
                "std_coef": {
                    "type": "number"
                },
                "store_id": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "domain.StoreAttendance": {
            "type": "object",
            "properties": {
                "points": {
                    "type": "object",
                    "$ref": "#/definitions/domain.AttendanceDataPoints"
                },
                "store_id": {
                    "type": "string"
                }
            }
        },
        "domain.StoreDataQueue": {
            "type": "object",
            "properties": {
                "points": {
                    "type": "object",
                    "$ref": "#/definitions/domain.QueueDataPoints"
                },
                "store_id": {
                    "type": "string"
                }
            }
        },
        "domain.StoresAttendance": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/domain.StoreAttendance"
            }
        },
        "domain.StoresDataQueue": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/domain.StoreDataQueue"
            }
        },
        "domain.Track": {
            "type": "object",
            "properties": {
                "comment": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "creator": {
                    "type": "string"
                },
                "customer_id": {
                    "type": "string"
                },
                "device_id": {
                    "type": "string"
                },
                "h": {
                    "type": "number"
                },
                "layout_id": {
                    "type": "string"
                },
                "store_id": {
                    "type": "string"
                },
                "track_time": {
                    "type": "string"
                },
                "x": {
                    "type": "number"
                },
                "y": {
                    "type": "number"
                }
            }
        },
        "domain.Tracks": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/domain.Track"
            }
        },
        "domain.ZoneAttendance": {
            "type": "object",
            "properties": {
                "points": {
                    "type": "object",
                    "$ref": "#/definitions/domain.AttendanceDataPoints"
                },
                "zone_id": {
                    "type": "string"
                }
            }
        },
        "domain.ZoneDataEvaluation": {
            "type": "object",
            "properties": {
                "comment": {
                    "type": "string"
                },
                "is_full": {
                    "type": "boolean"
                },
                "layout_id": {
                    "type": "string"
                },
                "record_time": {
                    "type": "string"
                },
                "service_channel_block_id": {
                    "type": "string"
                },
                "store_id": {
                    "type": "string"
                }
            }
        },
        "domain.ZoneDataEvaluations": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/domain.ZoneDataEvaluation"
            }
        },
        "domain.ZoneDataQueue": {
            "type": "object",
            "properties": {
                "points": {
                    "type": "object",
                    "$ref": "#/definitions/domain.QueueDataPoints"
                },
                "zone_id": {
                    "type": "string"
                }
            }
        },
        "domain.ZoneState": {
            "type": "object",
            "properties": {
                "comment": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "creator": {
                    "type": "string"
                },
                "layout_id": {
                    "type": "string"
                },
                "modified_at": {
                    "type": "string"
                },
                "modifier": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                },
                "store_id": {
                    "type": "string"
                },
                "valid_from": {
                    "type": "string"
                },
                "valid_to": {
                    "type": "string"
                },
                "zone_id": {
                    "type": "string"
                }
            }
        },
        "domain.ZoneStates": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/domain.ZoneState"
            }
        },
        "domain.ZonesAttendance": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/domain.ZoneAttendance"
            }
        },
        "domain.ZonesDataQueue": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/domain.ZoneDataQueue"
            }
        },
        "infra.BehaviorsResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "$ref": "#/definitions/domain.Behaviors"
                },
                "result_set": {
                    "type": "object",
                    "$ref": "#/definitions/infra.ResultSet"
                }
            }
        },
        "infra.ChainBindSensorZoneResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "$ref": "#/definitions/domain.BindingsChainSensorZone"
                },
                "result_set": {
                    "type": "object",
                    "$ref": "#/definitions/infra.ResultSet"
                }
            }
        },
        "infra.ChainDeviceTracksResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "$ref": "#/definitions/domain.Tracks"
                },
                "result_set": {
                    "type": "object",
                    "$ref": "#/definitions/infra.ResultSet"
                }
            }
        },
        "infra.ChainDevicesResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "$ref": "#/definitions/domain.ChainDevices"
                },
                "result_set": {
                    "type": "object",
                    "$ref": "#/definitions/infra.ResultSet"
                }
            }
        },
        "infra.ChainEntrancesResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "$ref": "#/definitions/domain.ChainEntrances"
                },
                "result_set": {
                    "type": "object",
                    "$ref": "#/definitions/infra.ResultSet"
                }
            }
        },
        "infra.ChainEventsResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "$ref": "#/definitions/domain.Events"
                },
                "result_set": {
                    "type": "object",
                    "$ref": "#/definitions/infra.ResultSet"
                }
            }
        },
        "infra.ChainSensorsResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "$ref": "#/definitions/domain.ChainSensors"
                },
                "result_set": {
                    "type": "object",
                    "$ref": "#/definitions/infra.ResultSet"
                }
            }
        },
        "infra.ChainStoresResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "$ref": "#/definitions/domain.ChainStores"
                },
                "result_set": {
                    "type": "object",
                    "$ref": "#/definitions/infra.ResultSet"
                }
            }
        },
        "infra.ChainZonesResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "$ref": "#/definitions/domain.ChainZones"
                },
                "result_set": {
                    "type": "object",
                    "$ref": "#/definitions/infra.ResultSet"
                }
            }
        },
        "infra.ChainZonesStatesResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "$ref": "#/definitions/domain.ZoneStates"
                },
                "result_set": {
                    "type": "object",
                    "$ref": "#/definitions/infra.ResultSet"
                }
            }
        },
        "infra.ChainsResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "$ref": "#/definitions/domain.Chains"
                },
                "result_set": {
                    "type": "object",
                    "$ref": "#/definitions/infra.ResultSet"
                }
            }
        },
        "infra.EntitiesResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "$ref": "#/definitions/domain.Entities"
                },
                "result_set": {
                    "type": "object",
                    "$ref": "#/definitions/infra.ResultSet"
                }
            }
        },
        "infra.ErrResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "application-specific error code",
                    "type": "integer"
                },
                "error": {
                    "description": "application-level error message, for debugging",
                    "type": "string"
                },
                "status": {
                    "description": "user-level status message",
                    "type": "string"
                }
            }
        },
        "infra.HTTPError": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "object"
                }
            }
        },
        "infra.LayoutResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "$ref": "#/definitions/domain.Layouts"
                },
                "result_set": {
                    "type": "object",
                    "$ref": "#/definitions/infra.ResultSet"
                }
            }
        },
        "infra.MallDevicesResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "$ref": "#/definitions/domain.MallDevices"
                },
                "result_set": {
                    "type": "object",
                    "$ref": "#/definitions/infra.ResultSet"
                }
            }
        },
        "infra.MallEntrancesResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "$ref": "#/definitions/domain.MallEntrances"
                },
                "result_set": {
                    "type": "object",
                    "$ref": "#/definitions/infra.ResultSet"
                }
            }
        },
        "infra.MallZonesResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "$ref": "#/definitions/domain.MallZones"
                },
                "result_set": {
                    "type": "object",
                    "$ref": "#/definitions/infra.ResultSet"
                }
            }
        },
        "infra.MallsResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "$ref": "#/definitions/domain.Malls"
                },
                "result_set": {
                    "type": "object",
                    "$ref": "#/definitions/infra.ResultSet"
                }
            }
        },
        "infra.NewChain": {
            "type": "object",
            "properties": {
                "brands": {
                    "type": "string"
                },
                "creator": {
                    "type": "string"
                },
                "crm_key": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "languages": {
                    "type": "string"
                },
                "notes": {
                    "type": "string"
                },
                "options": {
                    "type": "string"
                },
                "read_only": {
                    "type": "boolean"
                },
                "title": {
                    "type": "string"
                },
                "valid_from": {
                    "type": "string"
                },
                "valid_to": {
                    "type": "string"
                }
            }
        },
        "infra.NewChainDevice": {
            "type": "object",
            "properties": {
                "creator": {
                    "type": "string"
                },
                "dcmode": {
                    "description": "DCMode data collector mode: active - device transmit data to server; passive - server request data from device",
                    "type": "string"
                },
                "ip": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "kind": {
                    "type": "string"
                },
                "layout_id": {
                    "type": "string"
                },
                "login": {
                    "type": "string"
                },
                "master_id": {
                    "type": "string"
                },
                "mode": {
                    "description": "Mode of people-counting: single/master/slave",
                    "type": "string"
                },
                "notes": {
                    "type": "string"
                },
                "options": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "port": {
                    "type": "string"
                },
                "sn": {
                    "type": "string"
                },
                "store_id": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "valid_from": {
                    "type": "string"
                },
                "valid_to": {
                    "type": "string"
                }
            }
        },
        "infra.NewChainEntrance": {
            "type": "object",
            "properties": {
                "creator": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "layout_id": {
                    "type": "string"
                },
                "notes": {
                    "type": "string"
                },
                "options": {
                    "type": "string"
                },
                "store_id": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "valid_from": {
                    "type": "string"
                },
                "valid_to": {
                    "type": "string"
                }
            }
        },
        "infra.NewChainSensor": {
            "type": "object",
            "properties": {
                "creator": {
                    "type": "string"
                },
                "device_id": {
                    "type": "string"
                },
                "external_id": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "layout_id": {
                    "type": "string"
                },
                "notes": {
                    "type": "string"
                },
                "options": {
                    "type": "string"
                },
                "store_id": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "valid_from": {
                    "type": "string"
                },
                "valid_to": {
                    "type": "string"
                }
            }
        },
        "infra.NewChainStore": {
            "type": "object",
            "properties": {
                "area": {
                    "type": "number"
                },
                "brands": {
                    "type": "string"
                },
                "creator": {
                    "type": "string"
                },
                "crm_key": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "layout_id": {
                    "type": "string"
                },
                "location_id": {
                    "type": "string"
                },
                "notes": {
                    "type": "string"
                },
                "options": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "valid_from": {
                    "type": "string"
                },
                "valid_to": {
                    "type": "string"
                }
            }
        },
        "infra.NewChainZone": {
            "type": "object",
            "properties": {
                "creator": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "layout_id": {
                    "type": "string"
                },
                "notes": {
                    "type": "string"
                },
                "options": {
                    "type": "string"
                },
                "parent_id": {
                    "type": "string"
                },
                "store_id": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "valid_from": {
                    "type": "string"
                },
                "valid_to": {
                    "type": "string"
                }
            }
        },
        "infra.RentersResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "$ref": "#/definitions/domain.Renters"
                },
                "result_set": {
                    "type": "object",
                    "$ref": "#/definitions/infra.ResultSet"
                }
            }
        },
        "infra.ReportFilesResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "$ref": "#/definitions/domain.ReportFiles"
                },
                "result_set": {
                    "type": "object",
                    "$ref": "#/definitions/infra.ResultSet"
                }
            }
        },
        "infra.ResultSet": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "limit": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "infra.ScreenshotsResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "$ref": "#/definitions/domain.Screenshots"
                },
                "result_set": {
                    "type": "object",
                    "$ref": "#/definitions/infra.ResultSet"
                }
            }
        },
        "infra.SuccessResponse": {
            "type": "object",
            "properties": {
                "httpcode": {
                    "description": "http response status code",
                    "type": "integer"
                },
                "message": {
                    "description": "text of message",
                    "type": "string"
                },
                "status": {
                    "description": "user-level status message",
                    "type": "string"
                }
            }
        },
        "infra.UpdBindingChainEntranceStore": {
            "type": "object",
            "properties": {
                "direction": {
                    "type": "string"
                },
                "entrance_id": {
                    "type": "string"
                },
                "new_store_id": {
                    "type": "string"
                },
                "no_history": {
                    "type": "boolean"
                },
                "old_store_id": {
                    "type": "string"
                },
                "options": {
                    "type": "string"
                },
                "valid_from": {
                    "type": "string"
                }
            }
        },
        "infra.UpdBindingChainEntranceZone": {
            "type": "object",
            "properties": {
                "direction": {
                    "type": "string"
                },
                "entrance_id": {
                    "type": "string"
                },
                "new_zone_id": {
                    "type": "string"
                },
                "no_history": {
                    "type": "boolean"
                },
                "old_zone_id": {
                    "type": "string"
                },
                "options": {
                    "type": "string"
                },
                "valid_from": {
                    "type": "string"
                }
            }
        },
        "infra.UpdBindingChainSensorEntrance": {
            "type": "object",
            "properties": {
                "direction": {
                    "type": "string"
                },
                "k_in": {
                    "type": "number"
                },
                "k_out": {
                    "type": "number"
                },
                "modifier": {
                    "type": "string"
                },
                "new_entrance_id": {
                    "type": "string"
                },
                "no_history": {
                    "type": "boolean"
                },
                "old_entrance_id": {
                    "type": "string"
                },
                "options": {
                    "type": "string"
                },
                "sensor_id": {
                    "type": "string"
                },
                "valid_from": {
                    "type": "string"
                }
            }
        },
        "infra.UpdBindingChainSensorZone": {
            "type": "object",
            "properties": {
                "new_zone_id": {
                    "type": "string"
                },
                "no_history": {
                    "type": "boolean"
                },
                "old_zone_id": {
                    "type": "string"
                },
                "options": {
                    "type": "string"
                },
                "sensor_id": {
                    "type": "string"
                },
                "valid_from": {
                    "type": "string"
                }
            }
        },
        "infra.UpdChain": {
            "type": "object",
            "properties": {
                "brands": {
                    "type": "string"
                },
                "creator": {
                    "type": "string"
                },
                "crm_key": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "languages": {
                    "type": "string"
                },
                "layout_id": {
                    "type": "string"
                },
                "no_history": {
                    "type": "boolean"
                },
                "notes": {
                    "type": "string"
                },
                "options": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "valid_from": {
                    "type": "string"
                },
                "valid_to": {
                    "type": "string"
                }
            }
        },
        "infra.UpdChainDevice": {
            "type": "object",
            "properties": {
                "dcmode": {
                    "description": "DCMode data collector mode: active - device transmit data to server; passive - server request data from device",
                    "type": "string"
                },
                "device_id": {
                    "type": "string"
                },
                "ip": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "kind": {
                    "type": "string"
                },
                "login": {
                    "type": "string"
                },
                "master_id": {
                    "type": "string"
                },
                "mode": {
                    "description": "Mode of people-counting: single/master/slave",
                    "type": "string"
                },
                "no_history": {
                    "type": "boolean"
                },
                "notes": {
                    "type": "string"
                },
                "options": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "port": {
                    "type": "string"
                },
                "sn": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "valid_from": {
                    "type": "string"
                }
            }
        },
        "infra.UpdChainEntrance": {
            "type": "object",
            "properties": {
                "entrance_id": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "no_history": {
                    "type": "boolean"
                },
                "notes": {
                    "type": "string"
                },
                "options": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "valid_from": {
                    "type": "string"
                }
            }
        },
        "infra.UpdChainSensor": {
            "type": "object",
            "properties": {
                "external_id": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "no_history": {
                    "type": "boolean"
                },
                "notes": {
                    "type": "string"
                },
                "options": {
                    "type": "string"
                },
                "sensor_id": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "valid_from": {
                    "type": "string"
                }
            }
        },
        "infra.UpdChainStore": {
            "type": "object",
            "properties": {
                "area": {
                    "type": "number"
                },
                "brands": {
                    "type": "string"
                },
                "crm_key": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "layout_id": {
                    "type": "string"
                },
                "location_id": {
                    "type": "string"
                },
                "no_history": {
                    "type": "boolean"
                },
                "notes": {
                    "type": "string"
                },
                "options": {
                    "type": "string"
                },
                "store_id": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "valid_from": {
                    "type": "string"
                }
            }
        },
        "infra.UpdChainZone": {
            "type": "object",
            "properties": {
                "kind": {
                    "type": "string"
                },
                "no_history": {
                    "type": "boolean"
                },
                "notes": {
                    "type": "string"
                },
                "options": {
                    "type": "string"
                },
                "parent_id": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "valid_from": {
                    "type": "string"
                },
                "zone_id": {
                    "type": "string"
                }
            }
        },
        "infra.Version": {
            "type": "object",
            "properties": {
                "api_version": {
                    "type": "string"
                },
                "build": {
                    "type": "string"
                },
                "db_version": {
                    "type": "string"
                },
                "git_hash": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "reference.RefCategories": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/reference.RefCategory"
            }
        },
        "reference.RefCategory": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "reference.RefPrice": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "reference.RefPrices": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/reference.RefPrice"
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "2.0/1.1.21",
	Host:        "",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "LayoutConfig API",
	Description: "This is a general service for interacting with layout configuration.\nОбщий сервис для взаимодействия с конфигурацией схем размещения.",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
